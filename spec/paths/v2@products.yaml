get:
  tags:
    - Version 2
  summary: Informations of list products API
  description: API to get all information about products by list skus
  servers:
    - url: 'http://listing.teko.com/{basePath}'
      variables:
        basePath:
          default: api
    - url: 'http://listing-dev.teko.com/{basePath}'
      variables:
        basePath:
          default: api
  parameters:
    - name: channel
      in: query
      description: |
        channel calls to API
      required: true
      schema:
        type: string
        enum:
          - pv_showroom
          - pv_online
          - pv_agent
          - vnshop_online
      example: pv_showroom
    - name: terminal
      in: query
      required: true
      description: |
        terminal to identified client
      schema:
        type: string
      example: CP01
    - name: _page
      in: query
      description: |
        page number
      required: false
      schema:
        type: integer
        default: 1
      example: 1
    - name: DISABLE_SIGN
      in: query
      description: key for getting secret product's data
      schema:
        type: string
      example: secret
    - name: _limit
      in: query
      description: |
        maximum number of products in response
      required: false
      schema:
        type: integer
        default: 10
      example: 10
    - name: skus
      in: query
      description: list sku, separated by commas
      required: false
      schema:
        type: string
    - name: relatedSku
      in: query
      description: related sku to get recommend products
      required: false
      schema:
        type: string
    - name: visitorId
      in: query
      description: visitor id from tracking to get personalize recommend products
      required: false
      schema:
        type: string
  responses:
    200:
      description: products object response
      headers:
        requestId:
          schema:
            type: string
          description: uuid request for tracking
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - result
            properties:
              code:
                type: string
                description: result code, should different from 00
              result:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/ListingProductData'
                        - $ref: '#/components/schemas/ListingProductDetail'
    404:
      description: product not found response
      headers:
        requestId:
          schema:
            type: string
          description: uuid request for tracking
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListingError'
          examples:
            error:
              summary: An example of 404 error
              value:
                code: "02"
                message: "404 Not Found: Product with sku 123123 is not found"
