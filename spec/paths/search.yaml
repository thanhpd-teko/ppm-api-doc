get:
  tags:
    - Search
  summary: search and return product listing by query
  servers:
    - url: 'http://listing.phongvu.com/{basePath}'
      variables:
        basePath:
          default: api
  parameters:
    - name: channel
      in: query
      description: |
        channel calls to API
      required: true
      schema:
        type: string
        enum:
          - offline
          - online
      example: offline
    - name: visitorId
      in: query
      required: true
      description: |
        user identified, usage for tracking
      schema:
        type: string
      example: c8kjs98922fsd
    - name: q
      in: query
      description: |
        keyword for searching
      required: false
      schema:
        type: string
      example: 'laptop'
    - name: _page
      in: query
      description: |
        page number
      required: false
      schema:
        type: integer
        default: 1
      example: 1
    - name: _limit
      in: query
      description: |
        maximum number of products in response
      required: false
      schema:
        type: integer
        default: 10
      example: 10
    - name: _sort
      in: query
      required: false
      description: |
        Listing conditions for sorting result.
        >
        Values: [`price`, `stock`, `new`, `popular`].
        >
        >> Specially, with sorting by stock, if you want to prioritize any branch, add branch code with underscore like **stock_CP01**
      schema:
        type: string
      example: stock_CP01,price
    - name: _order
      in: query
      required: false
      description: |
        Values: [`asc`, `desc`]
      schema:
        type: string
      example: asc,asc
    - name: price_gte
      in: query
      required: false
      description: |
        filter product has price greater or equal than
      schema:
        type: number
        format: double
      example: 5000000
    - name: price_lte
      in: query
      required: false
      description: |
        filter product has price less or equal than
      schema:
        type: number
        format: double
      example: 10000000
    - name: sellingStatus
      required: false
      in: query
      description: |
        filter product has selling status in list, separated by commas
      schema:
        type: string
      style: form
      explode: false
      example: code_1,code_2
    - name: brand
      in: query
      required: false
      description: |
        filter product in list brands, separated by commas
      schema:
        type: string
      example: "ASUS,ACER"
    - name: category
      in: query
      required: false
      description: |
        filter product in list categories, separated by commas
      schema:
        type: string
      example: 04-N010-02,01-N020-03
    - name: tags
      in: query
      required: false
      description: |
        filter product in list tags, separated by commas
      schema:
        type: string
      example: new,hot,flashsale
    - name: attributes.<attribute_code>
      in: query
      required: false
      description: |
        filter product by attribute value, separated by commas
      schema:
        oneOf:
          - type: string
          - type: integer
    - name: resp_ne
      in: query
      required: false
      description: |
        Using for exclude any data of response
        >
        Default, response has 3 main blocks: ***products***, ***keywords***, ***filters***.
        >
        Using parameter to get necessary response. Each value is separated by commas
      schema:
        type: string
      example: filters
  responses:
    200:
      description: response for successful request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListingSearchResp'
    400:
      description: invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListingError'
          examples:
            error:
              summary: An example of 400 error
              value:
                code: "01"
                message: "400 Bad Request: Input payload validation failed. Page number, starting from 1 invalid literal for int() with base 10: 'b'"
