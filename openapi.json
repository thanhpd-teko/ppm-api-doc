{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Teko Api Specification",
    "contact": {
      "email": "tien.dv@teko.vn"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://teko-vn.github.io/api-docs/Teko-Logo-01.svg"
    },
    "description": "This documentation describes APIs used in/exposed from Teko micro-services ecosystem\n# Introduction\nThese specifications are following\n[OpenAPI 3.0.0 format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md).\n"
  },
  "tags": [
    {
      "name": "Vouchers",
      "description": "Provides apis for voucher service"
    },
    {
      "name": "IAM API",
      "description": "We provide four examples one for each of the grant types defined by the [OAuth2 RFC 6749](https://tools.ietf.org/html/rfc6749).\nThese grant types (or workflows) are:\n1. Authorization Code Grant.\n2. The Implicit Grant.\n3. The Resource Owner Password Credentials Grant.\n4. The Client Credentials Grant.\n\nFor OAuth2, you can see example to connect with OAuth2 [here](https://requests-oauthlib.readthedocs.io/en/latest/oauth2_workflow.html).\n\nIn addition, we also support [OpenID Connect Flow](https://openid.net/connect/) which has been developed by extending OAuth 2.0.\n\nOAuth 2.0 is a specification as to how to issue `access tokens`. It is defined in RFC 6749 (The OAuth 2.0 Authorization Framework).\n\nOpenID Connect is a specification as to how to issue ID tokens. The main part is defined in OpenID Connect Core 1.0.\n\n**Access Token**\n\nJSON Web Token (JWT) is an open standard ([`RFC 7519`](https://tools.ietf.org/html/rfc7519)) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.\nAlthough JWTs can be encrypted to also provide secrecy between parties, we will focus on signed tokens. Signed tokens can verify the integrity of the claims contained within it, while encrypted tokens hide those claims from other parties. When tokens are signed using public/private key pairs, the signature also certifies that only the party holding the private key is the one that signed it.\n\nIAM Access Token (JWT) with following format:\n- ***HEADER***: algorithm & token type\n```\n{\n    \"typ\": \"JWT\",\n    \"alg\": \"RS256\"\n}\n```\n\n- ***PAYLOAD***: data\n```\n{\n    \"jti\": \"14qbEKuydIxz7IBLpg9EXludOOGztBEpoadiKcuEbtcct4Rd\",\n    \"client_id\": \"client_id_0\",\n    \"scope\": \"profile\",\n    \"user\": {\n      \"id\": 1,\n      \"name\": \"User 0\"\n    }\n}\n```\n  - `jti` - JWT ID.\n  - `client_id` - your client_id of application.\n  - `scope` - your scope of application.\n  - `user` - with id and name are included -  `user_id` and `user_name`.\n\n- ***VERIFY SIGNATURE***\n\n  `RSASHA56(base64UrlEncode(header) + \".\" + base64UrlEncode(payload), <your public key>, <your private key>)`.\n\nSee [here](https://tools.ietf.org/html/rfc7519#section-4) for more information.\n"
    },
    {
      "description": "Branch operations",
      "name": "Branches"
    },
    {
      "description": "Warehouse operations",
      "name": "Warehouses"
    },
    {
      "description": "Location operations",
      "name": "Locations"
    },
    {
      "description": "StockQuant operations",
      "name": "Stock Quantities"
    },
    {
      "description": "StockOut operations",
      "name": "Stock Out"
    },
    {
      "description": "SRM product operations",
      "name": "SRM Products"
    },
    {
      "description": "External APIs",
      "name": "External"
    },
    {
      "name": "Promotion API",
      "description": "Provide apis for other services to get promotion info"
    },
    {
      "name": "Promotion Confirm/Validation API",
      "description": "Provide apis for other services to get promotion info"
    },
    {
      "name": "Product Listing",
      "description": "Provides apis for Product Listing APIs"
    },
    {
      "name": "Competitor API",
      "description": "Provides api to get a list of competitors"
    },
    {
      "name": "Orders",
      "description": "Provides APIs to create and manage Orders"
    },
    {
      "name": "Banners",
      "description": "Provide API to get banner info"
    },
    {
      "name": "User Services",
      "description": "Provide API for user service"
    }
  ],
  "servers": [
    {
      "url": "http://example.com/api/v1"
    },
    {
      "url": "https://example.com/api/v1"
    },
    {
      "url": "/api/v2"
    },
    {
      "url": "https://orders.dev.svc.5kbps.io",
      "description": "Order Development Server"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Offline Sales",
      "tags": [
        "Vouchers"
      ]
    },
    {
      "name": "Identity Platform",
      "tags": [
        "IAM API"
      ]
    },
    {
      "name": "WMS",
      "tags": [
        "Branches",
        "Warehouses",
        "Locations",
        "Stock Quantities",
        "Stock Out",
        "External"
      ]
    },
    {
      "name": "SRM",
      "tags": [
        "SRM Products"
      ]
    },
    {
      "name": "Product Listing",
      "tags": [
        "Search/Listing",
        "Version 2",
        "Brand",
        "DisplayCategory",
        "MenuItem",
        "Search Platform"
      ]
    },
    {
      "name": "Price And Promotions",
      "tags": [
        "Promotion Coupon API",
        "Promotion API",
        "Promotion Confirm/Validation API",
        "Competitor API"
      ]
    },
    {
      "name": "Payment service",
      "tags": [
        "Methods",
        "Transactions",
        "Payments",
        "Qrcode"
      ]
    },
    {
      "name": "Order Service",
      "tags": [
        "Orders"
      ]
    },
    {
      "name": "Page Builder",
      "tags": [
        "Banners"
      ]
    },
    {
      "name": "User Service",
      "tags": [
        "Addresses",
        "Profiles",
        "Ratings",
        "Comments",
        "Saved Cart",
        "Wish List",
        "App Setting",
        "Auth",
        "Blue"
      ]
    },
    {
      "name": "Location Service",
      "tags": [
        "Location API"
      ]
    },
    {
      "name": "DCA Service",
      "tags": [
        "Account",
        "Account Lookup"
      ]
    },
    {
      "name": "Seller Service",
      "tags": [
        "Sellers",
        "Terminals",
        "Extra",
        "Terminals Warehouses Mapping"
      ]
    }
  ],
  "paths": {
    "/api/v1/banners": {
      "get": {
        "tags": [
          "Banners"
        ],
        "summary": "Filter banners by params",
        "description": "API để tim kiếm các banner thoả mãn các điều kiện lọc",
        "servers": [
          {
            "url": "https://pagebuilder-dev.phongvu.vn"
          }
        ],
        "parameters": [
          {
            "name": "terminals",
            "in": "query",
            "description": "Mã code của điểm bán\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "CP00"
          },
          {
            "name": "displayPage",
            "in": "query",
            "description": "Trang hiển thị\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Home",
                "Detail",
                "Listing",
                "Landing"
              ]
            },
            "example": "Home"
          },
          {
            "name": "saleCategories",
            "in": "query",
            "description": "Id của danh mục\n",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "maximum number of banner in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            },
            "example": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Thông tin chi tiết các banner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "current_page",
                    "page_size",
                    "total_item",
                    "banners"
                  ],
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "description": "Current page"
                    },
                    "page_size": {
                      "type": "integer",
                      "description": "Size of page"
                    },
                    "total_item": {
                      "type": "integer",
                      "description": "Total of banner satisfy the search condition"
                    },
                    "banners": {
                      "type": "array",
                      "description": "Banner array satisfy the search condition",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/BannerDetail"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Có lỗi xảy ra",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageBuilderError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 400 ERROR",
                    "value": {
                      "code": "ERROR",
                      "message": ""
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branches/": {
      "get": {
        "description": ":return: list[Branch] - list all branches",
        "operationId": "get_branches",
        "tags": [
          "Branches"
        ],
        "responses": {
          "200": {
            "description": "Successful Return",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/branch_success"
                }
              }
            }
          }
        },
        "summary": "Get list all branches"
      }
    },
    "/brands": {
      "get": {
        "tags": [
          "Brand"
        ],
        "summary": "List Brand API",
        "description": "API to get list of brands,\nthese brands can be sorted in multi field include:\n```\nsort_field = {\n    \"quantity\": {\n        \"dynamic\": \"strict\",\n        \"properties\": {\n            \"last_1_week\": {\n                \"type\": \"double\"\n            },\n            \"last_2_week\": {\n                \"type\": \"double\"\n            },\n            \"last_3_week\": {\n                \"type\": \"double\"\n            },\n            \"last_4_week\": {\n                \"type\": \"double\"\n            },\n            \"last_1_month\": {\n                \"type\": \"double\"\n            },\n            \"last_2_month\": {\n                \"type\": \"double\"\n            },\n            \"last_3_month\": {\n                \"type\": \"double\"\n            },\n            \"last_6_month\": {\n                \"type\": \"double\"\n            },\n            \"last_12_month\": {\n                \"type\": \"double\"\n            }\n\n        }\n    },\n    \"turnover\": {\n        \"dynamic\": \"strict\",\n        \"properties\": {\n            \"last_1_week\": {\n                \"type\": \"double\"\n            },\n            \"last_2_week\": {\n                \"type\": \"double\"\n            },\n            \"last_3_week\": {\n                \"type\": \"double\"\n            },\n            \"last_4_week\": {\n                \"type\": \"double\"\n            },\n            \"last_1_month\": {\n                \"type\": \"double\"\n            },\n            \"last_2_month\": {\n                \"type\": \"double\"\n            },\n            \"last_3_month\": {\n                \"type\": \"double\"\n            },\n            \"last_6_month\": {\n                \"type\": \"double\"\n            },\n            \"last_12_month\": {\n                \"type\": \"double\"\n            }\n\n        }\n    },\n    \"profit\": {\n        \"dynamic\": \"strict\",\n        \"properties\": {\n            \"last_1_week\": {\n                \"type\": \"double\"\n            },\n            \"last_2_week\": {\n                \"type\": \"double\"\n            },\n            \"last_3_week\": {\n                \"type\": \"double\"\n            },\n            \"last_4_week\": {\n                \"type\": \"double\"\n            },\n            \"last_1_month\": {\n                \"type\": \"double\"\n            },\n            \"last_2_month\": {\n                \"type\": \"double\"\n            },\n            \"last_3_month\": {\n                \"type\": \"double\"\n            },\n            \"last_6_month\": {\n                \"type\": \"double\"\n            },\n            \"last_12_month\": {\n                \"type\": \"double\"\n            }\n\n        }\n    },\n    \"view\": {\n        \"dynamic\": \"strict\",\n        \"properties\": {\n            \"last_1_day\": {\n                \"type\": \"integer\"\n            },\n            \"last_3_day\": {\n                \"type\": \"integer\"\n            },\n            \"last_7_day\": {\n                \"type\": \"integer\"\n            },\n            \"last_10_day\": {\n                \"type\": \"integer\"\n            },\n            \"last_30_day\": {\n                \"type\": \"integer\"\n            },\n            \"last_60_day\": {\n                \"type\": \"integer\"\n            },\n            \"last_90_day\": {\n                \"type\": \"integer\"\n            }\n        }\n    }\n}\n```\n",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "terminal",
            "in": "query",
            "description": "terminal to identify client\n>only one value allowed\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "CP01"
          },
          {
            "name": "channel",
            "in": "query",
            "description": "channel to identify client\n>only one value allowed\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "pv_online"
          },
          {
            "name": "displayCategoryId",
            "in": "query",
            "description": "id of display category to get brands list\n>only one value allowed\n",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of brands in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            },
            "example": 20
          },
          {
            "name": "_page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "description": "List of conditions for sorting result.\n",
            "schema": {
              "type": "string",
              "default": "quantity.last_3_month"
            },
            "example": "quantity.last_2_week, view.last_60_day"
          },
          {
            "name": "_order",
            "in": "query",
            "required": false,
            "description": "Values: [`asc`, `desc`]\n",
            "schema": {
              "type": "string",
              "default": "desc"
            },
            "example": "asc,asc"
          }
        ],
        "responses": {
          "200": {
            "description": "response for successful request",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingBrandResp"
                }
              }
            }
          },
          "400": {
            "description": "invalid parameters",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 400 error",
                    "value": {
                      "code": "BAD_REQUEST",
                      "message": "400 Bad Request: Input payload validation failed. Brands limit, starting from 1 invalid literal for int() with base 10: 'b'"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "response when server has error",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "INTERNAL_SERVER",
                  "message": "Connection to elasticsearch has troubles"
                }
              }
            }
          }
        }
      }
    },
    "/competitors": {
      "get": {
        "tags": [
          "Competitor API"
        ],
        "summary": "Get Competitors API",
        "description": "Lấy danh sách các đối thủ của Phong Vũ",
        "operationId": "get-competitors",
        "responses": {
          "200": {
            "description": "Lấy danh sách các đối thủ thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CompetitorResp"
                }
              }
            }
          }
        }
      }
    },
    "/account_lookups": {
      "get": {
        "summary": "Filter Account",
        "servers": [
          {
            "url": "https://dca.develop.tekoapis.net"
          }
        ],
        "tags": [
          "Account Lookup"
        ],
        "parameters": [
          {
            "name": "taxCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "telephone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iamId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentPage": {
                      "type": "integer"
                    },
                    "totalRecords": {
                      "type": "integer"
                    },
                    "pageSize": {
                      "type": "integer"
                    },
                    "accountLookups": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "taxCode": {
                            "type": "string"
                          },
                          "iamId": {
                            "type": "string"
                          },
                          "telephone": {
                            "type": "string"
                          },
                          "isVerified": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "summary": "Create Account",
        "servers": [
          {
            "url": "https://dca.develop.tekoapis.net"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "account": {
                          "$ref": "#/components/schemas/account"
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_post_request"
              }
            }
          }
        },
        "tags": [
          "Account"
        ]
      }
    },
    "/accounts{accountId}": {
      "get": {
        "summary": "Get an Account Detail",
        "servers": [
          {
            "url": "https://dca.develop.tekoapis.net"
          }
        ],
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "account": {
                          "$ref": "#/components/schemas/account"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get an Account by Id"
      },
      "patch": {
        "summary": "Update Account",
        "servers": [
          {
            "url": "https://dca.develop.tekoapis.net"
          }
        ],
        "tags": [
          "Account"
        ],
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "account": {
                          "$ref": "#/components/schemas/account"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/account_patch_request"
              }
            }
          },
          "description": "Update info Enterprise User"
        }
      }
    },
    "/search_account": {
      "post": {
        "summary": "Filter Account on Elastic Search",
        "tags": [
          "Account Lookup"
        ],
        "servers": [
          {
            "url": "https://search.develop.tekoapis.net/api/v1/suggest"
          }
        ],
        "parameters": [
          {
            "name": "x-tk-access-token",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "string",
                        "description": "telephone or taxCode"
                      },
                      "type": {
                        "type": "string",
                        "description": "phrase_prefix"
                      }
                    }
                  },
                  "suggestions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "suggestion_name": {
                          "type": "string",
                          "description": "dca-api"
                        },
                        "filters": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string",
                                "description": "sellerId or roleId"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "size": {
                    "type": "integer"
                  },
                  "enable_highlight": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "dca-api": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "address": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "taxCode": {
                                "type": "string"
                              },
                              "telephone": {
                                "type": "string"
                              },
                              "isCompany": {
                                "type": "boolean"
                              },
                              "sellerId": {
                                "type": "integer"
                              },
                              "roleId": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/display_categories": {
      "get": {
        "tags": [
          "DisplayCategory"
        ],
        "summary": "List Display Category API",
        "description": "aggregate and return display category listing by query",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "terminal",
            "in": "query",
            "description": "terminal calls to API\n>only one value allowed\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "CP01"
          },
          {
            "name": "channel",
            "in": "query",
            "description": "channel to identify client\n>only one value allowed\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "pv_online"
          },
          {
            "name": "level",
            "in": "query",
            "description": "filter theo level của danh mục hiển thị\n",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "filter theo parentId của danh mục hiển thị\n",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of display categories in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            },
            "example": 20
          },
          {
            "name": "_page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "description": "Listing conditions for sorting result.\n",
            "schema": {
              "type": "string",
              "default": "quantity.last_3_month"
            },
            "example": "quantity.last_2_week, view.last_60_day"
          },
          {
            "name": "_order",
            "in": "query",
            "required": false,
            "description": "Values: [`asc`, `desc`]\n",
            "schema": {
              "type": "string",
              "default": "desc"
            },
            "example": "asc,asc"
          }
        ],
        "responses": {
          "200": {
            "description": "response for successful request",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingDisplayCategoryResp"
                }
              }
            }
          },
          "400": {
            "description": "invalid parameters",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 400 error",
                    "value": {
                      "code": "BAD_REQUEST",
                      "message": "400 Bad Request: Input payload validation failed. Display Categories limit, starting from 1 invalid literal for int() with base 10: 'b'"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "response when server has error",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "INTERNAL_SERVER",
                  "message": "Connection to elasticsearch has troubles"
                }
              }
            }
          }
        }
      }
    },
    "/districts": {
      "get": {
        "summary": "Get Districts By Province Code",
        "tags": [
          "Location API"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "districts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/area"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "provinceCode"
          }
        ]
      }
    },
    "/external/po/{id}": {
      "parameters": [
        {
          "description": "The IN coupon ID of stock.picking needs to handle WMS",
          "name": "id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eton_po_req"
              }
            }
          },
          "required": true
        },
        "operationId": "put_external_po",
        "tags": [
          "External"
        ],
        "responses": {
          "200": {
            "description": "Operation succeed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eton_success_res"
                }
              }
            }
          }
        },
        "summary": "Update PO status"
      }
    },
    "/external/so/{id}": {
      "parameters": [
        {
          "description": "The Pick coupon ID of stock.picking needs to handle WMS",
          "name": "id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eton_so_req"
              }
            }
          },
          "required": true
        },
        "operationId": "put_external_so",
        "tags": [
          "External"
        ],
        "responses": {
          "200": {
            "description": "Successful updating",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eton_success_res"
                }
              }
            }
          }
        },
        "summary": "Update SO status by type (picked, packed, delivered)"
      }
    },
    "/external/so/{id}/returned": {
      "parameters": [
        {
          "description": "The Pick coupon ID of stock.picking needs to handle WMS",
          "name": "id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eton_so_returned_req"
              }
            }
          },
          "required": true
        },
        "operationId": "put_external_so_return",
        "tags": [
          "External"
        ],
        "responses": {
          "200": {
            "description": "Successful updating",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eton_success_res"
                }
              }
            }
          }
        },
        "summary": "Update SO status by type (returned)"
      }
    },
    "/locations/": {
      "get": {
        "description": ":return: list[Location] - list all locations",
        "operationId": "get_locations",
        "tags": [
          "Locations"
        ],
        "responses": {
          "200": {
            "description": "Successful Return",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/location_success"
                }
              }
            }
          }
        },
        "summary": "Get list all locations"
      }
    },
    "/menu_items": {
      "get": {
        "tags": [
          "MenuItem"
        ],
        "summary": "List Menu Item API",
        "description": "Aggregate and return menu item listing by query",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "zone",
            "in": "query",
            "description": "filter theo zone code của menu item\n",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "top_brand"
          },
          {
            "name": "level",
            "in": "query",
            "description": "filter theo level của menu item\n",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "filter theo parentId của menu item\n",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of menu items in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            },
            "example": 20
          },
          {
            "name": "_page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "description": "Listing conditions for sorting result.(Enum: [\"priority\"])\n",
            "schema": {
              "type": "string"
            },
            "example": "priority"
          },
          {
            "name": "_order",
            "in": "query",
            "required": false,
            "description": "Values: [`asc`, `desc`]\n",
            "schema": {
              "type": "string"
            },
            "example": "desc"
          }
        ],
        "responses": {
          "200": {
            "description": "response for successful request",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingMenuItemResp"
                }
              }
            }
          },
          "400": {
            "description": "invalid parameters",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 400 error",
                    "value": {
                      "code": "BAD_REQUEST",
                      "message": "400 Bad Request: Input payload validation failed. menu items limit, starting from 1 invalid literal for int() with base 10: 'b'"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "response when server has error",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "INTERNAL_SERVER",
                  "message": "Connection to elasticsearch has troubles"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/authorize": {
      "get": {
        "tags": [
          "IAM API"
        ],
        "summary": "Authorize API",
        "description": "Here is **Authorization EndPoint**. We have to call it to get `code` or `token` to issues `access_tokens`.\n1. The **Authorization Code Grant** with following parameters:\n  - `response_type=code` (required) is set to code indicating that you want an authorization code as the response.\n  - `client_id` (required) is the identifier for your app. You will have received a client_id when first registering your app with the service.\n  - `redirect_uri` (optional). The `redirect_uri` may be optional depending on the API, but is highly recommended.\n  This is the URL to which you want the user to be redirected after the authorization is complete.\n  This must match the redirect URL that you have previously registered with the service.\n  - `scope` (optional). Include one or more scope values (space-separated) to request additional levels of access.\n  The values will depend on the particular service.\n  - `state` (recommended). This is used to prevent CSRF attacks.\n2. The **Implicit Grant** with following parameters:\n  - `response_type=token` (required). This tells the authorization server that the application is initiating the Implicit flow.\n  Note the difference from the Authorization Code flow where this value is set to code\n  - `client_id` (required). The public identifier for the application, obtained when the developer first registered the application.\n  - `redirect_uri` (optional). Tells the authorization server where to send the user back to after they approve the request.\n  - `scope`. One or more space-separated strings indicating which permissions the application is requesting.\n  The specific OAuth API you’re using will define the scopes that it supports.\n  - `state` (recommended). This is used to prevent CSRF attacks.\n3. The **Resource Owner Password Credentials Grant** does not use authorization endpoint.\n4. The **Client Credentials Grant** is similar with [3].\n5. Using with OIDC:\n\n  5.1. `response_type=code`\n  - `openid` is not included in `scope`. The same with Authorization Code Grant Flow.\n  - `openid` is included in `scope`. An ID token is issued from the token endpoint in addition to an access token.\n  \n  5.2. `response_type=token`. Similar with Implicit Grant Flow for RFC6749. \n  Even if `openid` is included in the `scope` request parameter, an ID token is not issued.\n  This flow uses the authorization endpoint but does not use the token endpoint.\n\n  5.3. `response_type=id_token`. When the value of `response_type` is `id_token`, an ID token is issued from the authorization endpoint.\n  This flow does not use the token endpoint.\n\n  5.4. `response_type=id_token token`.\n\n  5.5. `response_type=code id_token`.\n\n  5.6. `response_type=code token`.\n\n  5.7. `response_type=code id_token token`.\n\n  From 5.4 to 5.7 (Hybrid Flow). See docs [here](https://medium.com/@darutk/diagrams-of-all-the-openid-connect-flows-6968e3990660).\n\n  5.8. `response_type=none`. When the value of response_type is none, nothing is issued from the authorization endpoint.\n  This flow does not use the token endpoint.\n",
        "parameters": [
          {
            "name": "response_type",
            "description": "Information application which is returned in callback url.\nFor example, with \nThe value `MUST` be: \n  - `code` for requesting an authorization code.\n  - `token` for requesting an access token (implicit grant flow). \n  - `id_token` for OpenID Connect.\n",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "code",
                "token",
                "id_token"
              ]
            },
            "required": true
          },
          {
            "name": "client_id",
            "description": "Client ID information.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "redirect_uri",
            "description": "Url that ID service will redirect user after authorization is successful. If not have, default use redirect_uri which client registered.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "scope",
            "description": "Definition of access level (access control) which client want to request.\nScopes are delimmited by spaces. If we want to use OIDC flow, add `openid` into `scope` request parameter.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "state",
            "description": "Randomize string which client generated.\nNot REQUIRED but should have, for prevent CSRF attack.\nHave to save by user session to re-check after authorization is successful.\n",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "302": {
            "description": "location to `redirect_uri` with parameter `code` or `token` or `id_token` and `state` (optional) in query string.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "Redirecting ..."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://id.teko.vn"
          }
        ]
      }
    },
    "/oauth/introspect": {
      "post": {
        "tags": [
          "IAM API"
        ],
        "summary": "Introspect Token API",
        "description": "Introspection Token API in OAuth2 help you to get information from your access or refresh token.\n",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Basic `base64({client_id}:{client_secret})`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "token",
            "description": "your access or refresh token which is used for introspect.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "token_type_hint",
            "description": "`access_token` or `refresh_token`.\n",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "access_token",
                "refresh_token"
              ]
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "token introspection object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthIntrospectToken"
                }
              }
            }
          },
          "401": {
            "description": "token introspection unauthorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenUnauthorizedResp"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://id.teko.vn"
          }
        ]
      }
    },
    "/oauth/revoke": {
      "post": {
        "tags": [
          "IAM API"
        ],
        "summary": "Revoke Token API",
        "description": "Revoke Token API in OAuth2 help you to revoke your access or refresh token.\n",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Basic `base64({client_id}:{client_secret})`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "token",
            "description": "your access or refresh token which is used for revoke.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "token_type_hint",
            "description": "`access_token` or `refresh_token`.\n",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "access_token",
                "refresh_token"
              ]
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "token revocation success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "token revocation error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInvalidResp"
                }
              }
            }
          },
          "401": {
            "description": "token revocation unauthorized error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenUnauthorizedResp"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://id.teko.vn"
          }
        ]
      }
    },
    "/oauth/token": {
      "post": {
        "tags": [
          "IAM API"
        ],
        "summary": "Get Token API",
        "description": "This API is **Token Endpoint** which help you to issue `access_tokens`.\n1. **Authorization Code Grant** flow with following parameters:\n\n  - `grant_type=authorization_code` - This tells the token endpoint that the application is using the Authorization Code grant type.\n  - `code` - The application includes the authorization code it was given in the redirect.\n  - `redirect_uri` - The same redirect URI that was used when requesting the code.\n  - `client_id` - The application’s client ID.\n  - client_secret - The application’s client secret. This ensures that the request to get the access token is made only from the application, and not from a potential attacker that may have intercepted the authorization code.\n\n2. **Implicit Grant** flow. We don't need to call token endpoint.\n\n3. **Password Grant** flow with following parameters:\n\n  - `grant_type=password` - This tells the server we’re using the Password grant type.\n  - `username` - The user’s username that they entered in the application.\n  - `password` - The user’s password that they entered in the application.\n  - `client_id` - The public identifier of the application that the developer obtained during registration.\n  - `client_secret` - (optional) -  If the application is a “confidential client” (not a mobile or JavaScript app), then the secret is included as well.\n  - `scope` - (optional) - If the application is requesting a token with limited scope, it should provide the requested scopes here.\n\n4. **Client Credientials Grant** flow folow with following parameters: \n  - `grant_type=client_credentials` (required) - The grant_type parameter must be set to client_credentials.\n  - `scope` (optional) - Your service can support different scopes for the client credentials grant. In practice, not many services actually support this.\n  - `client_id` (required) - The public identifier of the application that the developer obtained during registration.\n  - `client_secret` (required) - The application’s client secret. This ensures that the request to get the access token is made only from the application.\n\n5. **Refresh Token Grant** flow with following parameters (take `access_token` from `refresh_token`).\n  - `grant_type=refresh_token` - This tells the token endpoint that the application is using the Refresh Token grant type.\n  - `refresh_token` - The application includes the authorization code it was given in the redirect.\n  - `client_id` - The application’s client ID.\n  - `client_secret` (required) - The application’s client secret. This ensures that the request to get the access token is made only from the application.\n",
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "description": "Token flow corresponding",
            "schema": {
              "type": "string",
              "enum": [
                "authorization_code",
                "token",
                "password",
                "client_credentials",
                "refresh_token"
              ]
            },
            "required": true
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "Client ID Information.\n",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "client_secret",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Client Secret Information.\nUsed in `grant_type`:\n  - `authorization_code`\n  - `client_credentials`\n  - `refresh_token`\n"
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Used in `grant_type`: \n  - `authorization_code`.\n\nAuthorization code will be received after calling authorization endpoint.\n"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Used in `grant_type`:\n- `authorization_code`\n- `token`\n\n`redirect_uri` Client registered.\n"
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Used in `grant_type`: `password`.\nUsername Information\n"
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Used in `grant_type`: \n  - `password`.\nPassword of user corresponding.\n"
          },
          {
            "name": "refresh_token",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Used in `grant_type`: \n  - `refresh_token`. \n  \n`refresh_token` is received when exchange `code` in Authorization Flow.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "token object response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthToken"
                }
              }
            }
          },
          "400": {
            "description": "invalid request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "401": {
            "description": "invalid client response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://id.teko.vn"
          }
        ]
      }
    },
    "/orders": {
      "servers": [
        {
          "url": "/command"
        }
      ],
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create New Order",
        "description": "Create new Order (confluence version 100)",
        "requestBody": {
          "description": "Data for create an order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created order information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Status Code của hệ thống",
                      "example": 0
                    },
                    "data": {
                      "$ref": "#/components/schemas/NewCreatedOrderInfo"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed result of 4xx HTTP's status code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "error"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Status Code của hệ thống"
                    },
                    "error": {
                      "type": "object",
                      "description": "Thông tin lỗi cụ thể"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment_methods/cart": {
      "post": {
        "tags": [
          "Methods"
        ],
        "summary": "Get available payment methods for cart. Refer to payment_methods/check api for valid payment methods definition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodCartReq"
              }
            }
          },
          "required": true
        },
        "operationId": "post_payment_method_cart",
        "responses": {
          "200": {
            "description": "Methods response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodCartRes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentError"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://dev-payment.teko.vn/api"
          }
        ]
      }
    },
    "/payment_methods/check": {
      "post": {
        "tags": [
          "Methods"
        ],
        "summary": "Check available payment methods for an order with order items and expected payment methods",
        "description": "This api will check and return all payment methods with detaill description for each method. This help clients check whether an order can pay with a pair of payment method and partner.  There are some rules with these payment methods\n- Client code is existed and checksum is valid\n- The format of inputs must be valid, follow the description\n- Branch_code, service_code, method_code, partner_code must be existed\n- With items in payment methods need to check, a method must be supported by this partner. The `INSTALLMENT_CREDIT` method has some special validations. It check that the partner must support the `POS` method, and the bank is not empty, and this bank must be a payment partner support the `INSTALLMENT_CREDIT` method\n- The service must be supported by this method on the channel\n- The last checks are the rules with price rules, the terminal rules, product rules. They are defined by sellers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodCheckReq"
              }
            }
          },
          "required": true
        },
        "operationId": "post_payment_method_check",
        "responses": {
          "200": {
            "description": "Methods list response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodCheckRes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentError"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://payment.teko.vn"
          }
        ]
      }
    },
    "/payments/alepay/installment": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Get all available payment installments from Alepay",
        "parameters": [
          {
            "name": "client_code",
            "in": "query",
            "description": "Code for client to connect to Payment service. PS provide this code to client before deploying",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "amount",
            "in": "query",
            "description": "From date to query payment transaction. Format yyyymmdd",
            "schema": {
              "type": "number",
              "format": "double",
              "description": "Amount of money need to get info",
              "example": 100000
            },
            "required": true
          },
          {
            "name": "currency_code",
            "in": "query",
            "description": "Currency code, if empty then set default is VND",
            "schema": {
              "type": "string",
              "example": "VND"
            }
          },
          {
            "name": "installment",
            "in": "query",
            "description": "Payment installment (month)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "checksum",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Secret string encrypted by secret key and all parameters for checksum",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstallmentRes"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://dev-payment.teko.vn/api"
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Search/Listing"
        ],
        "summary": "Informations of list products API",
        "description": "API to get all information about products by list skus",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "description": "channel calls to API\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pv_showroom",
                "pv_online",
                "pv_agent",
                "vnshop_online"
              ]
            },
            "example": "pv_showroom"
          },
          {
            "name": "terminal",
            "in": "query",
            "required": true,
            "description": "terminal to identified client\n",
            "schema": {
              "type": "string"
            },
            "example": "CP01"
          },
          {
            "name": "_page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "DISABLE_SIGN",
            "in": "query",
            "description": "key for getting secret product's data",
            "schema": {
              "type": "string"
            },
            "example": "secret"
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of products in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            },
            "example": 10
          },
          {
            "name": "skus",
            "in": "query",
            "description": "list sku, separated by commas",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedSku",
            "in": "query",
            "description": "related sku to get recommend products",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visitorId",
            "in": "query",
            "description": "visitor id from tracking to get personalize recommend products",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "products object response",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "result"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "result code, should different from 00"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "products": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/ListingProductData"
                              },
                              {
                                "$ref": "#/components/schemas/ListingProductDetail"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "product not found response",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 404 error",
                    "value": {
                      "code": "02",
                      "message": "404 Not Found: Product with sku 123123 is not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Search/Listing"
        ],
        "summary": "Products stock update API",
        "description": "API for Warehouse Management System to update stock information list products\n>\nMaximum count of products: 100\n",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "access-token",
            "schema": {
              "type": "string",
              "description": "Mã token để bảo mật api"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "source",
            "schema": {
              "type": "string",
              "description": "Nguồn dữ liệu (wms/srm)"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "SKU of product (example 19030321)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingProductWmsReq"
              },
              "example": [
                {
                  "sku": 18101023,
                  "items": [
                    {
                      "branch": "CP02",
                      "branchName": "KINH DOANH 8",
                      "warehouse": "CP02",
                      "warehouseName": "Kho",
                      "location": 129,
                      "locationName": "Kho a1ng",
                      "storeCode": "B",
                      "productBizType": "Biz",
                      "available": 10,
                      "onHand": 24,
                      "reserved": 14,
                      "timestamp": 1558066889283.962
                    },
                    {
                      "branch": "CP69",
                      "branchName": "KINH DOANH 888",
                      "warehouse": "CP69",
                      "warehouseName": "Kho Trần Đại Nghĩa",
                      "location": 208,
                      "locationName": "Kho a1ng",
                      "storeCode": "B",
                      "productBizType": "NEW",
                      "available": 8,
                      "onHand": 10,
                      "reserved": 2,
                      "timestamp": 1558066889283.962
                    }
                  ]
                },
                {
                  "sku": 18101056,
                  "items": [
                    {
                      "branch": "CP02",
                      "branchName": "KINH DOANH 8",
                      "warehouse": "CP02",
                      "warehouseName": "Kho",
                      "location": 129,
                      "locationName": "Kho a1ng",
                      "storeCode": "B",
                      "productBizType": "Biz",
                      "available": 10,
                      "onHand": 24,
                      "reserved": 14,
                      "timestamp": 1558066889283.962
                    },
                    {
                      "branch": "CP69",
                      "branchName": "KINH DOANH 888",
                      "warehouse": "CP69",
                      "warehouseName": "Kho Trần Đại Nghĩa",
                      "location": 208,
                      "locationName": "Kho a1ng",
                      "storeCode": "B",
                      "productBizType": "NEW",
                      "available": 8,
                      "onHand": 10,
                      "reserved": 2,
                      "timestamp": 1558066889283.962
                    }
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "response for updating warehouse",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "SUCCESS",
                  "message": "Update successfully"
                }
              }
            }
          },
          "400": {
            "description": "error response when invalid data",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "INVALID_INPUT",
                  "message": "onHand property must be number, not string"
                }
              }
            }
          },
          "500": {
            "description": "response when server has error",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "INTERNAL_SERVER",
                  "message": "Connection to elasticsearch has troubles"
                }
              }
            }
          }
        }
      }
    },
    "/products/{sku}": {
      "get": {
        "tags": [
          "Search/Listing"
        ],
        "summary": "Product's detail API",
        "description": "API to get all information about product by sku",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "description": "the SKU of product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "channel want to get product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "terminal",
            "in": "query",
            "description": "terminal want to get product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DISABLE_SIGN",
            "in": "query",
            "description": "key to get private infomation of product",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "product object response",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "result"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "result code, should different from 00"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "product": {
                          "properties": {
                            "bundleProducts": {
                              "type": "array",
                              "description": "danh sách sản phẩm con trong trường hợp sản phẩm là bundle",
                              "items": {
                                "properties": {
                                  "imageUrl": {
                                    "type": "string",
                                    "description": "1 ảnh đại diện của sản phẩm con"
                                  }
                                },
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ListingProductData"
                                  },
                                  {
                                    "$ref": "#/components/schemas/ListingProductDetail"
                                  }
                                ]
                              }
                            }
                          },
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/ListingProductData"
                            },
                            {
                              "$ref": "#/components/schemas/ListingProductDetail"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "product not found response",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 404 error",
                    "value": {
                      "code": "02",
                      "message": "404 Not Found: Product with sku 123123 is not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/srm": {
      "put": {
        "tags": [
          "Search/Listing"
        ],
        "summary": "Products srm data update API",
        "description": "API for Supplier Relationship Management System to update srm data information list products\n>\nMaximum count of products: 100\n",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "access-token",
            "schema": {
              "type": "string",
              "description": "Mã token để bảo mật api"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "source",
            "schema": {
              "type": "string",
              "description": "Nguồn dữ liệu (wms/srm)"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "SKU of product (example 19030321)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingProductSrmReq"
              },
              "example": [
                {
                  "sku": 18101023,
                  "importPrice": 100000,
                  "salePoint": 1,
                  "timestamp": 1558066889283.962,
                  "tax": [
                    {
                      "taxIn": 10,
                      "taxOut": 5,
                      "taxInCode": "10",
                      "taxOutCode": "10"
                    }
                  ]
                },
                {
                  "sku": 18101056,
                  "importPrice": 100000,
                  "salePoint": 1,
                  "timestamp": 1558066889283.962,
                  "tax": [
                    {
                      "taxIn": 20,
                      "taxOut": 5,
                      "taxInCode": "20",
                      "taxOutCode": "10"
                    }
                  ]
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "response for updating warehouse",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "SUCCESS",
                  "message": "Update successfully"
                }
              }
            }
          },
          "400": {
            "description": "error response when invalid data",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "INVALID_INPUT",
                  "message": "taxIn property must be number, not string"
                }
              }
            }
          },
          "500": {
            "description": "response when server has error",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "example": {
                  "code": "INTERNAL_SERVER",
                  "message": "Connection to elasticsearch has troubles"
                }
              }
            }
          }
        }
      }
    },
    "/promotions": {
      "get": {
        "tags": [
          "Promotion API"
        ],
        "summary": "Get Promotion API",
        "description": "Lấy list các chương trình khuyến mãi theo điều kiện filter",
        "operationId": "get-coupon-promotions",
        "parameters": [
          {
            "name": "channel",
            "description": "Kênh bán hàng",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Channel"
            }
          },
          {
            "name": "terminal",
            "in": "query",
            "description": "Địa điểm bán hàng",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coupon",
            "in": "query",
            "description": "Mã giảm giá (required khi type = coupon)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Loại khuyến mãi (theo mã giảm giá hay theo đơn hàng)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "order",
                "coupon"
              ]
            }
          },
          {
            "name": "payment_method",
            "in": "query",
            "description": "Hình thức thanh toán",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grand_total",
            "in": "query",
            "description": "Giá trị đơn hàng",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "Thời điểm bắt đầu theo format yyyy-MM-dd'T'HH:mm:ssZ",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Thời điểm kết thúc theo format yyyy-MM-dd'T'HH:mm:ssZ",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skus",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List các sku trong đơn hàng tách nhau bởi dấu phẩy, để lấy thêm thông tin promotion áp\ndụng cho sản phẩm nào. Nên truyền lên trong trường hợp lấy coupon promotion cho sản phẩm\n",
            "example": "1807447,1807448,1807449"
          }
        ],
        "responses": {
          "200": {
            "description": "Lấy thông tin chương trình khuyến mãi thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionResp"
                }
              }
            }
          },
          "400": {
            "description": "Sai thông tin, mã coupon không tồn tại hoặc đã được sử dụng",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetPromotionError"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/cancel": {
      "put": {
        "summary": "Promotion Cancel API",
        "description": "Hủy đơn hàng và cộng ngân sách",
        "operationId": "promotions/cancel",
        "tags": [
          "Promotion Confirm/Validation API"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "PPM-Authorization",
            "schema": {
              "type": "string",
              "format": "Bearer Token"
            },
            "required": true,
            "description": "Bearer Token được gen bằng jwt, thuật toán RS256, payload phải có exp"
          },
          {
            "in": "header",
            "name": "Source",
            "schema": {
              "type": "string",
              "format": "string"
            },
            "required": true,
            "description": "Client gọi request, hiện đang support 'OM'"
          }
        ],
        "requestBody": {
          "description": "OrderId và OrderCode",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionCancelOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hủy đơn thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionOrderRes"
                }
              }
            }
          },
          "400": {
            "description": "Truyền lên sai tham số",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionCancelError"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/confirm-multi": {
      "post": {
        "summary": "Promotion Confirm Multi API",
        "description": "Xác nhận nhiều đơn hàng cùng lúc và trừ ngân sách",
        "operationId": "promotions/confirm-multi",
        "tags": [
          "Promotion Confirm/Validation API"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "PPM-Authorization",
            "schema": {
              "type": "string",
              "format": "Bearer Token"
            },
            "required": true,
            "description": "Bearer Token được gen bằng jwt, thuật toán RS256, payload phải có exp"
          },
          {
            "in": "header",
            "name": "Source",
            "schema": {
              "type": "string",
              "format": "string"
            },
            "required": true,
            "description": "Client gọi request, hiện đang support 'OM'"
          }
        ],
        "requestBody": {
          "description": "Dữ liệu khuyến mãi của đơn hàng",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionMultiOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Xác nhận đơn, trừ ngân sách thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionConfirmSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Truyền lên sai tham số",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionConfirmError"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/confirm": {
      "post": {
        "summary": "Promotion Confirm API",
        "description": "Xác nhận đơn hàng và trừ ngân sách",
        "operationId": "promotions/confirm",
        "tags": [
          "Promotion Confirm/Validation API"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "PPM-Authorization",
            "schema": {
              "type": "string",
              "format": "Bearer Token"
            },
            "required": true,
            "description": "Bearer Token được gen bằng jwt, thuật toán RS256, payload phải có exp"
          },
          {
            "in": "header",
            "name": "Source",
            "schema": {
              "type": "string",
              "format": "string"
            },
            "required": true,
            "description": "Client gọi request, hiện đang support 'OM'"
          }
        ],
        "requestBody": {
          "description": "Dữ liệu khuyến mãi của đơn hàng",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Xác nhận đơn, trừ ngân sách thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionOrderRes"
                }
              }
            }
          },
          "400": {
            "description": "Truyền lên sai tham số",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionError"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/coupon": {
      "get": {
        "tags": [
          "Promotion Coupon API"
        ],
        "summary": "Get Promotion By Coupons API",
        "description": "Lấy list các chương trình khuyến mãi theo điều kiện filter",
        "operationId": "get-promotions-by-coupon",
        "parameters": [
          {
            "name": "terminal",
            "in": "query",
            "description": "Địa điểm bán hàng",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coupons",
            "in": "query",
            "description": "Danh sách các mã coupon cần check\n",
            "example": "COUPON1,COUPON2",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Loại mã (theo mã giảm giá hay theo phiếu mua hàng)",
            "schema": {
              "type": "string",
              "enum": [
                "gift-code",
                "coupon"
              ]
            }
          },
          {
            "name": "payment_method",
            "in": "query",
            "description": "Hình thức thanh toán",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grand_total",
            "in": "query",
            "description": "Giá trị đơn hàng",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "skus",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "List các sku trong đơn hàng tách nhau bởi dấu phẩy, để lấy thêm thông tin promotion áp\ndụng cho sản phẩm nào. Nên truyền lên trong trường hợp lấy coupon promotion cho sản phẩm\n",
            "example": "1807447,1807448,1807449"
          },
          {
            "name": "apply_on",
            "in": "query",
            "description": "Đơn vị áp dụng",
            "schema": {
              "type": "string",
              "enum": [
                "combo",
                "product",
                "order"
              ]
            }
          },
          {
            "name": "has_product_condition",
            "in": "query",
            "description": "Có điều kiện sản phẩm áp dụng hay không",
            "schema": {
              "type": "boolean",
              "enum": [
                true,
                false
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lấy thông tin chương trình khuyến mãi thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionByCouponResp"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/edit": {
      "put": {
        "summary": "Promotion Edit API",
        "description": "Chỉnh sửa đơn hàng",
        "operationId": "promotions/edit",
        "tags": [
          "Promotion Confirm/Validation API"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "PPM-Authorization",
            "schema": {
              "type": "string",
              "format": "Bearer Token"
            },
            "required": true,
            "description": "Bearer Token được gen bằng jwt, thuật toán RS256, payload phải có exp"
          },
          {
            "in": "header",
            "name": "Source",
            "schema": {
              "type": "string",
              "format": "string"
            },
            "required": true,
            "description": "Client gọi request, hiện đang support 'OM'"
          }
        ],
        "requestBody": {
          "description": "Dữ liệu khuyến mãi của đơn hàng",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chỉnh sửa đơn thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionOrderRes"
                }
              }
            }
          },
          "400": {
            "description": "Truyền lên sai tham số",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionError"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/validate-multi": {
      "post": {
        "summary": "Promotion Validate Multi API",
        "description": "Xác nhận nhiều đơn hàng cùng lúc không trừ ngân sách",
        "operationId": "promotions/validate-multi",
        "tags": [
          "Promotion Confirm/Validation API"
        ],
        "requestBody": {
          "description": "Dữ liệu khuyến mãi của đơn hàng",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionMultiOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Xác nhận đơn, trừ ngân sách thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionConfirmSuccess"
                }
              }
            }
          },
          "400": {
            "description": "Truyền lên sai tham số",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionConfirmError"
                }
              }
            }
          }
        }
      }
    },
    "/promotions/validate": {
      "post": {
        "summary": "Promotion Validate API",
        "description": "Validate đơn hàng nhưng không trừ ngân sách",
        "operationId": "promotions/validate",
        "tags": [
          "Promotion Confirm/Validation API"
        ],
        "requestBody": {
          "description": "Dữ liệu khuyến mãi của đơn hàng",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromotionOrderReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Xác nhận đơn thành công",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionOrderRes"
                }
              }
            }
          },
          "400": {
            "description": "Truyền lên sai tham số",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PromotionError"
                }
              }
            }
          }
        }
      }
    },
    "/provinces": {
      "get": {
        "summary": "Get All Provinces",
        "tags": [
          "Location API"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "provinces": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/area"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get all provinces in Vietnam",
        "operationId": "get_all_provinces"
      }
    },
    "/qrcode/generate": {
      "post": {
        "tags": [
          "Qrcode"
        ],
        "summary": "Generate VNPay Qrcode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QrCodeGenerationReq"
              }
            }
          },
          "required": true
        },
        "operationId": "post_qr_code_generation",
        "responses": {
          "200": {
            "description": "Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QRGenerationRes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentError"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://dev-payment.teko.vn/api"
          }
        ]
      }
    },
    "/query/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order detail",
        "description": "Get Order detail",
        "parameters": [
          {
            "description": "ID of order, format UUID",
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lấy thông tin đơn hàng thành công",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Status code của hệ thống",
                      "example": 0
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrderDetail"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Đơn hàng không tồn tại",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "data"
                  ],
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "Status code của hệ thống",
                      "default": 20
                    },
                    "data": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search_old": {
      "get": {
        "tags": [
          "Search/Listing"
        ],
        "summary": "Search product API",
        "description": "search and return product listing by query",
        "servers": [
          {
            "url": "http://listing.develop.tekoapis.net/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing.stage.tekoapis.net/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing.tekoapis.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "description": "channel calls to API\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pv_showroom",
                "pv_online",
                "pv_agent",
                "vnshop_online"
              ]
            },
            "example": "pv_showroom"
          },
          {
            "name": "terminal",
            "in": "query",
            "required": true,
            "description": "terminal to identified client\n",
            "schema": {
              "type": "string"
            },
            "example": "CP01"
          },
          {
            "name": "q",
            "in": "query",
            "description": "keyword for searching\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "laptop"
          },
          {
            "name": "_page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of products in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            },
            "example": 10
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "description": "Listing conditions for sorting result.\n>\nValues: [`price`, `stock`, `new`, `bestPrice`, `discount`, `discountPercent`, `name`].\n>\n>> Specially, with sorting by stock, if you want to prioritize any branch, add branch code with underscore like **stock_CP01**\n",
            "schema": {
              "type": "string"
            },
            "example": "stock_CP01,price"
          },
          {
            "name": "_order",
            "in": "query",
            "required": false,
            "description": "Values: [`asc`, `desc`]\n",
            "schema": {
              "type": "string"
            },
            "example": "asc,asc"
          },
          {
            "name": "price_gte",
            "in": "query",
            "required": false,
            "description": "filter product has price greater or equal than\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 5000000
          },
          {
            "name": "price_lte",
            "in": "query",
            "required": false,
            "description": "filter product has price less or equal than\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          },
          {
            "name": "flashSale_gte",
            "in": "query",
            "required": false,
            "description": "date start of flashsale (timestamp)\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 1561683600
          },
          {
            "name": "flashSale_lte",
            "in": "query",
            "required": false,
            "description": "date end of flashsale (timestamp)\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 1561701600
          },
          {
            "name": "flashSaleType",
            "in": "query",
            "required": false,
            "description": "code type of flashsale\n",
            "schema": {
              "type": "string"
            },
            "example": "HOT_DEAL"
          },
          {
            "name": "saleStatuses",
            "required": false,
            "in": "query",
            "description": "filter product has selling status in list, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "example": "hang_ban,ngung_kinh_doanh"
          },
          {
            "name": "brands",
            "in": "query",
            "required": false,
            "description": "filter product in list brands, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "ASUS,ACER"
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "description": "filter product in list categories, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "04-N010-02,01-N020-03"
          },
          {
            "name": "displayCategories",
            "in": "query",
            "required": false,
            "description": "filter product in list display categories id, separated by commas\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": [
                1,
                2
              ]
            }
          },
          {
            "name": "campaigns",
            "in": "query",
            "required": false,
            "description": "filter by campaigns id to get products belonged to those campaigns, separated by commas\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": [
                1,
                2
              ]
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "description": "filter product in list tags, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "new,hot,flashsale"
          },
          {
            "name": "attributeSets",
            "in": "query",
            "required": false,
            "description": "filter product by list attribute set, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "123,245"
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "description": "filter product by list product's type, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "product,service"
          },
          {
            "name": "objectives",
            "in": "query",
            "required": false,
            "description": "filter product by list product's objective, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "sale,gift"
          },
          {
            "name": "productLines",
            "in": "query",
            "required": false,
            "description": "filter product by list product lines, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "NGH01,NGH02"
          },
          {
            "name": "saleCategories",
            "in": "query",
            "required": false,
            "description": "filter product by sale category ids, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "715,1056"
          },
          {
            "name": "sellerCategories",
            "in": "query",
            "required": false,
            "description": "filter product by seller categories code\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                1,
                2
              ]
            }
          },
          {
            "name": "publishStatus",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm đã hoặc chưa biên tập xong\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": false
          },
          {
            "name": "hasPromotions",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm có khuyến mại của kênh bán hoặc toàn quốc\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": true
          },
          {
            "name": "isBundle",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm là bundle\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": true
          },
          {
            "name": "responses",
            "in": "query",
            "required": false,
            "description": "Default, response has only data for products. Keywords are empty array.\n>\nIf client needs any data, set value for this parameter, seperated by comma.\n>\nValues: [`products`, `keywords`].\n",
            "schema": {
              "type": "string"
            },
            "example": "products"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "description": "Default, response don't return filters data. Data filters includes: brands, attributeSets, ...\n>\nIf client needs any data, set value for this parameter, seperated by comma.\n>\nValues: [`brands`, `attributeSets`, `attributes`, `sellerCategories`, `displayCategories`].\n",
            "schema": {
              "type": "string"
            },
            "example": "brands,attributeSets"
          },
          {
            "name": "attributes.<attribute_code>",
            "in": "query",
            "required": false,
            "description": "filter product by attribute value, separated by commas\n",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "skus",
            "in": "query",
            "required": false,
            "description": "List product sku, separated by commas\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                11111,
                221231
              ]
            }
          },
          {
            "name": "random",
            "in": "query",
            "required": false,
            "description": "To get random products response\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ],
              "example": "true"
            }
          },
          {
            "name": "bestPrice_lte",
            "in": "query",
            "required": false,
            "description": "filter product has best_price less than or equal\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          },
          {
            "name": "bestPrice_gte",
            "in": "query",
            "required": false,
            "description": "filter product has price greater than or equal\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          }
        ],
        "responses": {
          "200": {
            "description": "response for successful request",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSearchResp"
                }
              }
            }
          },
          "400": {
            "description": "invalid parameters",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 400 error",
                    "value": {
                      "code": "01",
                      "message": "400 Bad Request: Input payload validation failed. Page number, starting from 1 invalid literal for int() with base 10: 'b'"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Search Platform"
        ],
        "summary": "Search product API in Search Platform",
        "description": "search and return product listing by query",
        "servers": [
          {
            "url": "http://search.develop.tekoapis.net/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://search.stage.tekoapis.net/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://search.tekoapis.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "description": "channel calls to API\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pv_showroom",
                "pv_online",
                "pv_agent",
                "vnshop_online"
              ]
            },
            "example": "pv_showroom"
          },
          {
            "name": "terminal",
            "in": "query",
            "required": true,
            "description": "terminal to identified client\n",
            "schema": {
              "type": "string"
            },
            "example": "CP01"
          },
          {
            "name": "q",
            "in": "query",
            "description": "keyword for searching\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "laptop"
          },
          {
            "name": "_page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of products in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            },
            "example": 10
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "description": "Listing conditions for sorting result.\n>\nValues: [`price`, `new`, `bestPrice`, `discount`, `discountPercent`, `name`, `popular`].\n",
            "schema": {
              "type": "string"
            },
            "example": "price,popular"
          },
          {
            "name": "_order",
            "in": "query",
            "required": false,
            "description": "Values: [`asc`, `desc`]\n",
            "schema": {
              "type": "string"
            },
            "example": "asc,asc"
          },
          {
            "name": "price_gte",
            "in": "query",
            "required": false,
            "description": "filter product has price greater or equal than\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 5000000
          },
          {
            "name": "price_lte",
            "in": "query",
            "required": false,
            "description": "filter product has price less or equal than\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          },
          {
            "name": "saleStatuses",
            "required": false,
            "in": "query",
            "description": "filter product has selling status in list, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "example": "hang_ban,ngung_kinh_doanh"
          },
          {
            "name": "saleStatuses_ne",
            "required": false,
            "in": "query",
            "description": "filter product has not selling status in list, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "example": "hang_ban,ngung_kinh_doanh"
          },
          {
            "name": "brands",
            "in": "query",
            "required": false,
            "description": "filter product in list brands, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "ASUS,ACER"
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "description": "filter product in list categories, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "04-N010-02,01-N020-03"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "description": "filter product in list tags, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "new,hot,flashsale"
          },
          {
            "name": "attributeSets",
            "in": "query",
            "required": false,
            "description": "filter product by list attribute set, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "123,245"
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "description": "filter product by list product's type, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "product,service"
          },
          {
            "name": "objectives",
            "in": "query",
            "required": false,
            "description": "filter product by list product's objective, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "sale,gift"
          },
          {
            "name": "productLines",
            "in": "query",
            "required": false,
            "description": "filter product by list product lines, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "NGH01,NGH02"
          },
          {
            "name": "saleCategories",
            "in": "query",
            "required": false,
            "description": "filter product by sale category ids, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "715,1056"
          },
          {
            "name": "sellerCategories",
            "in": "query",
            "required": false,
            "description": "filter product by seller categories code\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              1,
              2
            ]
          },
          {
            "name": "publishStatus",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm đã hoặc chưa biên tập xong\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": false
          },
          {
            "name": "hasPromotions",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm có khuyến mại của kênh bán hoặc toàn quốc\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": true
          },
          {
            "name": "isBundle",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm là bundle\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": true
          },
          {
            "name": "responses",
            "in": "query",
            "required": false,
            "description": "Default, response has only data for products. Keywords are empty array.\n>\nIf client needs any data, set value for this parameter, seperated by comma.\n>\nValues: [`products`, `keywords`].\n",
            "schema": {
              "type": "string"
            },
            "example": "products"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "description": "Default, response don't return filters data. Data filters includes: brands, attributeSets, ...\n>\nIf client needs any data, set value for this parameter, seperated by comma.\n>\nValues: [`brands`, `attributeSets`, `attributes`, `sellerCategories`, `displayCategories`].\n",
            "schema": {
              "type": "string"
            },
            "example": "brands,attributeSets"
          },
          {
            "name": "skus",
            "in": "query",
            "required": false,
            "description": "List product sku, separated by commas\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                11111,
                221231
              ]
            }
          },
          {
            "name": "bestPrice_lte",
            "in": "query",
            "required": false,
            "description": "filter product has best_price less than or equal\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          },
          {
            "name": "bestPrice_gte",
            "in": "query",
            "required": false,
            "description": "filter product has price greater than or equal\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          }
        ],
        "responses": {
          "200": {
            "description": "response for successful request",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSearchResp"
                }
              }
            }
          },
          "400": {
            "description": "invalid parameters",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 400 error",
                    "value": {
                      "code": "01",
                      "message": "400 Bad Request: Input payload validation failed. Page number, starting from 1 invalid literal for int() with base 10: 'b'"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/extra": {
      "get": {
        "tags": [
          "Extra"
        ],
        "summary": "List of all Terminal Type and Platform",
        "description": "List of all Terminal Type and Platform",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "terminalPlatforms": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "terminalTypes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "deliveryMethods": {
                          "type": "object",
                          "properties": {
                            "OLN": {
                              "type": "object",
                              "properties": {
                                "handOver": {
                                  "type": "integer"
                                },
                                "pickupCounter": {
                                  "type": "integer"
                                },
                                "homeDelivery": {
                                  "type": "integer"
                                }
                              }
                            },
                            "AGE": {
                              "type": "object",
                              "properties": {
                                "handOver": {
                                  "type": "integer"
                                },
                                "pickupCounter": {
                                  "type": "integer"
                                },
                                "homeDelivery": {
                                  "type": "integer"
                                }
                              }
                            },
                            "SHR": {
                              "type": "object",
                              "properties": {
                                "handOver": {
                                  "type": "integer"
                                },
                                "pickupCounter": {
                                  "type": "integer"
                                },
                                "homeDelivery": {
                                  "type": "integer"
                                }
                              }
                            },
                            "SCA": {
                              "type": "object",
                              "properties": {
                                "handOver": {
                                  "type": "integer"
                                },
                                "pickupCounter": {
                                  "type": "integer"
                                },
                                "homeDelivery": {
                                  "type": "integer"
                                }
                              }
                            },
                            "TLS": {
                              "type": "object",
                              "properties": {
                                "handOver": {
                                  "type": "integer"
                                },
                                "pickupCounter": {
                                  "type": "integer"
                                },
                                "homeDelivery": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sellers": {
      "get": {
        "tags": [
          "Sellers"
        ],
        "summary": "List of all Sellers API",
        "description": "API to get list of all Sellers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "sellers": {
                          "$ref": "#/components/schemas/sellers"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sellers"
        ],
        "summary": "Create a Seller",
        "description": "API to create a Seller",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/seller_create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sellers/{sellerId}": {
      "get": {
        "tags": [
          "Sellers"
        ],
        "summary": "Detail Seller API",
        "description": "API to get detail of a Seller",
        "parameters": [
          {
            "name": "sellerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "seller": {
                          "$ref": "#/components/schemas/seller"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Seller not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Sellers"
        ],
        "summary": "Update a Seller API",
        "description": "API to update a Seller",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/seller_update"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "sellerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Seller not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sellers/{sellerId}/activate": {
      "patch": {
        "summary": "Activate Seller",
        "tags": [
          "Sellers"
        ],
        "description": "API to change Seller state to active",
        "parameters": [
          {
            "name": "sellerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Seller not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sellers/{sellerId}/deactivate": {
      "patch": {
        "summary": "Deactivate Seller",
        "tags": [
          "Sellers"
        ],
        "description": "API to change Seller state to inactive",
        "parameters": [
          {
            "name": "sellerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Seller not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sellers/{sellerId}/terminals": {
      "get": {
        "tags": [
          "Sellers"
        ],
        "summary": "List of Terminals that Seller can selling on",
        "description": "API to get list of Terminals that Seller can selling on with pagination",
        "parameters": [
          {
            "name": "sellerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page number use to paginate",
            "required": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page size use to paginate",
            "required": false
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "string use to fitler by terminal name or code",
            "required": false
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "`AGE` `OLN` `SHR` `SCA` `TLS` Example: `AGE,OLN,SHR`",
            "required": false
          },
          {
            "name": "platform",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "`APP` `WEB` `IBK` Example: `APP,WEB,IBK`",
            "required": false
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Example: `PVU_SHR_WEB_0009,PVU_SHR_WEB_0009`",
            "required": false
          },
          {
            "name": "sellerID",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Example: `1,2,3`",
            "required": false
          },
          {
            "name": "provinceCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "provinceCode: Ex: `01,02,03`",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "terminals": {
                          "$ref": "#/components/schemas/terminals"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Seller not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sellers/{sellerId}/terminals/get-all": {
      "get": {
        "tags": [
          "Sellers"
        ],
        "summary": "List of all Terminals that Seller can selling on",
        "description": "API to get list of all Terminals that Seller can selling on",
        "parameters": [
          {
            "name": "sellerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "terminals": {
                          "$ref": "#/components/schemas/terminals"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Seller not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals-warehouses": {
      "get": {
        "tags": [
          "Terminals Warehouses Mapping"
        ],
        "summary": "List of all Terminals Warehouse Mapping",
        "description": "API to get list Terminals Warehouse Mapping with pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page number use to paginate",
            "required": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page size use to paginate",
            "required": false
          },
          {
            "name": "terminalQuery",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "string use to fitler by terminal name or code",
            "required": false
          },
          {
            "name": "warehouseQuery",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "string use to fitler by warehouse name or code",
            "required": false
          },
          {
            "name": "provinceCodes",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Terminal provinceCodes: Ex: `01,02,03`",
            "required": false
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "filter if mapping is active",
            "required": false
          },
          {
            "name": "isAll",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "Get all records",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "terminalsWarehouses": {
                          "$ref": "#/components/schemas/terminals_warehouses"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Mapping Terminal-Warehouse",
        "tags": [
          "Terminals Warehouses Mapping"
        ],
        "description": "API to create Mapping Terminals Warehouse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "terminalId",
                  "warehouseCode"
                ],
                "type": "object",
                "properties": {
                  "terminalId": {
                    "type": "integer"
                  },
                  "warehouseCode": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals-warehouses/{terminalWarehouseId}/activate": {
      "patch": {
        "summary": "Activate Terminal-Warehouse Mapping",
        "tags": [
          "Terminals Warehouses Mapping"
        ],
        "description": "API to change Mapping Terminal Warehouse state to active",
        "parameters": [
          {
            "name": "terminalWarehouseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Terminal Warehouse not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals-warehouses/{terminalWarehouseId}/deactivate": {
      "patch": {
        "summary": "Deactivate Terminal-Warehouse Mapping",
        "tags": [
          "Terminals Warehouses Mapping"
        ],
        "description": "API to change Mapping Terminal Warehouse state to inactive",
        "parameters": [
          {
            "name": "terminalWarehouseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Terminal Warehouse not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals": {
      "get": {
        "tags": [
          "Terminals"
        ],
        "summary": "List of all Terminals",
        "description": "API to get list Terminals with pagination",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page number use to paginate",
            "required": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "page size use to paginate",
            "required": false
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "string use to fitler by terminal name or code",
            "required": false
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "`AGE` `OLN` `SHR` `SCA` `TLS` Example: `AGE,OLN,SHR`",
            "required": false
          },
          {
            "name": "platform",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "`APP` `WEB` `IBK` Example: `APP,WEB,IBK`",
            "required": false
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Example: `PVU_SHR_WEB_0009,PVU_SHR_WEB_0009`",
            "required": false
          },
          {
            "name": "sellerID",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Example: `1,2,3`",
            "required": false
          },
          {
            "name": "provinceCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "provinceCode: Ex: `01,02,03`",
            "required": false
          },
          {
            "name": "canMappingWarehouse",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "string use to fitler if terminal is availble for warehouse mapping",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        },
                        "terminals": {
                          "$ref": "#/components/schemas/terminals"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals/{terminalId}": {
      "get": {
        "tags": [
          "Terminals"
        ],
        "summary": "Detail Terminal API",
        "description": "API to get detail of a Terminal",
        "parameters": [
          {
            "name": "terminalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "terminal": {
                          "$ref": "#/components/schemas/terminal"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Terminal not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Terminals"
        ],
        "summary": "Update a Terminal API",
        "description": "API to update a Terminal",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/terminal_update"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "terminalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Terminal not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals/{terminalId}/activate": {
      "patch": {
        "summary": "Activate Terminal",
        "tags": [
          "Terminals"
        ],
        "description": "API to change Terminal state to active",
        "parameters": [
          {
            "name": "terminalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Terminal already active",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Terminal not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals/{terminalId}/deactivate": {
      "patch": {
        "summary": "Deactivate Terminal",
        "tags": [
          "Terminals"
        ],
        "description": "API to change Terminal state to inactive",
        "parameters": [
          {
            "name": "terminalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Terminal not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals/{terminalId}/sellers": {
      "get": {
        "tags": [
          "Terminals"
        ],
        "summary": "List of all Sellers on the Terminal API",
        "description": "API to get all Sellers are selling on the Terminal",
        "parameters": [
          {
            "name": "terminalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "sellers": {
                          "$ref": "#/components/schemas/sellers"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Terminal not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terminals/{terminalId}/warehouses": {
      "get": {
        "tags": [
          "Terminals"
        ],
        "summary": "List of all Warehouses of the Terminal API",
        "description": "API to get all warehouses are mapping with the Terminal",
        "parameters": [
          {
            "name": "terminalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "terminalsWarehouses": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "warehouseName": {
                                "type": "string"
                              },
                              "warehouseCode": {
                                "type": "string"
                              },
                              "warehouseFullAddress": {
                                "type": "string"
                              },
                              "isActive": {
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 1
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Terminal not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/srm_products/": {
      "post": {
        "tags": [
          "SRM Products"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/srm_product_item_req"
        },
        "operationId": "post_srm_product_lists",
        "summary": "Create a product",
        "responses": {
          "200": {
            "description": "Successful Creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/srm_product_success"
                }
              }
            }
          },
          "400": {
            "description": "Category does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/srm_product_error"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/srm_product_error"
                }
              }
            }
          }
        }
      }
    },
    "/srm_products/{id}": {
      "put": {
        "tags": [
          "SRM Products"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/srm_product_item_req"
        },
        "operationId": "put_srm_product_item",
        "summary": "Update a product",
        "responses": {
          "200": {
            "description": "Successful Update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/srm_product_success"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/srm_product_error"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "required": true,
          "in": "path",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "tags": [
          "SRM Products"
        ],
        "operationId": "delete_srm_product_item",
        "summary": "Delete a product",
        "responses": {
          "200": {
            "description": "Successful Delete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/srm_product_success"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/srm_product_error"
                }
              }
            }
          }
        }
      }
    },
    "/stock_out/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stock_out_request_req"
              }
            }
          },
          "required": true
        },
        "operationId": "post_stock_out",
        "tags": [
          "Stock Out"
        ],
        "responses": {
          "200": {
            "description": "Confirm order request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_out_success"
                }
              }
            }
          },
          "403": {
            "description": "Order canceled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_out_error"
                }
              }
            }
          }
        },
        "summary": "Request to pick up product"
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stock_out_confirm_req"
              }
            }
          },
          "required": true
        },
        "operationId": "put_stock_out",
        "tags": [
          "Stock Out"
        ],
        "responses": {
          "200": {
            "description": "Confirm order request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_out_success"
                }
              }
            }
          },
          "403": {
            "description": "Underselling",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_out_error"
                }
              }
            }
          }
        },
        "summary": "Confirm pick up product"
      }
    },
    "/stock_quants/": {
      "get": {
        "parameters": [
          {
            "description": "List sku",
            "name": "products",
            "required": true,
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Regions",
            "name": "regions",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Branches",
            "name": "branches",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Warehouses code",
            "name": "warehouses",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Locations",
            "name": "locations",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "operationId": "get_stock_quants",
        "responses": {
          "200": {
            "description": "Successful Return",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_quant_success"
                }
              }
            }
          }
        },
        "description": ":return: list[StockQuant] - list all stock quants",
        "tags": [
          "Stock Quantities"
        ],
        "summary": "Get list all stock quants"
      }
    },
    "/stock_quants/get_min": {
      "get": {
        "parameters": [
          {
            "description": "List sku",
            "name": "products",
            "required": true,
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Regions",
            "name": "regions",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Branches",
            "name": "branches",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Warehouses code",
            "name": "warehouses",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "Locations",
            "name": "locations",
            "in": "query",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "operationId": "get_stock_quants_min",
        "responses": {
          "200": {
            "description": "Successful Return",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stock_quant_min_success"
                }
              }
            }
          }
        },
        "description": ":return: list[StockQuant] - list all stock quants",
        "tags": [
          "Stock Quantities"
        ],
        "summary": "Get list all stock quants but for minimize properties"
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Filter transaction by transaction's code",
        "parameters": [
          {
            "name": "client_code",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Code for client to connect to Payment service. PS provide this code to client before deploying",
            "required": true
          },
          {
            "name": "ps_transaction_code",
            "in": "query",
            "description": "Code of transaction generated by payment service",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "client_transaction_code",
            "in": "query",
            "description": "Code of transaction generated by client",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "checksum",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Secret string encrypted by secret key and all parameters for checksum",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRes"
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found or other bussiness error with detail code and message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentError"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Save a payment transaction and return the valid payment methods for this transaction. Refer to payment_methods/check api for valid payment methods definition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCreateReq"
              }
            }
          },
          "required": true
        },
        "operationId": "post_transaction",
        "responses": {
          "200": {
            "description": "Save payment sucessfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePaymentRes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentError"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://payment.teko.vn"
          }
        ]
      }
    },
    "/transactions/order": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get all transactions of order",
        "parameters": [
          {
            "name": "client_code",
            "in": "query",
            "description": "Code for client to connect to Payment service. PS provide this code to client before deploying",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "from_date",
            "in": "query",
            "description": "From date to query payment transaction. Format yyyymmdd",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "to_date",
            "in": "query",
            "description": "To date to query payment transaction. Format yyyymmdd",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "order_id",
            "in": "query",
            "description": "Order ID to get payment history",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "checksum",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Secret string encrypted by secret key and all parameters for checksum",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHistoryPaymentRes"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://dev-payment.teko.vn/api"
          }
        ]
      }
    },
    "/transactions/pay": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Make request payment",
        "description": "This api is used for payment methods that connect directly to payment partner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionPayReq"
              }
            }
          },
          "required": true
        },
        "operationId": "post_pay_transaction",
        "responses": {
          "200": {
            "description": "Make request payment sucessfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionPayRes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or bussiness errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentError"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://payment.teko.vn"
          }
        ]
      }
    },
    "/transactions/refund": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Refund a transaction",
        "description": "Make request for refunding a transaction to payment partner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRefundReq"
              }
            }
          },
          "required": true
        },
        "operationId": "post_refund_transaction",
        "responses": {
          "200": {
            "description": "Make request transaction refund sucessfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionRefundRes"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or bussiness errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentError"
                }
              }
            }
          },
          "403": {
            "description": "Forbiden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentForbiddenError"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://payment.teko.vn"
          }
        ]
      }
    },
    "/addresses": {
      "get": {
        "summary": "Get 10 lastest active addresses of an user for a client system",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "`Bearer {access token}`"
          },
          {
            "name": "clientCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Code for client to connect to User service",
            "required": true
          },
          {
            "name": "isDefault",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "pass 1 to get default address",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI000S"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "addresses": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/address"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not pass Authorization or clientCode",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI0001E"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid user ID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI003E"
                    },
                    "message": {
                      "type": "string",
                      "description": "The requested client can not be found"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "1",
        "description": "Get 10 lastest active addresses of user",
        "tags": [
          "Addresses"
        ]
      },
      "post": {
        "summary": "Add new address for a specific user",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "`Bearer {access token}`"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI000S"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/address"
                        }
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not pass Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI0001E"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid user ID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Client not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI003E"
                    },
                    "message": {
                      "type": "string",
                      "description": "The requested client can not be found"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Add new address for an user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addressRequest"
              }
            }
          }
        },
        "tags": [
          "Addresses"
        ]
      }
    },
    "/addresses/{addressUuid}": {
      "get": {
        "summary": "Get an address",
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "`Bearer {access token}`"
          },
          {
            "name": "addressUuid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI000S"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "address": {
                          "$ref": "#/components/schemas/address"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "code": "success",
                      "result": {
                        "address": {
                          "addressId": "15d1e6f2-ab70-41a4-b70a-9561d81e8ce8",
                          "userId": "0f9ad68d489f47f4977185b55856d39",
                          "address": "54 Nguyễn Chí Thanh, Láng Thượng, Đống Đa, Hà Nội",
                          "addressNote": "Tầng 16 tòa nhà Vincom NCT",
                          "isDefault": "false",
                          "email": "linh.dt@teko.vn",
                          "name": "Đỗ Trần Linh",
                          "telephone": "012345667",
                          "longitude": "21.0239309",
                          "latitude": "105.8080925",
                          "provinceCode": "01",
                          "districtCode": "0101",
                          "wardCode": "010101",
                          "clientCode": "vnshop",
                          "provinceName": "Hà Nội",
                          "districtName": "Ba Đình",
                          "wardName": "Phúc Xá"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not pass Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI0001E"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid user ID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI104E"
                    },
                    "message": {
                      "type": "string",
                      "description": "The requested address can not be found"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI106E"
                    },
                    "message": {
                      "type": "string",
                      "description": "The requested address only can change by the owner"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get a address by address id",
        "operationId": "2"
      },
      "patch": {
        "summary": "Update address",
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "`Bearer {access token}`"
          },
          {
            "name": "addressUuid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not pass Authorization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI0001E"
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid user ID"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI104E"
                    },
                    "message": {
                      "type": "string",
                      "description": "The requested address can not be found"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI106E"
                    },
                    "message": {
                      "type": "string",
                      "description": "The requested address only can change by the owner"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addressPatchRequest"
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete an address",
        "tags": [
          "Addresses"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "`Bearer {access token}`"
          },
          {
            "name": "addressUuid",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI104E"
                    },
                    "message": {
                      "type": "string",
                      "description": "The requested address can not be found"
                    }
                  }
                }
              }
            }
          },
          "405": {
            "description": "Delete default address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI105E"
                    },
                    "message": {
                      "type": "string",
                      "description": "The default address can not be delete"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "delete_address",
        "description": "Delete an address"
      }
    },
    "/app_settings": {
      "get": {
        "summary": "Get app settings by user",
        "tags": [
          "App Setting"
        ],
        "operationId": "get_app_settings",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`Bearer {access token}`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "appSettings": {
                          "$ref": "#/components/schemas/appSettings"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create app settings by user",
        "tags": [
          "App Setting"
        ],
        "operationId": "post_app_settings",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "key",
                  "value"
                ],
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "payload"
      }
    },
    "/app_settings/{app_setting_id}": {
      "get": {
        "summary": "Get app settings by id",
        "tags": [
          "App Setting"
        ],
        "parameters": [
          {
            "name": "app_setting_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/appSetting"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update app settings by id",
        "tags": [
          "App Setting"
        ],
        "parameters": [
          {
            "name": "app_setting_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "value"
                ],
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "payload"
      }
    },
    "/auth": {
      "post": {
        "summary": "Decrypt Data and Verify Signature",
        "tags": [
          "Auth"
        ],
        "operationId": "post_auth",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "data",
                  "signature"
                ],
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string"
                  },
                  "signature": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "mobile": {
                          "type": "string",
                          "maxLength": 255
                        },
                        "bankcode": {
                          "type": "string",
                          "maxLength": 255
                        },
                        "token": {
                          "type": "string",
                          "maxLength": 255
                        }
                      }
                    }
                  },
                  "example": {
                    "code": "00",
                    "message": "Success",
                    "result": {
                      "mobile": " 841693488992",
                      "bankcode": "VBA",
                      "token": "CLIENT_VNSHOP_TEST"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "95|97"
                    },
                    "message": {
                      "type": "string",
                      "description": "Incorrect Padding|Chữ ký không hợp lệ"
                    }
                  },
                  "example": {
                    "code": "97",
                    "message": "Chữ ký không hợp lệ"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blue/pre_calculate_point": {
      "post": {
        "summary": "Pre Calculate Point",
        "tags": [
          "Blue"
        ],
        "operationId": "post_calculate_point",
        "parameters": [
          {
            "name": "X-User-Id",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/calculatePointRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "$ref": "#/components/schemas/calculatePointResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blue/temp_point_trans": {
      "get": {
        "summary": "View member point history (Mobile)",
        "tags": [
          "Blue"
        ],
        "operationId": "get_temp_point_trans",
        "parameters": [
          {
            "name": "X-User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionTypeFilter",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "default": "Order"
            }
          },
          {
            "name": "merchantIdFilter",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "fromDateFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDateFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderCodeFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCodeFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/tempPointTransResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blue/token_trans": {
      "get": {
        "summary": "View token trans",
        "tags": [
          "Blue"
        ],
        "operationId": "get_token_trans",
        "parameters": [
          {
            "name": "X-User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchantIdFilter",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "fromDateFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDateFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionCodeFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "actionTypeFilter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/tokenTransResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blue/viewpoint": {
      "get": {
        "summary": "View Point",
        "tags": [
          "Blue"
        ],
        "operationId": "get_point",
        "parameters": [
          {
            "name": "X-User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "items": {
                          "$ref": "#/components/schemas/viewPointResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "summary": "Get 1 active profile",
        "tags": [
          "Profiles"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "profiles": {
                          "$ref": "#/components/schemas/profile"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get_profiles",
        "description": "Get 1 active profile of an user per client system",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "clientCode",
            "required": true,
            "description": "Code for client to connect to User service"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "`Bearer {access token}`"
          }
        ]
      },
      "patch": {
        "tags": [
          "Profiles"
        ],
        "summary": "Update user profile",
        "operationId": "update_user_profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/profilePatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "clientCode",
            "required": true,
            "description": "Code for client to connect to User service"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "`Bearer {access token}`"
          }
        ]
      }
    },
    "/ratings": {
      "get": {
        "summary": "Get ratings",
        "tags": [
          "Ratings"
        ],
        "operationId": "get_ratings",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productSku",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sellerId",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Sort field",
            "schema": {
              "type": "string",
              "default": "updated_at"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "default": "descend"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "ratings": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ratingResponse"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create rating",
        "tags": [
          "Ratings"
        ],
        "operationId": "post_ratings",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "clientCode",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rating"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "rating": {
                          "$ref": "#/components/schemas/ratingResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ratings/{rating_id}": {
      "get": {
        "summary": "Get rating by Id",
        "tags": [
          "Ratings"
        ],
        "operationId": "get_rating",
        "parameters": [
          {
            "name": "rating_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "rating": {
                          "$ref": "#/components/schemas/ratingResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/saved_carts": {
      "get": {
        "summary": "Get saved cart by user",
        "tags": [
          "Saved Cart"
        ],
        "operationId": "get_saved_carts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`Bearer {access token}`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "savedCarts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/savedCartProductRes"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "create or update saved cart for user",
        "tags": [
          "Saved Cart"
        ],
        "operationId": "post_saved_carts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "products": {
                    "type": "array",
                    "items": {
                      "required": [
                        "productSku",
                        "quantity",
                        "sellerId"
                      ],
                      "type": "object",
                      "properties": {
                        "isSelected": {
                          "type": "boolean",
                          "example": true
                        },
                        "productSku": {
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "sellerId": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete saved cart by user",
        "tags": [
          "Saved Cart"
        ],
        "operationId": "delete_saved_carts",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/saved_carts/{saved_cart_id}": {
      "put": {
        "summary": "Update saved cart item",
        "tags": [
          "Saved Cart"
        ],
        "operationId": "put_saved_cart",
        "parameters": [
          {
            "name": "saved_cart_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/savedCartUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "savedCart": {
                          "$ref": "#/components/schemas/savedCartProduct"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "payload"
      }
    },
    "/wish_list/{wish_list_id}": {
      "delete": {
        "summary": "Remove product from wish list",
        "tags": [
          "Wish List"
        ],
        "operationId": "delete_products",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "`Bearer {access token}`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wish_list_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "USI000S"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wish_lists": {
      "get": {
        "summary": "Get wish list by user",
        "tags": [
          "Wish List"
        ],
        "operationId": "get_wish_lists",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "`Bearer {access token}`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "wishLists": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/wishListProduct"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "create and update wish list for user",
        "tags": [
          "Wish List"
        ],
        "operationId": "post_wish_lists",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "products": {
                    "type": "array",
                    "items": {
                      "required": [
                        "productSku",
                        "sellerId"
                      ],
                      "type": "object",
                      "properties": {
                        "productSku": {
                          "type": "string"
                        },
                        "sellerId": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add product to wish list",
        "tags": [
          "Wish List"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "productSku",
                  "sellerId"
                ],
                "type": "object",
                "properties": {
                  "productSku": {
                    "type": "string"
                  },
                  "sellerId": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete all wish list item by user",
        "tags": [
          "Wish List"
        ],
        "operationId": "delete_wish_lists",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skus",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/userinfo": {
      "get": {
        "tags": [
          "IAM API"
        ],
        "summary": "User Info API",
        "description": "Get current user's general information.\nReturn object which includes current user's information.\n- With `openid` scope, id_token will return with fields: sub, name, picture, updated_at.\n- With addition `profile` scope, id_token will return with addition fields: email, phone_number, birthday, address.\n- With addition `read:permissions` scope, id_token will return with addition fields: roles, permissions, meta_data.\n",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "User's `Bearer {access_token}`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Info Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v2/keywords": {
      "get": {
        "tags": [
          "Version 2"
        ],
        "summary": "Informations of keyword recommenders API",
        "description": "API to get keyword recommenders based on visitorId and user's input",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "description": "channel calls to API\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pv_showroom",
                "pv_online",
                "pv_agent",
                "vnshop_online"
              ]
            },
            "example": "pv_showroom"
          },
          {
            "name": "terminal",
            "in": "query",
            "required": false,
            "description": "terminal to identified client\n",
            "schema": {
              "type": "string"
            },
            "example": "CP01"
          },
          {
            "name": "visitorId",
            "in": "query",
            "description": "visitor id from tracking to get personalized recommended keyword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "user's input to get keyword recommenders\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "laptop"
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of keyword recommenders in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            },
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "products object response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "result"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "result code, should different from 00"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "keywords": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/ListingKeywordRecommenderData"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/products": {
      "get": {
        "tags": [
          "Version 2"
        ],
        "summary": "Informations of list products API",
        "description": "API to get all information about products by list skus",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "description": "channel calls to API\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pv_showroom",
                "pv_online",
                "pv_agent",
                "vnshop_online"
              ]
            },
            "example": "pv_showroom"
          },
          {
            "name": "terminal",
            "in": "query",
            "required": true,
            "description": "terminal to identified client\n",
            "schema": {
              "type": "string"
            },
            "example": "CP01"
          },
          {
            "name": "_page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "DISABLE_SIGN",
            "in": "query",
            "description": "key for getting secret product's data",
            "schema": {
              "type": "string"
            },
            "example": "secret"
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of products in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            },
            "example": 10
          },
          {
            "name": "skus",
            "in": "query",
            "description": "list sku, separated by commas",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relatedSku",
            "in": "query",
            "description": "related sku to get recommend products",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visitorId",
            "in": "query",
            "description": "visitor id from tracking to get personalize recommend products",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "products object response",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "result"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "result code, should different from 00"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "products": {
                          "type": "array",
                          "items": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/ListingProductData"
                              },
                              {
                                "$ref": "#/components/schemas/ListingProductDetail"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "product not found response",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 404 error",
                    "value": {
                      "code": "02",
                      "message": "404 Not Found: Product with sku 123123 is not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/products/{sku}": {
      "get": {
        "tags": [
          "Version 2"
        ],
        "summary": "Product's detail API version 2",
        "description": "API to get all information about product by sku",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "description": "the SKU of product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "terminal",
            "in": "query",
            "description": "terminal want to get product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DISABLE_SIGN",
            "in": "query",
            "description": "key to get private infomation of product",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "product object response",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "result"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "result code, should different from 00"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "product": {
                          "properties": {
                            "bundleProducts": {
                              "type": "array",
                              "description": "danh sách sản phẩm con trong trường hợp sản phẩm là bundle",
                              "items": {
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/ListingProductData"
                                  },
                                  {
                                    "$ref": "#/components/schemas/ListingProductDetail"
                                  }
                                ]
                              }
                            }
                          },
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/ListingProductData"
                            },
                            {
                              "$ref": "#/components/schemas/ListingProductDetail"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "product not found response",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 404 error",
                    "value": {
                      "code": "02",
                      "message": "404 Not Found: Product with sku 123123 is not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/search": {
      "get": {
        "tags": [
          "Version 2"
        ],
        "summary": "Search product API version 2",
        "description": "search and return product listing by query",
        "servers": [
          {
            "url": "http://listing.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          },
          {
            "url": "http://listing-dev.teko.com/{basePath}",
            "variables": {
              "basePath": {
                "default": "api"
              }
            }
          }
        ],
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "description": "channel calls to API\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "pv_showroom",
                "pv_online",
                "pv_agent",
                "vnshop_online"
              ]
            },
            "example": "pv_showroom"
          },
          {
            "name": "terminal",
            "in": "query",
            "required": true,
            "description": "terminal to identified client\n",
            "schema": {
              "type": "string"
            },
            "example": "CP01"
          },
          {
            "name": "q",
            "in": "query",
            "description": "keyword for searching\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "laptop"
          },
          {
            "name": "_page",
            "in": "query",
            "description": "page number\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "example": 1
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "maximum number of products in response\n",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            },
            "example": 10
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "description": "Listing conditions for sorting result.\n>\nValues: [`price`, `stock`, `new`, `bestPrice`, `discount`, `discountPercent`, `name`].\n>\n>> Specially, with sorting by stock, if you want to prioritize any branch, add branch code with underscore like **stock_CP01**\n",
            "schema": {
              "type": "string"
            },
            "example": "stock_CP01,price"
          },
          {
            "name": "_order",
            "in": "query",
            "required": false,
            "description": "Values: [`asc`, `desc`]\n",
            "schema": {
              "type": "string"
            },
            "example": "asc,asc"
          },
          {
            "name": "price_gte",
            "in": "query",
            "required": false,
            "description": "filter product has price greater or equal than\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 5000000
          },
          {
            "name": "price_lte",
            "in": "query",
            "required": false,
            "description": "filter product has price less or equal than\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          },
          {
            "name": "flashSale_gte",
            "in": "query",
            "required": false,
            "description": "date start of flashsale (timestamp)\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 1561683600
          },
          {
            "name": "flashSale_lte",
            "in": "query",
            "required": false,
            "description": "date end of flashsale (timestamp)\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 1561701600
          },
          {
            "name": "flashSaleType",
            "in": "query",
            "required": false,
            "description": "code type of flashsale\n",
            "schema": {
              "type": "string"
            },
            "example": "HOT_DEAL"
          },
          {
            "name": "saleStatuses",
            "required": false,
            "in": "query",
            "description": "filter product has selling status in list, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "example": "hang_ban,ngung_kinh_doanh"
          },
          {
            "name": "brands",
            "in": "query",
            "required": false,
            "description": "filter product in list brands, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "ASUS,ACER"
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "description": "filter product in list categories, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "04-N010-02,01-N020-03"
          },
          {
            "name": "displayCategories",
            "in": "query",
            "required": false,
            "description": "filter product in list display categories id, separated by commas\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": [
                1,
                2
              ]
            }
          },
          {
            "name": "campaigns",
            "in": "query",
            "required": false,
            "description": "filter by campaigns id to get products belonged to those campaigns, separated by commas\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              },
              "example": [
                1,
                2
              ]
            }
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "description": "filter product in list tags, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "new,hot,flashsale"
          },
          {
            "name": "attributeSets",
            "in": "query",
            "required": false,
            "description": "filter product by list attribute set, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "123,245"
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "description": "filter product by list product's type, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "product,service"
          },
          {
            "name": "objectives",
            "in": "query",
            "required": false,
            "description": "filter product by list product's objective, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "sale,gift"
          },
          {
            "name": "productLines",
            "in": "query",
            "required": false,
            "description": "filter product by list product lines, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "NGH01,NGH02"
          },
          {
            "name": "saleCategories",
            "in": "query",
            "required": false,
            "description": "filter product by sale category ids, separated by commas\n",
            "schema": {
              "type": "string"
            },
            "example": "715,1056"
          },
          {
            "name": "sellerCategories",
            "in": "query",
            "required": false,
            "description": "filter product by seller categories code\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                1,
                2
              ]
            }
          },
          {
            "name": "publishStatus",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm đã hoặc chưa biên tập xong\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": false
          },
          {
            "name": "hasPromotions",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm có khuyến mại của kênh bán hoặc toàn quốc\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": true
          },
          {
            "name": "isBundle",
            "in": "query",
            "required": false,
            "description": "Lọc các sản phẩm là bundle\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            },
            "example": true
          },
          {
            "name": "responses",
            "in": "query",
            "required": false,
            "description": "Default, response has only data for products. Keywords are empty array.\n>\nIf client needs any data, set value for this parameter, seperated by comma.\n>\nValues: [`products`, `keywords`].\n",
            "schema": {
              "type": "string"
            },
            "example": "products"
          },
          {
            "name": "filters",
            "in": "query",
            "required": false,
            "description": "Default, response don't return filters data. Data filters includes: brands, attributeSets, ...\n>\nIf client needs any data, set value for this parameter, seperated by comma.\n>\nValues: [`brands`, `attributeSets`, `attributes`, `sellerCategories`, `displayCategories`].\n",
            "schema": {
              "type": "string"
            },
            "example": "brands,attributeSets"
          },
          {
            "name": "attributes.<attribute_code>",
            "in": "query",
            "required": false,
            "description": "filter product by attribute value, separated by commas\n",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          {
            "name": "skus",
            "in": "query",
            "required": false,
            "description": "List product sku, separated by commas\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                11111,
                221231
              ]
            }
          },
          {
            "name": "random",
            "in": "query",
            "required": false,
            "description": "To get random products response\n",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ],
              "example": "true"
            }
          },
          {
            "name": "bestPrice_lte",
            "in": "query",
            "required": false,
            "description": "filter product has best_price less than or equal\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          },
          {
            "name": "bestPrice_gte",
            "in": "query",
            "required": false,
            "description": "filter product has price greater than or equal\n",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "example": 10000000
          }
        ],
        "responses": {
          "200": {
            "description": "response for successful request",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingSearchResp"
                }
              }
            }
          },
          "400": {
            "description": "invalid parameters",
            "headers": {
              "requestId": {
                "schema": {
                  "type": "string"
                },
                "description": "uuid request for tracking"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingError"
                },
                "examples": {
                  "error": {
                    "summary": "An example of 400 error",
                    "value": {
                      "code": "01",
                      "message": "400 Bad Request: Input payload validation failed. Page number, starting from 1 invalid literal for int() with base 10: 'b'"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wards": {
      "get": {
        "summary": "Get Wards by District Code",
        "tags": [
          "Location API"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "wards": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/area"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "districtCode",
            "required": true
          }
        ]
      }
    },
    "/warehouses/": {
      "get": {
        "description": ":return: list[Warehouse]",
        "operationId": "get_warehouses",
        "tags": [
          "Warehouses"
        ],
        "responses": {
          "200": {
            "description": "Successful Return",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse_success"
                }
              }
            }
          }
        },
        "summary": "Get list all warehouses"
      }
    }
  },
  "components": {
    "schemas": {
      "branch_success": {
        "properties": {
          "message": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/branch"
            }
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "branch": {
        "required": [
          "code",
          "name"
        ],
        "properties": {
          "name": {
            "description": "branch name",
            "type": "string"
          },
          "code": {
            "description": "branch code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "account_patch_request": {
        "title": "accountUpdateRequest",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "maxLength": 255
          },
          "isActive": {
            "type": "boolean"
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 255
                },
                "telephone": {
                  "type": "string",
                  "pattern": "^0[0-9]{8,10}$"
                },
                "email": {
                  "type": "string",
                  "maxLength": 255,
                  "pattern": "^[a-z][a-z0-9_\\.]{2,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,}){1,2}$"
                },
                "address": {
                  "type": "string",
                  "maxLength": 255
                },
                "provinceCode": {
                  "type": "string",
                  "maxLength": 255
                },
                "districtCode": {
                  "type": "string",
                  "maxLength": 255
                },
                "wardCode": {
                  "type": "string",
                  "maxLength": 255
                },
                "dateOfBirth": {
                  "type": "string",
                  "format": "date",
                  "example": "1997-01-27"
                },
                "identityCard": {
                  "type": "string",
                  "maxLength": 255
                },
                "gender": {
                  "type": "string",
                  "enum": [
                    "M",
                    "F",
                    "O"
                  ]
                }
              },
              "required": [
                "name",
                "telephone"
              ]
            }
          }
        }
      },
      "account_post_request": {
        "title": "accountCreateRequest",
        "type": "object",
        "properties": {
          "iamId": {
            "type": "integer"
          },
          "sellerId": {
            "type": "integer"
          },
          "roleId": {
            "type": "string"
          },
          "refId": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "maxLength": 255
          },
          "address": {
            "type": "string",
            "maxLength": 255
          },
          "taxCode": {
            "type": "string",
            "maxLength": 255
          },
          "telephone": {
            "type": "string",
            "maxLength": 255
          },
          "isActive": {
            "type": "boolean"
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 255
                },
                "telephone": {
                  "type": "string",
                  "pattern": "^0[0-9]{8,10}$"
                },
                "email": {
                  "type": "string",
                  "maxLength": 255,
                  "pattern": "^[a-z][a-z0-9_\\.]{2,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,}){1,2}$"
                },
                "address": {
                  "type": "string",
                  "maxLength": 255
                },
                "provinceCode": {
                  "type": "string",
                  "maxLength": 255
                },
                "districtCode": {
                  "type": "string",
                  "maxLength": 255
                },
                "wardCode": {
                  "type": "string",
                  "maxLength": 255
                },
                "dateOfBirth": {
                  "type": "string",
                  "format": "date",
                  "example": "1997-01-27"
                },
                "identityCard": {
                  "type": "string",
                  "maxLength": 255
                },
                "gender": {
                  "type": "string",
                  "enum": [
                    "M",
                    "F",
                    "O"
                  ]
                }
              },
              "required": [
                "name",
                "telephone"
              ]
            }
          }
        },
        "required": [
          "sellerId",
          "roleId"
        ]
      },
      "account": {
        "title": "Account",
        "type": "object",
        "description": "Detail of an Account",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "integer"
          },
          "roleId": {
            "type": "string"
          },
          "sellerId": {
            "type": "string"
          },
          "refId": {
            "type": "string"
          },
          "iamId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "taxCode": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "isCompany": {
            "type": "boolean"
          },
          "telephone": {
            "type": "string"
          },
          "accountLookupId": {
            "type": "integer"
          },
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "telephone": {
                  "type": "string",
                  "pattern": "^0[0-9]{8,10}$"
                },
                "email": {
                  "type": "string",
                  "pattern": "^[a-z][a-z0-9_\\.]{2,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,}){1,2}$"
                },
                "address": {
                  "type": "string"
                },
                "provinceCode": {
                  "type": "string"
                },
                "districtCode": {
                  "type": "string"
                },
                "wardCode": {
                  "type": "string"
                },
                "dateOfBirth": {
                  "type": "string",
                  "format": "date",
                  "example": "29-01-1997"
                },
                "identityCard": {
                  "type": "string"
                },
                "gender": {
                  "type": "string",
                  "enum": [
                    "M",
                    "F",
                    "O"
                  ]
                }
              }
            }
          }
        }
      },
      "DiscountByPercentage": {
        "required": [
          "percent"
        ],
        "properties": {
          "percent": {
            "type": "integer",
            "example": 8
          },
          "maxValue": {
            "type": "integer",
            "format": "int64",
            "example": 5000000
          }
        }
      },
      "DiscountByValue": {
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64",
            "example": 1000000
          }
        }
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "error code, should different from 00",
            "example": 1
          },
          "message": {
            "type": "string",
            "description": "error message",
            "example": "voucher not found!"
          }
        }
      },
      "eton_po_req": {
        "properties": {
          "items": {
            "items": {
              "description": "List of product information to be processed",
              "allOf": [
                {
                  "$ref": "#/components/schemas/eton_product"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "eton_product": {
        "required": [
          "qty",
          "serials",
          "sku"
        ],
        "properties": {
          "serials": {
            "description": "Serial list",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "qty": {
            "description": "Quantity",
            "type": "integer"
          },
          "sku": {
            "description": "Product code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "eton_so_req": {
        "properties": {
          "eventType": {
            "description": "update SO by type",
            "enum": [
              "picked",
              "packed",
              "delivered"
            ],
            "example": "picked",
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "description": "List of product information to be processed",
              "allOf": [
                {
                  "$ref": "#/components/schemas/eton_product"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "eton_so_returned_req": {
        "properties": {
          "items": {
            "items": {
              "description": "List of product information to be processed",
              "allOf": [
                {
                  "$ref": "#/components/schemas/eton_product"
                }
              ]
            },
            "type": "array"
          },
          "type": {
            "description": "Return type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "eton_success_res": {
        "properties": {
          "message": {
            "type": "string"
          },
          "result": {
            "type": "object"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "ListingBrandData": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "id của thương hiệu",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "tên của thương hiệu",
            "example": "B1"
          },
          "code": {
            "type": "string",
            "description": "code của thương hiệu",
            "example": "57D79A3A1581"
          },
          "imageURL": {
            "type": "string",
            "description": "1 ảnh đại diện của thương hiệu"
          }
        }
      },
      "ListingBrandResp": {
        "required": [
          "code",
          "result"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Mã kết quả",
            "example": "00"
          },
          "result": {
            "type": "object",
            "description": "khối dữ liệu kết quả",
            "properties": {
              "brands": {
                "type": "array",
                "description": "khối kết quả thương hiệu",
                "items": {
                  "$ref": "#/components/schemas/ListingBrandData"
                }
              }
            }
          }
        }
      },
      "ListingDisplayCategoryData": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "id của danh mục hiển thị",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "tên của danh mục hiển thị",
            "example": "Đồ chơi, mẹ và bé"
          },
          "sellerCategories": {
            "type": "array",
            "description": "danh sách master category tương ứng",
            "items": {
              "type": "integer",
              "description": "id của master category"
            },
            "example": [
              1,
              2
            ]
          },
          "level": {
            "type": "integer",
            "description": "level của danh mục hiển thị",
            "example": 1
          },
          "icon": {
            "type": "string",
            "description": "ảnh của danh mục hiển thị",
            "example": "mm300_ext_01"
          }
        }
      },
      "ListingDisplayCategoryResp": {
        "required": [
          "code",
          "result"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Mã kết quả",
            "example": "00"
          },
          "result": {
            "type": "object",
            "description": "khối dữ liệu kết quả",
            "properties": {
              "displayCategories": {
                "type": "array",
                "description": "khối kết quả danh mục hiển thị",
                "items": {
                  "$ref": "#/components/schemas/ListingDisplayCategoryData"
                }
              }
            }
          }
        }
      },
      "ListingAttributeFilterData": {
        "required": [
          "code",
          "name",
          "values"
        ],
        "properties": {
          "total": {
            "type": "integer",
            "description": "tổng số sản phẩm có thuộc tình này"
          },
          "code": {
            "type": "string",
            "description": "mã thuộc tính"
          },
          "name": {
            "type": "string",
            "description": "tên thuộc tính"
          },
          "values": {
            "type": "array",
            "description": "danh sách các giá trị của thuộc tính được filter",
            "items": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "số lượng sản phẩm có giá trị bằng với option"
                },
                "option": {
                  "type": "integer",
                  "description": "id lựa chọn"
                },
                "value": {
                  "type": "string",
                  "description": "tên hiển thị cho giá trị"
                }
              }
            }
          }
        }
      },
      "ListingError": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "mã kết quả"
          },
          "message": {
            "type": "string",
            "description": "tin nhắn thông báo"
          }
        }
      },
      "ListingKeywordData": {
        "required": [
          "query",
          "highlight"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "từ khóa liên quan với keyword của người dùng"
          },
          "highlight": {
            "type": "string",
            "description": "từ khóa đã được nổi bật (dùng thẻ `<em></em>`)"
          },
          "brands": {
            "type": "array",
            "description": "danh sách thương hiệu nổi bật đi kèm với từ khóa",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "type": "array",
            "description": "danh sách danh mục nổi bật có các sản phẩm chứa từ khóa",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ListingKeywordRecommenderData": {
        "required": [
          "query",
          "highlight",
          "displayCategory"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "từ khóa liên quan với input của người dùng"
          },
          "highlight": {
            "type": "string",
            "description": "từ khóa đã được nổi bật (dùng thẻ `<em></em>`)"
          },
          "displayCategory": {
            "type": "object",
            "description": "Khối thông tin về display category của từ khóa (nếu có). Nếu không có khối thông tin này, giá trị của object sẽ bằng null.",
            "properties": {
              "id": {
                "type": "number",
                "description": "Id của display category."
              },
              "name": {
                "type": "string",
                "description": "Tên của display category."
              }
            }
          }
        }
      },
      "ListingProductData": {
        "properties": {
          "sku": {
            "type": "string",
            "description": "sku của sản phẩm",
            "example": 1810912
          },
          "name": {
            "type": "string",
            "description": "tên sản phẩm",
            "example": "Máy tính xách tay/ Laptop Asus A510UF-EJ587T (i5-8250U)"
          },
          "displayName": {
            "type": "string",
            "description": "tên hiển thị của sản phẩm",
            "example": "Laptop ASUS VivoBook A510UF-EJ587T (15.6\"/i5-8250U 1.6 GHz - 3.4 GHz/4GB RAM/1TB HDD/NVIDIA GeForce MX130 2GB/Windows 10 Home SL 64-bit/1.7kg)"
          },
          "url": {
            "type": "string",
            "description": "url sản phẩm",
            "example": "https://phongvu.vn/may-tinh-xach-tay-laptop-asus-a510uf-ej587t-i5-8250u-vang-p35635.html"
          },
          "brand": {
            "type": "object",
            "nullable": true,
            "description": "khối thông tin thương hiệu sản phẩm",
            "properties": {
              "code": {
                "type": "string",
                "description": "mã thương hiệu",
                "example": "Asus"
              },
              "name": {
                "type": "string",
                "description": "tên thương hiệu",
                "example": "ASUS"
              }
            }
          },
          "color": {
            "type": "object",
            "nullable": true,
            "description": "khối dữ liệu màu sắc",
            "properties": {
              "code": {
                "type": "string",
                "description": "mã màu",
                "example": "BLK"
              },
              "name": {
                "type": "string",
                "description": "tên màu",
                "example": "Đen"
              }
            }
          },
          "attributeSet": {
            "type": "object",
            "nullable": true,
            "description": "khối dữ liệu nhóm thuộc tính sản phẩm",
            "properties": {
              "id": {
                "type": "string",
                "description": "id nhóm thuộc tính",
                "example": 61
              },
              "name": {
                "type": "string",
                "description": "tên nhóm thuộc tính",
                "example": "Linh phụ kiện Laptop"
              }
            }
          },
          "productLine": {
            "type": "object",
            "nullable": true,
            "description": "khối dữ liệu ngành hàng",
            "properties": {
              "code": {
                "type": "string",
                "description": "mã ngành hàng",
                "example": "NGH01"
              },
              "name": {
                "type": "string",
                "description": "tên ngành hàng",
                "example": "Laptop / Apple"
              }
            }
          },
          "status": {
            "type": "object",
            "nullable": true,
            "description": "khối trạng thái sản phẩm",
            "properties": {
              "sale": {
                "type": "string",
                "description": "trạng thái bán hàng",
                "example": "hang_ban"
              },
              "publish": {
                "type": "boolean",
                "description": "trạng thái kiểm duyệt sản phẩm",
                "example": true
              }
            }
          },
          "prices": {
            "type": "object",
            "nullable": true,
            "description": "khối giá gốc",
            "properties": {
              "supplierSalePrice": {
                "type": "number",
                "format": "double",
                "description": "giá niêm yết với nhà cung cấp",
                "example": 5000000
              },
              "sellPrice": {
                "type": "number",
                "format": "double",
                "description": "giá bán",
                "example": 4700000
              }
            }
          },
          "promotionPrices": {
            "type": "array",
            "description": "khối giá khuyến mại",
            "items": {
              "type": "object",
              "properties": {
                "channel": {
                  "type": "string",
                  "description": "kênh bán hàng"
                },
                "terminal": {
                  "type": "string",
                  "nullable": true,
                  "description": "điểm bán hàng của kênh bán"
                },
                "promotionPrice": {
                  "type": "number",
                  "format": "double",
                  "description": "giá khuyến mại của sản phẩm"
                },
                "flashSalePrice": {
                  "type": "number",
                  "format": "double",
                  "nullable": true,
                  "description": "giá flash sale nếu sản phẩm chạy chương trình Flashsale"
                },
                "finalPrice": {
                  "type": "number",
                  "format": "double",
                  "description": "giá bán cuối cùng"
                },
                "bestPrice": {
                  "type": "number",
                  "format": "double",
                  "description": "giá tốt nhất sau khi áp dụng khuyến mại mặc định"
                }
              }
            },
            "example": [
              {
                "channel": "online",
                "terminal": null,
                "promotionPrice": 4600000,
                "flashSalePrice": null,
                "finalPrice": 4600000
              },
              {
                "channel": "offline",
                "terminal": "CP04",
                "promotionPrice": 4600000,
                "flashSalePrice": 4500000,
                "finalPrice": 4500000
              }
            ]
          },
          "images": {
            "type": "array",
            "default": [],
            "description": "danh sách ảnh của sản phẩm",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "đường dẫn ảnh",
                  "example": "https://phongvu.vn/media/catalog/product/cache/23/small_image/60x60/9df78eab33525d08d6e5fb8d27136e95//d/e/dell_vostro_5568_1.jpg"
                },
                "priority": {
                  "type": "integer",
                  "description": "thứ tự hiển thị",
                  "example": 1
                }
              }
            }
          },
          "tags": {
            "type": "array",
            "default": [],
            "description": "danh sách các tag sản phẩm được gắn",
            "items": {
              "type": "string"
            },
            "example": [
              "tag_1",
              "tag_2"
            ]
          },
          "stocks": {
            "type": "array",
            "default": [],
            "description": "khối dữ liệu tồn kho",
            "items": {
              "type": "object",
              "properties": {
                "branch": {
                  "type": "string",
                  "description": "Mã chi nhánh",
                  "example": "CP02"
                },
                "branchName": {
                  "type": "string",
                  "description": "Tên chi nhánh",
                  "example": "KINH DOANH 8"
                },
                "warehouse": {
                  "type": "string",
                  "description": "Mã kho",
                  "example": "CP02"
                },
                "warehouseName": {
                  "type": "string",
                  "description": "Tên kho",
                  "example": "Kho"
                },
                "location": {
                  "type": "string",
                  "description": "Mã code khu vực chứa hàng",
                  "example": "0201"
                },
                "locationName": {
                  "type": "string",
                  "description": "Tên khu vực chứa hàng",
                  "example": "Kho a1ng"
                },
                "storeCode": {
                  "type": "string",
                  "description": "Loại kho",
                  "example": "B"
                },
                "productBizType": {
                  "type": "string",
                  "description": "Loại hình kinh doanh sản phẩm",
                  "example": "Biz"
                },
                "available": {
                  "type": "integer",
                  "description": "Số lượng tồn kho thực tế - số đã giữ hàng = onHand - reserved",
                  "example": 5
                },
                "reserved": {
                  "type": "integer",
                  "description": "Số lượng đang giữ",
                  "example": 0
                },
                "onHand": {
                  "type": "integer",
                  "description": "Số lượng thực tế đang có trong kho",
                  "example": 5
                }
              }
            }
          },
          "totalAvailableByStocks": {
            "type": "array",
            "default": [],
            "description": "Khối thông tin tồn kho theo từng loại kho",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "loại kho"
                },
                "total": {
                  "type": "number",
                  "description": "tổng tồn kho của loại kho đó"
                }
              }
            }
          },
          "isBundle": {
            "type": "boolean",
            "description": "sản phẩm là bundle hay không"
          },
          "bundleProducts": {
            "type": "array",
            "default": [],
            "description": "danh sách sản phẩm con trong trường hợp sản phẩm là bundle (obsoleted)",
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "type": "string",
                  "description": "sản phẩm con"
                },
                "quantity": {
                  "type": "number",
                  "description": "số lượng sản phẩm con trong bundle"
                },
                "priority": {
                  "type": "number",
                  "description": "thứ tự ưu tiên của sản phẩm con trong bundle"
                },
                "name": {
                  "type": "string",
                  "description": "tên sản phẩm con"
                },
                "displayName": {
                  "type": "string",
                  "description": "tên hiển thị của sản phẩm con"
                }
              }
            }
          },
          "parentBundles": {
            "type": "array",
            "default": [],
            "description": "danh sách các sản phẩm bundle cha có chứa sản phẩm hiện tại nếu sản phẩm không phải bunble",
            "items": {
              "type": "object",
              "properties": {
                "sku": {
                  "type": "string",
                  "description": "sku của sản phẩm cha"
                },
                "name": {
                  "type": "string",
                  "description": "tên sản phẩm cha"
                },
                "displayName": {
                  "type": "string",
                  "description": "tên hiển thị của sản phẩm cha"
                }
              }
            }
          },
          "promotions": {
            "type": "array",
            "default": [],
            "description": "Khối thông tin khuyến mại cho sản phẩm. ListingProductPromotionsVer2 chỉ sử dụng khi gọi ở API ver 2 (host/api/v2/search - api search và host/api/v2/products/<sku> - api detail)",
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ListingProductPromotions"
                },
                {
                  "$ref": "#/components/schemas/ListingProductPromotionsVer2"
                }
              ]
            },
            "example": [
              {
                "channel": "online",
                "terminal": null,
                "definitions": [
                  {
                    "id": 1,
                    "name": "VNPAYQR10",
                    "description": "Giảm thêm 10% tối đa 200K khi nhập mã VNPAYQR10",
                    "govRegister": false,
                    "type": "order",
                    "startedAt": "2019-01-02T10:00:00.000Z",
                    "endedAt": "2019-02-02T10:00:00.000Z",
                    "partner": "VNPAY",
                    "isDefault": false,
                    "timeRanges": [
                      {
                        "start": "11:00:00",
                        "end": "14:00:00"
                      },
                      {
                        "start": "20:00:00",
                        "end": "23:00:00"
                      }
                    ],
                    "condition": {
                      "paymentMethods": [
                        "online",
                        "offline"
                      ],
                      "orderValueMin": 90000,
                      "orderValueMax": null,
                      "coupon": "VNPAYQR10"
                    },
                    "benefit": {
                      "money": [
                        {
                          "id": 39,
                          "money": null,
                          "percent": 10,
                          "applyOn": "order",
                          "maxDiscount": 200000,
                          "discountType": "percent",
                          "maxDiscountPerOrder": 200000
                        }
                      ],
                      "items": null
                    }
                  }
                ]
              },
              {
                "channel": "showroom",
                "terminal": "CP00",
                "definitions": [
                  {
                    "id": 1,
                    "name": "CTKM 1",
                    "description": "Mô tả cho CTKM 1",
                    "type": "product",
                    "startedAt": "2019-04-01T10:00:00.000Z",
                    "endedAt": "2019-08-01T10:00:00.000Z",
                    "partner": "PHONGVU",
                    "isDefault": false,
                    "timeRanges": [
                      {
                        "start": "11:00:00",
                        "end": "14:00:00"
                      },
                      {
                        "start": "20:00:00",
                        "end": "23:00:00"
                      }
                    ],
                    "condition": {
                      "paymentMethods": [
                        "all"
                      ],
                      "orderValueMin": 90000,
                      "orderValueMax": 900000,
                      "coupon": null
                    },
                    "benefit": {
                      "money": [
                        {
                          "id": 1,
                          "money": null,
                          "percent": 10,
                          "applyOn": "product",
                          "maxDiscount": 200000,
                          "discountType": "percent",
                          "maxDisCountPerOrder": 200000
                        },
                        {
                          "id": 2,
                          "money": 100000,
                          "percent": 10,
                          "applyOn": "order",
                          "maxDiscount": null,
                          "discountType": "money",
                          "maxDiscountPerOrder": 100000
                        }
                      ],
                      "items": [
                        {
                          "id": 30,
                          "sku": 1602062,
                          "name": "Loa sonic",
                          "applyOn": "product",
                          "quantity": 1,
                          "maxQuantityPerOrder": 1
                        }
                      ]
                    }
                  }
                ]
              }
            ]
          },
          "flashSales": {
            "type": "array",
            "default": [],
            "description": "Khối thông tin về flash sale đang chạy",
            "items": {
              "type": "object",
              "properties": {
                "channel": {
                  "type": "string",
                  "description": "kênh bán được áp dụng"
                },
                "terminal": {
                  "type": "string",
                  "nullable": true,
                  "description": "điểm bán hàng được áp dụng"
                },
                "used": {
                  "type": "number",
                  "description": "số lượng đã sử dụng"
                },
                "total": {
                  "type": "number",
                  "description": "tổng số lượng sản phẩm"
                },
                "discountPercent": {
                  "type": "number",
                  "format": "double"
                },
                "definition": {
                  "type": "object",
                  "description": "định nghĩa thông tin flash sale",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "tên chương trình flash sale"
                    },
                    "description": {
                      "type": "string",
                      "description": "mô tả chương trình"
                    },
                    "govRegister": {
                      "type": "boolean",
                      "description": "thông tin flashsale đã đăng ký bộ công thương hay chưa"
                    },
                    "startedAt": {
                      "type": "string",
                      "format": "datetime",
                      "description": "thời gian bắt đầu"
                    },
                    "endedAt": {
                      "type": "string",
                      "format": "datetime",
                      "description": "thời gian kết thúc"
                    },
                    "timeRanges": {
                      "type": "array",
                      "nullable": true,
                      "description": "các khoảng thời gian hiệu lực",
                      "items": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "description": "thời điểm bắt đầu"
                          },
                          "end": {
                            "type": "string",
                            "description": "thời điểm kết thúc"
                          }
                        }
                      }
                    },
                    "paymentMethods": {
                      "type": "array",
                      "description": "hình thức thanh toán được áp dụng giá flashsale",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "type": "object",
                      "description": "loại flash sale",
                      "properties": {
                        "id": {
                          "type": "number",
                          "description": "id loại flashsale"
                        },
                        "code": {
                          "type": "string",
                          "description": "mã loại"
                        },
                        "name": {
                          "type": "string",
                          "description": "tên loại"
                        }
                      }
                    }
                  }
                }
              }
            },
            "example": [
              {
                "channel": "all",
                "terminal": null,
                "total": 5,
                "used": 0,
                "discountPercent": 3,
                "definition": {
                  "name": "Flash sale 4",
                  "description": "",
                  "govRegister": false,
                  "startedAt": "2019-04-01T04:00:00.000Z",
                  "endedAt": "2019-04-01T06:00:00.000Z",
                  "timeRanges": [
                    {
                      "start": "11:00:00",
                      "end": "13:00:00"
                    }
                  ],
                  "type": {
                    "id": 4,
                    "code": "DEAL_CUOI_TUAN",
                    "name": "Deal cuoi tuan"
                  },
                  "paymentMethods": [
                    "all"
                  ]
                }
              }
            ]
          },
          "seoInfo": {
            "type": "object",
            "description": "khối thông tin dành cho SEO",
            "properties": {
              "metaKeyWord": {
                "type": "string",
                "nullable": true,
                "description": "meta keyword (dành cho SEO)",
                "example": null
              },
              "metaTitle": {
                "type": "string",
                "nullable": true,
                "description": "meta title (dành cho SEO)",
                "example": null
              },
              "metaDescription": {
                "type": "string",
                "nullable": true,
                "description": "meta description (dành cho SEO)",
                "example": null
              },
              "shortDescription": {
                "type": "string",
                "description": "mô tả ngắn",
                "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
              },
              "description": {
                "type": "string",
                "nullable": true,
                "description": "mô tả dài",
                "example": null
              }
            }
          },
          "magentoId": {
            "type": "number",
            "description": "product id in magento for collecting rating and comments",
            "example": 235
          },
          "rating": {
            "type": "object",
            "nullable": true,
            "description": "Thông tin bình chọn, số lượng vote của sản phẩm",
            "properties": {
              "avaragePoint": {
                "type": "number",
                "format": "float",
                "description": "Điểm trung bình",
                "example": 4.8
              },
              "voteCount": {
                "type": "number",
                "description": "Số lượng bình chọn",
                "example": 200
              }
            }
          },
          "allActiveFlashSales": {
            "type": "array",
            "default": [],
            "description": "Thông tin flashsale đang và sẽ chạy của sản phẩm",
            "items": {
              "type": "object",
              "properties": {
                "channel": {
                  "type": "string",
                  "description": "kênh áp dụng chương trình",
                  "example": "pv_showroom"
                },
                "terminals": {
                  "type": "array",
                  "description": "các terminal trong channel được áp dụng chương trình",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "CP00",
                    "CP09"
                  ]
                },
                "type": {
                  "type": "object",
                  "description": "loại flash sale",
                  "properties": {
                    "id": {
                      "type": "number",
                      "description": "id loại flashsale"
                    },
                    "code": {
                      "type": "string",
                      "description": "mã loại"
                    },
                    "name": {
                      "type": "string",
                      "description": "tên loại"
                    }
                  }
                },
                "total": {
                  "type": "number",
                  "description": "tổng số lượng trong chương trình",
                  "example": 10
                },
                "used": {
                  "type": "number",
                  "description": "số lượng đã bán trong chương trình",
                  "example": 4
                },
                "flashSalePrice": {
                  "type": "number",
                  "description": "giá flashsale",
                  "example": 399000
                },
                "discountPercent": {
                  "type": "number",
                  "description": "tỉ lệ phần trăm đã giảm",
                  "example": "5%"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "active",
                    "inactive"
                  ],
                  "description": "trạng thái chương trình",
                  "example": "active"
                },
                "timeRanges": {
                  "type": "array",
                  "description": "các khoảng thời gian",
                  "items": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "description": "thời gian bắt đầu (UTC)",
                        "example": "2019-07-03T01:00:00.000Z"
                      },
                      "end": {
                        "type": "string",
                        "description": "thời gian kết thúc (UTC)",
                        "example": "2019-07-03T03:00:00.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "productGroup": {
            "type": "object",
            "nullable": true,
            "description": "trả về các sản biến thể của sản phẩm",
            "properties": {
              "id": {
                "type": "number",
                "example": 1,
                "description": "id của productGroup"
              },
              "name": {
                "type": "string",
                "description": "tên của productGroup"
              },
              "visible": {
                "type": "string",
                "example": "group",
                "description": "Mô tả cách hiển thị của client(group: áo sơ mi XL, M, S là một group,individual: áo sơ mi XL, M, S là 3 sản phẩm riêng biệt) "
              },
              "configurations": {
                "type": "array",
                "description": "Các cấu hình của variant",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1,
                      "description": "id của một configuration"
                    },
                    "code": {
                      "type": "string",
                      "example": "KT",
                      "description": "mã của một configuration"
                    },
                    "name": {
                      "type": "string",
                      "example": "Kích thước",
                      "description": "tên của một configuration"
                    },
                    "optionType": {
                      "type": "string",
                      "enum": [
                        "code",
                        "text",
                        "image"
                      ],
                      "description": "Mô tả cách hiển thị của cấu hình trên client",
                      "example": "code"
                    },
                    "options": {
                      "type": "array",
                      "description": "Các option trong một configuration",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "giá trị của option",
                            "example": "43 inch"
                          },
                          "optionId": {
                            "type": "number",
                            "description": "id của option",
                            "example": 3
                          },
                          "image": {
                            "type": "object",
                            "nullable": true,
                            "description": "Nếu optionType khác image thì giá trị sẽ là null",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "đường dẫn của hình ảnh",
                                "example": "media/catalog/product/uploads/product/p_708/2017/06/05/708.jpg"
                              },
                              "priority": {
                                "type": "number",
                                "description": "độ ưu tiên của hình ảnh",
                                "example": 1
                              },
                              "url": {
                                "type": "number",
                                "description": "url",
                                "example": "https://img1.phongvu.vn/media/catalog/product/uploads/product/p_708/2017/06/05/708.jpg"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "variants": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "sku": {
                      "type": "string",
                      "example": 1703341,
                      "description": "sku của sản phẩm biến thể"
                    },
                    "attributeValues": {
                      "type": "array",
                      "description": "tập giá trị của các thuộc tính",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "code": {
                            "type": "string",
                            "example": "KT",
                            "description": "giá trị của option tương ứng"
                          },
                          "value": {
                            "type": "string",
                            "example": "45 inch",
                            "description": "giá trị của thuộc tính ứng với option"
                          },
                          "optionId": {
                            "type": "number",
                            "example": 1,
                            "description": "id của option tương ứng"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListingProductDetail": {
        "properties": {
          "taxOut": {
            "type": "number",
            "format": "float",
            "description": "Thuế bán ra (đơn vị: %)",
            "example": 10
          },
          "taxOutCode": {
            "type": "string",
            "description": "Mã loại thuế xuất",
            "example": "KT"
          },
          "seoInfo": {
            "type": "object",
            "description": "khối thông tin dành cho SEO",
            "properties": {
              "metaKeyWord": {
                "type": "string",
                "description": "meta keyword (dành cho SEO)",
                "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
              },
              "metaTitle": {
                "type": "string",
                "description": "meta title (dành cho SEO)",
                "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
              },
              "metaDescription": {
                "type": "string",
                "description": "meta description (dành cho SEO)",
                "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
              },
              "shortDescription": {
                "type": "string",
                "description": "mô tả ngắn",
                "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
              },
              "description": {
                "type": "string",
                "description": "mô tả dài",
                "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit"
              }
            }
          },
          "warranty": {
            "type": "object",
            "description": "khối thông tin bảo hành",
            "properties": {
              "months": {
                "type": "number",
                "description": "số tháng sản phẩm được bảo hành",
                "example": 12
              },
              "description": {
                "type": "string",
                "description": "thông tin chi tiết bảo hành",
                "example": "sản phẩm phải còn nguyên tem"
              }
            }
          },
          "attributes": {
            "type": "array",
            "description": "danh sách các thuộc tính sản phẩm",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "mã thuộc tính",
                  "example": "phanmem_digitallicense"
                },
                "values": {
                  "type": "array",
                  "description": "danh sách giá trị của thuộc tính",
                  "items": {
                    "type": "object",
                    "properties": {
                      "optionId": {
                        "type": "number"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "attributeGroups": {
            "type": "array",
            "description": "khối thông tin hiển thị thuộc tính sản phẩm",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "nullable": true,
                  "description": "id nhóm thuộc tính"
                },
                "name": {
                  "type": "string",
                  "description": "name of attribute group"
                },
                "value": {
                  "type": "string",
                  "description": "tên hiển thị nhóm thuộc tính"
                },
                "parentId": {
                  "type": "integer",
                  "nullable": true,
                  "description": "Id nhóm thuộc tính cha. Nếu bằng 0 thì sẽ là nhóm thuộc tính to nhất"
                },
                "priority": {
                  "type": "number",
                  "description": "Thứ tự ưu tiên"
                }
              }
            },
            "example": [
              {
                "id": 1350,
                "name": "Cấu hình chi tiết",
                "value": "",
                "parentId": 0,
                "priority": 15
              },
              {
                "id": 1355,
                "name": "Thế hệ CPU",
                "value": "Intel Core thế hệ thứ 8",
                "parentId": 1350,
                "priority": 32
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "thời điểm tạo sản phẩm"
          },
          "salePoint": {
            "type": "number",
            "description": "điểm số bán hàng",
            "example": 10
          },
          "importPrice": {
            "type": "number",
            "format": "float",
            "description": "Giá nhập của sản phẩm",
            "example": 680000
          }
        }
      },
      "ListingProductPromotions": {
        "properties": {
          "channel": {
            "type": "string",
            "description": "kênh bán được áp dụng khuyến mại"
          },
          "terminal": {
            "type": "string",
            "nullable": true,
            "description": "điểm bán hàng được áp dụng khuyến mại"
          },
          "definitions": {
            "type": "array",
            "description": "khối thông tin chi tiết các chương trình khuyến mại",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "id chương trình khuyến mại"
                },
                "name": {
                  "type": "string",
                  "description": "tên chương trình khuyến mại"
                },
                "govRegister": {
                  "type": "boolean",
                  "description": "thông tin khuyến mại đã đăng ký bộ công thương hay chưa"
                },
                "description": {
                  "type": "string",
                  "description": "mô tả chương trình khuyến mại"
                },
                "startedAt": {
                  "type": "string",
                  "format": "datetime",
                  "description": "ngày bắt đầu chương trình"
                },
                "endedAt": {
                  "type": "string",
                  "format": "datetime",
                  "description": "ngày kết thúc chương trình"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "order",
                    "product",
                    "coupon"
                  ],
                  "description": "loại chương trình khuyến mại"
                },
                "partner": {
                  "type": "string",
                  "description": "đối tác tài trợ chương trình khuyến mại"
                },
                "timeRanges": {
                  "type": "array",
                  "nullable": true,
                  "description": "các khoảng thời gian hiệu lực trong ngày được áp dụng khuyến mại",
                  "items": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "description": "thời điểm bắt đầu"
                      },
                      "end": {
                        "type": "string",
                        "description": "thời điểm kết thúc"
                      }
                    }
                  }
                },
                "isDefault": {
                  "type": "boolean",
                  "description": "khuyến mại mặc định"
                },
                "condition": {
                  "type": "object",
                  "description": "điều kiện được hưởng khuyến mại",
                  "properties": {
                    "paymentMethods": {
                      "type": "array",
                      "description": "các phương thức thanh toán được quyền áp dụng chương trình",
                      "items": {
                        "type": "string"
                      }
                    },
                    "orderValueMin": {
                      "type": "number",
                      "format": "double",
                      "nullable": true,
                      "description": "giá trị đơn hàng tối thiếu"
                    },
                    "orderValueMax": {
                      "type": "number",
                      "format": "double",
                      "nullable": true,
                      "description": "giá trị đơn hàng tối đa"
                    },
                    "coupon": {
                      "type": "string",
                      "nullable": true,
                      "description": "coupon áp dụng. CTKM có loại là coupon và có coupon chỉ định được public"
                    },
                    "blockSize": {
                      "type": "number",
                      "description": "Điều kiện ap dụng dựa trên block số lượng sản phẩm"
                    },
                    "minQuantity": {
                      "type": "number",
                      "description": "Số lượng sản phẩm tối đa cần mua"
                    }
                  }
                },
                "benefit": {
                  "type": "object",
                  "description": "khối thông tin quyền lợi khuyến mại",
                  "$ref": "#/components/schemas/ListingPromotionsBenefit"
                }
              }
            }
          }
        }
      },
      "ListingProductPromotionsVer2": {
        "properties": {
          "channel": {
            "type": "string",
            "description": "kênh bán được áp dụng khuyến mại"
          },
          "terminal": {
            "type": "string",
            "nullable": true,
            "description": "điểm bán hàng được áp dụng khuyến mại"
          },
          "id": {
            "type": "number",
            "description": "id chương trình khuyến mại"
          },
          "name": {
            "type": "string",
            "description": "tên chương trình khuyến mại"
          },
          "govRegister": {
            "type": "boolean",
            "description": "thông tin khuyến mại đã đăng ký bộ công thương hay chưa"
          },
          "description": {
            "type": "string",
            "description": "mô tả chương trình khuyến mại"
          },
          "startedAt": {
            "type": "string",
            "format": "datetime",
            "description": "ngày bắt đầu chương trình"
          },
          "endedAt": {
            "type": "string",
            "format": "datetime",
            "description": "ngày kết thúc chương trình"
          },
          "type": {
            "type": "string",
            "enum": [
              "order",
              "product",
              "coupon"
            ],
            "description": "loại chương trình khuyến mại"
          },
          "partner": {
            "type": "string",
            "description": "đối tác tài trợ chương trình khuyến mại"
          },
          "timeRanges": {
            "type": "array",
            "nullable": true,
            "description": "các khoảng thời gian hiệu lực trong ngày được áp dụng khuyến mại",
            "items": {
              "type": "object",
              "properties": {
                "start": {
                  "type": "string",
                  "description": "thời điểm bắt đầu"
                },
                "end": {
                  "type": "string",
                  "description": "thời điểm kết thúc"
                }
              }
            }
          },
          "isDefault": {
            "type": "boolean",
            "description": "khuyến mại mặc định"
          },
          "condition": {
            "type": "object",
            "description": "điều kiện được hưởng khuyến mại",
            "properties": {
              "paymentMethods": {
                "type": "array",
                "description": "các phương thức thanh toán được quyền áp dụng chương trình",
                "items": {
                  "type": "string"
                }
              },
              "orderValueMin": {
                "type": "number",
                "format": "double",
                "nullable": true,
                "description": "giá trị đơn hàng tối thiếu"
              },
              "orderValueMax": {
                "type": "number",
                "format": "double",
                "nullable": true,
                "description": "giá trị đơn hàng tối đa"
              },
              "coupon": {
                "type": "string",
                "nullable": true,
                "description": "coupon áp dụng. CTKM có loại là coupon và có coupon chỉ định được public"
              },
              "blockSize": {
                "type": "number",
                "description": "Điều kiện ap dụng dựa trên block số lượng sản phẩm"
              },
              "minQuantity": {
                "type": "number",
                "description": "Số lượng sản phẩm tối đa cần mua"
              }
            }
          },
          "benefit": {
            "type": "object",
            "description": "khối thông tin quyền lợi khuyến mại",
            "$ref": "#/components/schemas/ListingPromotionsBenefit"
          }
        }
      },
      "ListingProductSrmReq": {
        "type": "array",
        "description": "Danh sách sản phẩm và tồn kho tương ứng",
        "items": {
          "type": "object",
          "properties": {
            "sku": {
              "type": "string",
              "description": "SKU của sản phẩm"
            },
            "importPrice": {
              "type": "number",
              "format": "double",
              "description": "Giá nhập"
            },
            "salePoint": {
              "type": "number",
              "format": "float",
              "description": "Điểm thưởng"
            },
            "timestamp": {
              "type": "number",
              "format": "float",
              "description": "Thời gian cập nhật thông tin sản phẩm (timestamp tính theo milisecond)"
            },
            "tax": {
              "type": "object",
              "description": "Thuế",
              "properties": {
                "taxIn": {
                  "type": "number",
                  "format": "float",
                  "description": "Thuế nhập"
                },
                "taxOut": {
                  "type": "number",
                  "format": "float",
                  "description": "Thuế xuất"
                },
                "taxInCode": {
                  "type": "string",
                  "description": "Mã loại thuế nhập"
                },
                "taxOutCode": {
                  "type": "string",
                  "description": "Mã loại thuế xuất"
                }
              }
            }
          }
        }
      },
      "ListingProductWmsReq": {
        "type": "array",
        "description": "Danh sách sản phẩm và tồn kho tương ứng",
        "items": {
          "type": "object",
          "properties": {
            "sku": {
              "type": "string",
              "description": "SKU của sản phẩm"
            },
            "items": {
              "type": "array",
              "description": "danh sách tồn kho của sản phẩm",
              "items": {
                "$ref": "#/components/schemas/ListingProductWmsStock"
              }
            }
          }
        }
      },
      "ListingProductWmsStock": {
        "required": [
          "branch",
          "branchName",
          "warehouse",
          "warehouseName",
          "location",
          "locationName",
          "storeCode",
          "productBizType",
          "available",
          "onHand",
          "reserved",
          "timestamp"
        ],
        "properties": {
          "branch": {
            "type": "string",
            "description": "Mã chi nhánh"
          },
          "storeName": {
            "type": "string",
            "description": "Tên chi nhánh"
          },
          "warehouse": {
            "type": "string",
            "description": "Mã kho"
          },
          "warehouseName": {
            "type": "string",
            "description": "Tên kho"
          },
          "location": {
            "type": "string",
            "description": "Mã code khu vực chưa hàng (dmkho)"
          },
          "locationName": {
            "type": "string",
            "description": "Tên khu vực chứa hàng (dmkho)"
          },
          "storeCode": {
            "type": "string",
            "description": "Loại kho"
          },
          "productBizType": {
            "type": "string",
            "description": "Loại hình kinh doanh sản phẩm"
          },
          "available": {
            "type": "number",
            "description": "available = onHand - reserved. Số lượng có thể bán"
          },
          "onHand": {
            "type": "number",
            "description": "Số lượng thực tế có trong kho"
          },
          "reserved": {
            "type": "number",
            "description": "Số lượng hàng đang giữ"
          },
          "timestamp": {
            "type": "number",
            "format": "double",
            "description": "thời gian cập nhật tồn kho"
          }
        }
      },
      "ListingPromotionsBenefit": {
        "properties": {
          "money": {
            "type": "array",
            "nullable": true,
            "description": "quyền lợi tặng tiền",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "id của quyền lợi"
                },
                "money": {
                  "type": "number",
                  "format": "double",
                  "nullable": true,
                  "description": "số tiền được giảm"
                },
                "percent": {
                  "type": "number",
                  "format": "double",
                  "nullable": true,
                  "description": "phần trăm được giảm"
                },
                "applyOn": {
                  "type": "string",
                  "enum": [
                    "order",
                    "product"
                  ],
                  "description": "đơn vị tính quyền lợi"
                },
                "maxDiscount": {
                  "type": "number",
                  "format": "double",
                  "nullable": true,
                  "description": "số tiền tối đa được giảm"
                },
                "discountType": {
                  "type": "string",
                  "enum": [
                    "money",
                    "percent"
                  ],
                  "description": "Loại giảm giá"
                },
                "maxDiscountPerOrder": {
                  "type": "number",
                  "description": "số tiền tối đa được giảm trên mỗi đơn hàng"
                }
              }
            }
          },
          "items": {
            "type": "array",
            "nullable": true,
            "description": "quyền lợi quà tặng",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "id của quyền lợi"
                },
                "sku": {
                  "type": "string",
                  "description": "sku sản phẩm được tặng quà"
                },
                "name": {
                  "type": "string",
                  "description": "tên sản phẩm quà tặng"
                },
                "applyOn": {
                  "type": "string",
                  "enum": [
                    "order",
                    "product"
                  ],
                  "description": "đơn vị tính quyền lợi"
                },
                "quantity": {
                  "type": "number",
                  "description": "số lượng tặng mỗi lần"
                },
                "maxQuantityPerOrder": {
                  "type": "number",
                  "description": "số lượng quà tặng tối đa trên mỗi đơn hàng"
                }
              }
            }
          },
          "voucher": {
            "type": "object",
            "description": "Quyền lợi tặng coupon",
            "properties": {
              "budgetStatus": {
                "type": "string",
                "description": "trạng thái ngân sách"
              },
              "maxQuantity": {
                "type": "number",
                "description": "số lượng coupon tặng quà tối đa trong 1 đơn hàng"
              },
              "quantity": {
                "type": "number",
                "description": "số lượng coupon tặng"
              },
              "outOfBudget": {
                "type": "boolean",
                "description": "trạng thái ngân sách"
              },
              "appliedPromotion": {
                "type": "object",
                "description": "CTKM áp dụng coupon được tặng",
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "id của CTKM áp dụng"
                  },
                  "name": {
                    "type": "string",
                    "description": "Tên CTKM áp dụng"
                  },
                  "description": {
                    "type": "string",
                    "description": "Mô tả của CTKM áp dụng"
                  },
                  "benefit": {
                    "type": "object",
                    "description": "quyền lợi của CTKM áp dụng (không có thông tin voucher)",
                    "properties": {
                      "money": {
                        "type": "array",
                        "nullable": true,
                        "description": "quyền lợi tặng tiền",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "description": "id của quyền lợi"
                            },
                            "money": {
                              "type": "number",
                              "format": "double",
                              "nullable": true,
                              "description": "số tiền được giảm"
                            },
                            "percent": {
                              "type": "number",
                              "format": "double",
                              "nullable": true,
                              "description": "phần trăm được giảm"
                            },
                            "applyOn": {
                              "type": "string",
                              "enum": [
                                "order",
                                "product"
                              ],
                              "description": "đơn vị tính quyền lợi"
                            },
                            "maxDiscount": {
                              "type": "number",
                              "format": "double",
                              "nullable": true,
                              "description": "số tiền tối đa được giảm"
                            },
                            "discountType": {
                              "type": "string",
                              "enum": [
                                "money",
                                "percent"
                              ],
                              "description": "Loại giảm giá"
                            },
                            "maxDiscountPerOrder": {
                              "type": "number",
                              "description": "số tiền tối đa được giảm trên mỗi đơn hàng"
                            }
                          }
                        }
                      },
                      "items": {
                        "type": "array",
                        "nullable": true,
                        "description": "quyền lợi quà tặng",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number",
                              "description": "id của quyền lợi"
                            },
                            "sku": {
                              "type": "string",
                              "description": "sku sản phẩm được tặng quà"
                            },
                            "name": {
                              "type": "string",
                              "description": "tên sản phẩm quà tặng"
                            },
                            "applyOn": {
                              "type": "string",
                              "enum": [
                                "order",
                                "product"
                              ],
                              "description": "đơn vị tính quyền lợi"
                            },
                            "quantity": {
                              "type": "number",
                              "description": "số lượng tặng mỗi lần"
                            },
                            "maxQuantityPerOrder": {
                              "type": "number",
                              "description": "số lượng quà tặng tối đa trên mỗi đơn hàng"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListingPromotionsVoucher": {
        "properties": {
          "voucher": {
            "type": "object",
            "description": "Quyền lợi tặng coupon",
            "properties": {
              "budgetStatus": {
                "type": "string",
                "description": "trạng thái ngân sách"
              },
              "maxQuantity": {
                "type": "number",
                "description": "số lượng coupon tặng quà tối đa trong 1 đơn hàng"
              },
              "quantity": {
                "type": "number",
                "description": "số lượng coupon tặng"
              },
              "outOfBudget": {
                "type": "boolean",
                "description": "trạng thái ngân sách"
              },
              "appliedPromotion": {
                "type": "object",
                "description": "CTKM áp dụng coupon được tặng",
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "id của CTKM áp dụng"
                  },
                  "name": {
                    "type": "string",
                    "description": "Tên CTKM áp dụng"
                  },
                  "description": {
                    "type": "string",
                    "description": "Mô tả của CTKM áp dụng"
                  },
                  "benefit": {
                    "type": "object",
                    "description": "quyền lợi của CTKM áp dụng (không có thông tin voucher)",
                    "$ref": "#/components/schemas/ListingPromotionsBenefit"
                  }
                }
              }
            }
          }
        }
      },
      "ListingSearchData": {
        "properties": {
          "products": {
            "type": "array",
            "description": "khối kết quả sản phẩm",
            "items": {
              "$ref": "#/components/schemas/ListingProductData"
            }
          },
          "keywords": {
            "type": "array",
            "description": "khối kết quả từ khóa gần đúng/liên quan",
            "items": {
              "$ref": "#/components/schemas/ListingKeywordData"
            },
            "example": [
              {
                "query": "laptop gaming",
                "highlight": "<em>laptop</em> gaming",
                "brands": [
                  "ACER",
                  "MSI"
                ],
                "categories": [
                  "Laptop Gaming",
                  "Laptop"
                ]
              },
              {
                "query": "laptop acer",
                "highlight": "<em>laptop</em> acer",
                "brands": [
                  "ACER"
                ],
                "categories": [
                  "Laptop Acer",
                  "Laptop gaming"
                ]
              }
            ]
          },
          "filters": {
            "type": "array",
            "description": "khối kết quả thuộc tính dùng để lọc sản phẩm",
            "items": {
              "$ref": "#/components/schemas/ListingAttributeFilterData"
            },
            "example": [
              {
                "code": "brand",
                "name": "Thương hiệu",
                "values": [
                  {
                    "count": 100,
                    "option": 25,
                    "value": "ASUS"
                  },
                  {
                    "count": 97,
                    "option": 83,
                    "value": "Acer"
                  }
                ]
              },
              {
                "code": "category",
                "name": "Danh mục",
                "values": [
                  {
                    "count": 18,
                    "option": 715,
                    "value": "Laptop acer"
                  },
                  {
                    "count": 20,
                    "option": 716,
                    "value": "Laptop asus"
                  }
                ]
              },
              {
                "total": 270,
                "code": "attributes.laptop_chipdohoaroi",
                "name": "Chip đồ họa rời",
                "values": [
                  {
                    "count": 10,
                    "option": 125,
                    "value": "NVIDIA GeForce MX150"
                  },
                  {
                    "count": 25,
                    "option": 145,
                    "value": "AMD Radeon R5 M420"
                  }
                ]
              }
            ]
          }
        }
      },
      "ListingSearchResp": {
        "required": [
          "code",
          "result",
          "extra"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Mã kết quả",
            "example": "00"
          },
          "result": {
            "description": "khối dữ liệu kết quả",
            "$ref": "#/components/schemas/ListingSearchData"
          },
          "extra": {
            "type": "object",
            "description": "khối dữ liệu thêm phục vụ cho client",
            "properties": {
              "totalItems": {
                "type": "integer",
                "description": "tổng số sản phẩm",
                "example": 102
              },
              "page": {
                "type": "integer",
                "description": "trang hiện tại",
                "example": 2
              },
              "pageSize": {
                "type": "integer",
                "description": "số lượng sản phẩm tối đa trong 1 trang",
                "example": 10
              },
              "priceRanges": {
                "type": "array",
                "description": "các khoảng giá dùng đề filter (hiện tại chỉ có 1 chính là giá max và min)",
                "items": {
                  "type": "object",
                  "properties": {
                    "minPrice": {
                      "type": "number",
                      "format": "double",
                      "description": "giá nhỏ nhất trong khoảng giá",
                      "example": 30000
                    },
                    "maxPrice": {
                      "type": "number",
                      "format": "double",
                      "description": "giá lớn nhất trong khoảng giá",
                      "example": 100000
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListingMenuItemData": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id của menu item",
            "example": 1
          },
          "parentId": {
            "type": "integer",
            "description": "Id của menu item parent",
            "example": 2
          },
          "priority": {
            "type": "integer",
            "description": "Thứ tự ưu tiên của menu item",
            "example": 1
          },
          "isTargetBlank": {
            "type": "integer",
            "description": "Có mở tab mới không? (0 hoặc 1)",
            "example": 0
          },
          "level": {
            "type": "integer",
            "description": "level của menu item",
            "example": 1
          },
          "icon": {
            "type": "string",
            "description": "ảnh của menu item",
            "example": "https://file.services.teko.vn/media/92/29/1567137562.1867676_Tivi-Samsung-32-inch-UA32N4000-1.jpg"
          },
          "name": {
            "type": "string",
            "description": "Tên của menu item",
            "example": "Đồ chơi, mẹ và bé"
          },
          "targetPath": {
            "type": "string",
            "description": "Tên của menu item",
            "example": "sellerCategories=1,2&attributeSets=1,2&brands=acer&skus=123456,654321&attributes.laptop_hedieuhanh=1,2"
          },
          "configs": {
            "type": "object",
            "description": "Cấu hình của menu item (dùng để filter lấy ra danh sách sản phẩm)",
            "properties": {
              "sellerCategories": {
                "type": "array",
                "description": "danh sách master category id, tương ứng với param sellerCategories trong api listing",
                "items": {
                  "type": "integer",
                  "description": "id của master category"
                },
                "example": [
                  1,
                  2
                ]
              },
              "attributeSets": {
                "type": "array",
                "description": "danh sách attribute set id, tương ứng với param attributeSets trong api listing",
                "items": {
                  "type": "integer",
                  "description": "id của attribute set"
                },
                "example": [
                  1,
                  2
                ]
              },
              "brands": {
                "type": "array",
                "description": "danh sách brand code tương ứng, tương ứng với param brands trong api listing",
                "items": {
                  "type": "string",
                  "description": "Mã code của brand"
                },
                "example": [
                  "acer",
                  "asus"
                ]
              },
              "skus": {
                "type": "array",
                "description": "danh sách sku, tương ứng với param skus trong api listing",
                "items": {
                  "type": "string",
                  "description": "Mã sku"
                },
                "example": [
                  "123456",
                  "654321"
                ]
              },
              "attributes": {
                "type": "array",
                "description": "danh sách cấu hình attributes, ex attributes.laptop_hedieuhanh=1,2 trong api listing",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Mã thuộc tính",
                      "example": "laptop_hedieuhanh"
                    },
                    "optionIds": {
                      "type": "array",
                      "description": "Mã option id của thuộc tính",
                      "items": {
                        "type": "integer",
                        "description": "option id"
                      },
                      "example": [
                        1,
                        2
                      ]
                    }
                  }
                }
              },
              "price": {
                "type": "object",
                "description": "Filter theo khoảng giá, tương ứng price_gte=100000.0&price_lte=2000000.0",
                "properties": {
                  "from": {
                    "type": "number",
                    "format": "double",
                    "description": "Giá lớn hơn hoặc bằng",
                    "example": 100000
                  },
                  "to": {
                    "type": "number",
                    "format": "double",
                    "description": "Giá nhỏ hơn hoặc bằng",
                    "example": 2000000
                  }
                }
              }
            }
          }
        }
      },
      "ListingMenuItemResp": {
        "required": [
          "code",
          "result"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Mã kết quả",
            "example": "00"
          },
          "result": {
            "type": "object",
            "description": "khối dữ liệu kết quả",
            "properties": {
              "menuItems": {
                "type": "array",
                "description": "khối kết quả menu item",
                "items": {
                  "$ref": "#/components/schemas/ListingMenuItemData"
                }
              }
            }
          }
        }
      },
      "location_success": {
        "properties": {
          "message": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/location"
            }
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "location": {
        "required": [
          "code",
          "parentCode"
        ],
        "properties": {
          "name": {
            "description": "location name",
            "type": "string"
          },
          "parentCode": {
            "description": "location parent code",
            "type": "string"
          },
          "code": {
            "description": "location code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "area": {
        "title": "area",
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "Area - Citie - District - Ward"
      },
      "OAuthError": {
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "error message",
            "example": "invalid_request"
          },
          "error_description": {
            "type": "string",
            "description": "error description",
            "example": "Invalid \"refresh_token\" in request"
          }
        }
      },
      "TokenInvalidResp": {
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "invalid error message (status code 400)",
            "example": "invalid_request"
          }
        }
      },
      "TokenUnauthorizedResp": {
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string",
            "description": "unauthorized error message (status code 401)",
            "example": "unsupported_token_type"
          }
        }
      },
      "OAuthIntrospectToken": {
        "required": [
          "active",
          "scope",
          "client_id",
          "user",
          "token_type",
          "exp",
          "iat",
          "sub",
          "aud",
          "iss"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "description": "token status (activate or deactivate).",
            "example": true
          },
          "scope": {
            "type": "string",
            "description": "scope of token.",
            "example": "profile"
          },
          "client_id": {
            "type": "string",
            "description": "client id of token.",
            "example": "client_id_1"
          },
          "user": {
            "type": "integer",
            "format": "int64",
            "description": "user id of token or client id of token (if user is not found).",
            "example": 1
          },
          "token_type": {
            "type": "string",
            "description": "token_type is empty or null.",
            "example": null
          },
          "exp": {
            "type": "integer",
            "format": "int64",
            "description": "expire time of token (usually equal to `issued_at` + 3600 (1 hour))",
            "example": 1556008363
          },
          "iat": {
            "type": "integer",
            "format": "int64",
            "description": "issue time of token.",
            "example": 1556004763
          },
          "sub": {
            "type": "integer",
            "format": "int64",
            "description": "similar with user.",
            "example": 1
          },
          "aud": {
            "type": "string",
            "description": "equal to client id of token.",
            "example": "client_id_1"
          },
          "iss": {
            "type": "string",
            "description": "issue link of token.",
            "example": "https://server.example.com"
          }
        }
      },
      "OAuthToken": {
        "required": [
          "access_token",
          "expires_in",
          "refresh_token",
          "scope",
          "token_type"
        ],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "access_token is JWT string token which is signed from Private Key of ID Service.",
            "example": "eyJ0eXAiOiJKV1QiLCJh...DUf2yEl0DTYAAJIzIYRBdOvkLQ"
          },
          "expires_in": {
            "type": "integer",
            "format": "int64",
            "description": "expires_in is an integer which describe TTL of access_token.",
            "example": 864000
          },
          "refresh_token": {
            "type": "string",
            "description": "refresh_token (with grant_type is authorazation_code, password and refresh_token).",
            "example": "UTiylovD1xiwVA...rpQOgh7"
          },
          "scope": {
            "type": "string",
            "description": "scope with access_token.",
            "example": "profile"
          },
          "token_type": {
            "type": "string",
            "description": "token_type is equal to Bearer.",
            "example": "Bearer"
          }
        }
      },
      "UserInfo": {
        "required": [
          "sub",
          "name",
          "picture",
          "updated_at"
        ],
        "properties": {
          "sub": {
            "type": "string",
            "description": "User ID.",
            "example": "0008a2dba1ae426d8ae6e0775a7e69d9"
          },
          "name": {
            "type": "string",
            "description": "User's name.",
            "example": "Firstname Middlename Lastname"
          },
          "picture": {
            "type": "string",
            "format": "url",
            "description": "User's current avatar url.",
            "example": "https://lh3.googleusercontent.com/a-/AAuE7mAuo2uYjnRpQLMGGTQt9x2ylG6e93CNd8r_QNA0"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update time for user.",
            "example": "2019-12-31 23:59:59"
          },
          "email": {
            "type": "string",
            "description": "User's email.",
            "example": "user@email.com"
          },
          "phone_number": {
            "type": "string",
            "description": "User's phone number.",
            "example": "0123456789"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "User's birthday.",
            "example": "2019-12-31"
          },
          "address": {
            "type": "string",
            "description": "User's address.",
            "example": "330 Miller Rd. Doylestown, PA 18901"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user's current roles (in all services).",
            "example": [
              "service_1:admin",
              "service_2:developer"
            ]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user's current permissions (in all services).",
            "example": [
              "service_1:user:read",
              "service_2:client:update"
            ]
          },
          "meta_data": {
            "type": "object",
            "description": "User's other data, for example `sso_id`, `asia_id`."
          }
        }
      },
      "BillingInfo": {
        "type": "object",
        "description": "Thông tin hóa đơn.",
        "required": [
          "type",
          "taxCode",
          "name",
          "address"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email của khách hàng"
          },
          "printPretaxPrice": {
            "type": "boolean",
            "description": "In giá trước thuế"
          },
          "printAfter": {
            "type": "integer",
            "description": "In sau ngày"
          },
          "type": {
            "type": "string",
            "description": "Loại hóa đơn. Giá trị: 01, 02"
          },
          "taxCode": {
            "type": "string",
            "description": "Mã số thuế"
          },
          "phone": {
            "type": "string",
            "description": "Điện thoại"
          },
          "name": {
            "type": "string",
            "description": "Tên khách hàng"
          },
          "address": {
            "type": "string",
            "description": "Địa chỉ"
          }
        }
      },
      "CreateOrderRequest": {
        "required": [
          "customer",
          "items",
          "totalDiscount",
          "service",
          "grandTotal",
          "terminalCode",
          "channelCode",
          "sellerId"
        ],
        "properties": {
          "originalId": {
            "description": "Mã đơn hàng gốc. \nDùng trong trường hợp cần clone order, trường này sẽ dùng để track lại id đơn hàng được clone từ.\n",
            "type": "string",
            "format": "uuid"
          },
          "refOrderCode": {
            "description": "Mã code của đơn được phát sinh từ hệ thông khác.",
            "type": "string"
          },
          "salesmanId": {
            "description": "ID nhân viên bán hàng.\nBắt buộc nếu channel khác online.  \n",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "items": {
            "description": "Thông tin sản phẩm trong đơn hàng",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCreateItem"
            }
          },
          "inventoryCode": {
            "description": "Mã kho xuất hàng",
            "type": "string"
          },
          "totalDiscount": {
            "description": "Giảm giá trên đơn hàng",
            "type": "string",
            "format": "decimal"
          },
          "note": {
            "description": "Ghi chú, diễn giải",
            "type": "string"
          },
          "payments": {
            "description": "Thông tin thanh toán cho đơn.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPayment"
            }
          },
          "service": {
            "$ref": "#/components/schemas/OrderService"
          },
          "billingInfo": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "shippingInfo": {
            "$ref": "#/components/schemas/OrderCreateShippingInfo"
          },
          "grandTotal": {
            "description": "Tổng giá trị đơn hàng",
            "type": "string",
            "format": "decimal"
          },
          "referralCode": {
            "description": "Mã giới thiệu",
            "type": "string"
          },
          "memberCard": {
            "description": "Mã thẻ thành viên, áp dụng cho loyalty.",
            "type": "string"
          },
          "promotions": {
            "description": "Chương trình khuyến mãi",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPromotion"
            }
          },
          "terminalCode": {
            "description": "\"Code của địa điểm bán hàng\nTham chiếu vào: https://catalog.services.teko.vn/extra-data?type=channels\"\n",
            "type": "string",
            "example": "CP00"
          },
          "channelCode": {
            "description": "\"Code kênh bán hàng\nTham chiếu vào: https://catalog.services.teko.vn/extra-data?type=channels\"\n",
            "type": "string",
            "example": "pv_showroom"
          },
          "sellerId": {
            "description": "\"ID của nhà bán hàng\nTham chiếu vào: https://catalog.services.teko.vn/extra-data?type=sellers\"\n",
            "type": "integer",
            "example": 1
          }
        }
      },
      "Customer": {
        "type": "object",
        "description": "Thông tin khách hàng",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "ID khách hàng. Tham chiếu từ CRM.",
            "type": "integer"
          },
          "name": {
            "description": "Tên khách hàng",
            "type": "string"
          },
          "email": {
            "description": "Email",
            "type": "string",
            "format": "email"
          },
          "phone": {
            "description": "Điện thoại",
            "type": "string"
          },
          "address": {
            "description": "Địa chỉ",
            "type": "string"
          },
          "wardId": {
            "description": "Mã phường xã",
            "type": "string"
          },
          "districtId": {
            "description": "Mã quận huyện",
            "type": "string"
          },
          "provinceId": {
            "description": "Mã tỉnh thành",
            "type": "string"
          },
          "asiaCrmId": {
            "description": "Asia ID",
            "type": "string"
          }
        }
      },
      "FullItem": {
        "type": "object",
        "description": "Thông tin sản phẩm trong đơn hàng",
        "required": [
          "lineItemId",
          "sku",
          "name",
          "quantity",
          "bizType",
          "vatRate",
          "unitPrice",
          "price",
          "rowTotal",
          "unitPriceBeforeTax",
          "sellerId"
        ],
        "properties": {
          "lineItemId": {
            "description": "ID của line item",
            "type": "string",
            "format": "uuid",
            "nullable": false,
            "minLength": 40,
            "maxLength": 40,
            "example": "2ba213ae-455d-4fc7-8e5f-0a7d58e31e6d"
          },
          "sku": {
            "description": "SKU sản phẩm",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "1900002"
          },
          "name": {
            "description": "Tên sản phẩm",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Bàn phím Logitech"
          },
          "quantity": {
            "description": "Số lượng",
            "type": "integer",
            "nullable": false,
            "example": 2
          },
          "bizType": {
            "description": "Loại hình kinh doanh sản phẩm",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "normal"
          },
          "vatRate": {
            "description": "Thuế",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": "10.5"
          },
          "unitPrice": {
            "description": "Đơn giá",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": "1000000"
          },
          "unitDiscount": {
            "description": "Giá giảm",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": "0"
          },
          "discountReason": {
            "description": "Lý do giảm giá",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Back to school"
          },
          "unitAdd": {
            "description": "Số tiền được thêm vào trên mỗi sản phẩm nếu có (hoa hồng,...)",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": "1000000"
          },
          "addReason": {
            "description": "Lý do thêm tiền",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Bù tiền ship"
          },
          "price": {
            "description": "Tổng tiền trên một sản phẩm đã cộng tiền, trừ tiền và đã tính thuế",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": "1000000"
          },
          "warranty": {
            "description": "Số tháng bảo hành",
            "type": "integer",
            "example": 0
          },
          "rowTotal": {
            "description": "Tổng tiền trên dòng quantity x price",
            "type": "string",
            "format": "decimal"
          },
          "unitPriceBeforeTax": {
            "description": "Giá trước thuế trên một đơn vị sản phẩm",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": "1000000"
          },
          "sellerId": {
            "description": "Người bán hàng",
            "type": "integer",
            "example": 2
          }
        }
      },
      "Item": {
        "type": "object",
        "description": "Thông tin sản phẩm trong đơn hàng",
        "required": [
          "sku",
          "quantity",
          "bizType",
          "vatRate",
          "unitPrice",
          "price",
          "rowTotal",
          "unitPriceBeforeTax",
          "sellerId"
        ],
        "properties": {
          "lineItemId": {
            "description": "ID của line item. Nếu không truyền lên hệ thống sẽ tự gen.",
            "type": "string",
            "format": "uuid"
          },
          "sku": {
            "description": "SKU sản phẩm",
            "type": "string"
          },
          "quantity": {
            "description": "Số lượng",
            "type": "integer"
          },
          "bizType": {
            "description": "Loại hình kinh doanh sản phẩm",
            "type": "string"
          },
          "vatRate": {
            "description": "Thuế",
            "type": "string",
            "format": "decimal"
          },
          "unitPrice": {
            "description": "Đơn giá",
            "type": "string",
            "format": "decimal"
          },
          "unitDiscount": {
            "description": "Giá giảm",
            "type": "string",
            "format": "decimal"
          },
          "discountReason": {
            "description": "Lý do giảm giá",
            "type": "string"
          },
          "unitAdd": {
            "description": "Số tiền được thêm vào trên mỗi sản phẩm nếu có (hoa hồng,...)",
            "type": "string",
            "format": "decimal"
          },
          "addReason": {
            "description": "Lý do thêm tiền",
            "type": "string"
          },
          "price": {
            "description": "Tổng tiền trên một sản phẩm đã cộng tiền, trừ tiền và đã tính thuế",
            "type": "string",
            "format": "decimal"
          },
          "warranty": {
            "description": "Số tháng bảo hành",
            "type": "integer"
          },
          "rowTotal": {
            "description": "Tổng tiền trên dòng quantity x price",
            "type": "string",
            "format": "decimal"
          },
          "unitPriceBeforeTax": {
            "description": "Giá trước thuế trên một đơn vị sản phẩm",
            "type": "string",
            "format": "decimal"
          },
          "sellerId": {
            "description": "Người bán hàng",
            "type": "integer"
          }
        }
      },
      "NewCreatedOrderInfo": {
        "type": "object",
        "required": [
          "id",
          "code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of created order",
            "example": "d0ba7d48-2038-4600-93ea-221750d18346"
          },
          "code": {
            "type": "string",
            "description": "Order Code of created order",
            "example": "RI5VFPNXT7"
          }
        }
      },
      "OrderApproval": {
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "Mã ID của loại duyệt\n  - `1`: Duyệt giảm giá\n  - `2`: Duyệt tồn kho\n  - `3`: Duyệt miễn thuế\n  - `4`: Duyệt nâng giá\n  - `5`: Duyệt công nợ\n  - `6`: Duyệt khuyến mãi\n",
            "type": "integer",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "example": 1
          },
          "name": {
            "description": "Tên loại duyệt",
            "type": "string",
            "example": "Duyệt giảm giá"
          },
          "isApproved": {
            "description": "Đã được duyệt hay chưa?",
            "type": "boolean",
            "example": true
          },
          "approvedBy": {
            "description": "Người duyệt",
            "$ref": "#/components/schemas/OrderOperator"
          },
          "updatedAt": {
            "description": "Thời gian ghi nhận duyệt",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrderCancelRequest": {
        "description": "Thông tin của các yêu cầu hủy đơn",
        "type": "object",
        "required": [
          "id",
          "reason",
          "createdBy",
          "createdAt"
        ],
        "properties": {
          "id": {
            "description": "Mã yêu cầu hủy",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "d3a287f0-8018-4852-91ed-9f7bc8f614a5"
          },
          "reason": {
            "description": "Lý do hủy đơn hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Khách đổi ý"
          },
          "createdBy": {
            "description": "Thông tin người thực hiện yêu cầu hủy",
            "nullable": false,
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "description": "ID của người dùng/hệ thống yêu cầu",
                "nullable": false,
                "type": "string",
                "minLength": 1,
                "example": "ID-001"
              },
              "name": {
                "description": "Tên của người dùng/hệ thống yêu cầu",
                "nullable": false,
                "type": "string",
                "minLength": 1,
                "example": "System 001"
              }
            }
          },
          "createdAt": {
            "description": "Thời gian tạo yêu cầu",
            "nullable": false,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrderChannel": {
        "type": "object",
        "description": "Thông tin Kênh bán hàng",
        "required": [
          "id",
          "code",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "description": "ID của channel",
            "type": "integer",
            "nullable": false,
            "example": 1
          },
          "code": {
            "description": "Mã của Kênh bán hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "pv_showroom"
          },
          "name": {
            "description": "Tên của Kênh bán hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Showroom Phong Vũ"
          },
          "type": {
            "description": "Loại của Kênh bán hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "enum": [
              "online",
              "agent",
              "showroom",
              "telesales"
            ],
            "example": "online"
          }
        }
      },
      "OrderCreateItem": {
        "type": "object",
        "description": "Thông tin sản phẩm trong đơn hàng",
        "required": [
          "sku",
          "quantity",
          "bizType",
          "vatRate",
          "unitPrice",
          "price",
          "rowTotal",
          "unitPriceBeforeTax",
          "sellerId"
        ],
        "properties": {
          "lineItemId": {
            "description": "ID của line item. Nếu không truyền lên hệ thống sẽ tự generate.",
            "type": "string",
            "format": "uuid"
          },
          "sku": {
            "description": "SKU sản phẩm",
            "type": "string"
          },
          "quantity": {
            "description": "Số lượng",
            "type": "integer"
          },
          "bizType": {
            "description": "Loại hình kinh doanh sản phẩm\n- \"Biz\": Hàng bán\n- \"Disp\":\tHàng trưng bày\n- \"Outlet\": Hàng thanh lý\n",
            "type": "string"
          },
          "vatRate": {
            "description": "Thuế",
            "type": "string",
            "format": "decimal"
          },
          "unitPrice": {
            "description": "Đơn giá",
            "type": "string",
            "format": "decimal"
          },
          "unitDiscount": {
            "description": "Giá giảm",
            "type": "string",
            "format": "decimal"
          },
          "discountReason": {
            "description": "Lý do giảm giá",
            "type": "string"
          },
          "unitAdd": {
            "description": "Số tiền được thêm vào trên mỗi sản phẩm nếu có (hoa hồng,...)",
            "type": "string",
            "format": "decimal"
          },
          "addReason": {
            "description": "Lý do thêm tiền",
            "type": "string"
          },
          "price": {
            "description": "Tổng tiền trên một sản phẩm đã cộng tiền, trừ tiền và đã tính thuế",
            "type": "string",
            "format": "decimal"
          },
          "warranty": {
            "description": "Số tháng bảo hành",
            "type": "integer"
          },
          "rowTotal": {
            "description": "Tổng tiền trên dòng (quantity x price)",
            "type": "string",
            "format": "decimal"
          },
          "unitPriceBeforeTax": {
            "description": "Giá trước thuế trên một đơn vị sản phẩm",
            "type": "string",
            "format": "decimal"
          },
          "sellerId": {
            "description": "Người bán hàng",
            "type": "integer"
          }
        }
      },
      "OrderCreateShippingInfo": {
        "type": "object",
        "description": "Thông tin giao hàng.\n\nBắt buộc với khi thỏa một trong các điều kiện là \n- service[].delivery = true\n- service[].delivery = false && channel là Online/Agent\n",
        "required": [
          "name",
          "phone",
          "expectedDate",
          "address",
          "wardId",
          "districtId",
          "provinceId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Tên khách hàng"
          },
          "phone": {
            "type": "string",
            "description": "Số điện thoại"
          },
          "expectedDate": {
            "type": "string",
            "format": "iso8601",
            "description": "Ngày giờ mong muốn nhận hàng"
          },
          "address": {
            "type": "string",
            "description": "Địa chỉ"
          },
          "wardId": {
            "type": "string",
            "description": "Mã phường xã"
          },
          "districtId": {
            "type": "string",
            "description": "Mã quận huyện"
          },
          "provinceId": {
            "type": "string",
            "description": "Mã tỉnh thành"
          },
          "country": {
            "type": "string",
            "description": "Quốc gia"
          },
          "type": {
            "type": "integer",
            "description": "Loại giao hàng"
          },
          "note": {
            "type": "string",
            "description": "Ghi chú đơn hàng"
          },
          "email": {
            "type": "string",
            "description": "Email"
          },
          "lat": {
            "type": "number",
            "format": "double",
            "description": "Kinh độ"
          },
          "lon": {
            "type": "number",
            "format": "double",
            "description": "Vĩ độ"
          },
          "storeCode": {
            "type": "string",
            "description": "Mã showroom nhận hàng"
          }
        }
      },
      "OrderDetail": {
        "required": [
          "id",
          "code",
          "createdAt",
          "updatedAt",
          "state",
          "customer",
          "items",
          "terminal",
          "channel",
          "service",
          "grandTotal",
          "creator",
          "sellerId"
        ],
        "properties": {
          "id": {
            "description": "Mã đơn hàng",
            "type": "string",
            "format": "uuid",
            "example": "00273466-7be7-46d3-8566-f050b405ca26",
            "nullable": false,
            "minLength": 40,
            "maxLength": 40
          },
          "code": {
            "description": "Mã hiển thị của đơn hàng",
            "type": "string",
            "example": "19515OB223",
            "nullable": false,
            "minLength": 1
          },
          "originalId": {
            "description": "Mã của đơn hàng gốc",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "minLength": 1
          },
          "createdAt": {
            "description": "Thời gian tạo đơn",
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "updatedAt": {
            "description": "Thời gian tạo đơn",
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "state": {
            "description": "Trạng thái hiện tại của đơn hàng",
            "type": "integer",
            "example": 0,
            "nullable": false
          },
          "salesman": {
            "description": "Thông tin nhân viên bán hàng. Bắt buộc theo kênh bán hàng:\n- Kênh Online: không bắt buộc.\n- Kênh đại lý: không bắt buộc.\n- Showroom: bắt buộc.\n",
            "$ref": "#/components/schemas/OrderOperator"
          },
          "customer": {
            "description": "Thông tin khách hàng",
            "$ref": "#/components/schemas/Customer",
            "nullable": false
          },
          "items": {
            "description": "Thông tin chi tiết các dòng hàng",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FullItem"
            },
            "nullable": false,
            "minLength": 1
          },
          "note": {
            "description": "Thông tin ghi chú của đơn hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Gọi điện trước khi giao hàng"
          },
          "terminal": {
            "$ref": "#/components/schemas/OrderTerminal",
            "nullable": false
          },
          "channel": {
            "$ref": "#/components/schemas/OrderChannel",
            "nullable": false
          },
          "totalDiscount": {
            "description": "Giảm giá trên tổng đơn (không phải tổng giảm giá)",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": "10000"
          },
          "inventoryCode": {
            "description": "Mã kho xuất hàng hóa.",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "example": "CH0000"
          },
          "service": {
            "$ref": "#/components/schemas/OrderService",
            "nullable": false
          },
          "shippingInfo": {
            "$ref": "#/components/schemas/OrderShippingInfo",
            "nullable": true
          },
          "referralCode": {
            "description": "Mã người giới thiệu (nếu có)",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "example": "9999"
          },
          "payments": {
            "description": "Thông tin thanh toán của đơn hàng",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPayment"
            }
          },
          "billingInfo": {
            "$ref": "#/components/schemas/BillingInfo"
          },
          "invoice": {
            "$ref": "#/components/schemas/OrderInvoice"
          },
          "grandTotal": {
            "description": "Tổng tiền trên đơn, giá trị cuối cùng.",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "example": "200000"
          },
          "creator": {
            "description": "Thông tin người tạo đơn hàng.",
            "$ref": "#/components/schemas/OrderOperator"
          },
          "confirmer": {
            "description": "Thông tin người xác nhận đơn hàng nếu đơn hàng có sự xác nhận.",
            "$ref": "#/components/schemas/OrderOperator"
          },
          "locker": {
            "description": "Thông tin của người đang giữ quyền thay đổi đơn.",
            "$ref": "#/components/schemas/OrderOperator"
          },
          "cancelRequests": {
            "description": "Thông tin yêu cầu hủy",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCancelRequest"
            }
          },
          "revertRequests": {
            "description": "Thông tin yêu cầu hoàn hàng (trả hàng trước khi giao cho khách)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderRevertRequest"
            }
          },
          "returnRequests": {
            "description": "Thông tin yêu cầu trả hàng (trả hàng sau khi giao cho khách)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderReturnRequest"
            }
          },
          "imported": {
            "description": "Thông tin của các phiếu nhập hàng.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderImported"
            }
          },
          "memberCard": {
            "description": "Thông tin thẻ thành viên của khách hàng (nếu có)",
            "type": "string",
            "nullable": false,
            "minLength": 1
          },
          "sellerId": {
            "description": "Mã của doanh nghiệp, người bán hàng.",
            "type": "integer",
            "nullable": false,
            "example": 1
          },
          "opsAssignee": {
            "description": "Thông tin về nhân viên xử lý đơn hàng",
            "$ref": "#/components/schemas/OrderOperator"
          },
          "opsTeam": {
            "description": "Thông tin của team xử lý đơn hàng",
            "$ref": "#/components/schemas/OrderOperatorTeam"
          },
          "promotions": {
            "description": "Chương trình khuyến mãi",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPromotion"
            }
          },
          "approvals": {
            "description": "Danh sách các thông tin duyệt đơn hàng",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderApproval"
            }
          }
        }
      },
      "OrderImported": {
        "description": "Thông tin của các phiếu nhập thu hồi theo đơn",
        "type": "object",
        "required": [
          "importCode",
          "inventoryCode",
          "exportCode",
          "createdAt",
          "isFullReturn",
          "cancelId"
        ],
        "properties": {
          "importCode": {
            "description": "Mã phiếu nhập của WMS",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "d3a287f0-8018-4852-91ed-9f7bc8f614a5"
          },
          "inventoryCode": {
            "description": "Mã kho xuất hàng của WMS",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "CH000"
          },
          "exportCode": {
            "description": "Mã phiếu xuất của WMS",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "29ee776f-dd6c-438d-87c5-c39f6f1dbc12"
          },
          "createdAt": {
            "description": "Thời gian tạo phiếu nhập thu hồi, chuẩn ISO8601",
            "type": "string",
            "format": "date-time",
            "nullable": false
          },
          "isFullReturn": {
            "description": "Nhập hàng toàn phần hay một phần. `True` là nhập hàng toàn phần, `False` là nhập hàng một phần.",
            "type": "boolean",
            "default": false,
            "nullable": false
          },
          "cancelId": {
            "description": "ID của phiếu yêu cầu hủy",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "e8ea0051-92fc-4d93-ab21-8dddcfe2dfc3"
          },
          "items": {
            "description": "Danh sách các món hàng nhập vào.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderImportedItem"
            }
          }
        }
      },
      "OrderImportedItem": {
        "description": "Thông tin các dòng hàng nhập vào",
        "type": "object",
        "required": [
          "lineItemId",
          "sku",
          "quantity",
          "locationCode"
        ],
        "properties": {
          "lineItemId": {
            "description": "ID của chỉ chi tiết dòng hàng",
            "type": "string",
            "format": "uuid",
            "nullable": false,
            "minLength": 1,
            "example": "9a03ea07-6163-4c25-b327-65c45df13419"
          },
          "sku": {
            "description": "Mã sản phẩm",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "19000002"
          },
          "quantity": {
            "description": "Số lượng nhập vào",
            "type": "integer",
            "nullable": false,
            "example": 2
          },
          "locationCode": {
            "description": "Vị trí nhập hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1
          }
        }
      },
      "OrderInvoice": {
        "description": "Thông tin đã xuất hóa đơn của đơn hàng",
        "type": "object",
        "required": [
          "name",
          "address",
          "taxCode",
          "type",
          "number"
        ],
        "properties": {
          "name": {
            "description": "Tên của khách hàng trên hóa đơn",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "John Doe"
          },
          "address": {
            "description": "Địa chỉ của khách hàng trên hóa",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "San Francisco"
          },
          "taxCode": {
            "description": "Mã số thuế",
            "type": "string",
            "nullable": false,
            "minLength": 0,
            "example": ""
          },
          "type": {
            "description": "Loại hóa đơn",
            "type": "string",
            "nullable": false,
            "example": "HD"
          },
          "number": {
            "description": "Số hóa đơn",
            "type": "string",
            "nullable": false,
            "minLength": 1
          },
          "printAfter": {
            "description": "In hóa đơn sau bao nhiêu ngày",
            "type": "integer",
            "default": 0,
            "nullable": false
          },
          "printBeforeTaxPrice": {
            "description": "Có in giá trước thuế hay không?",
            "type": "boolean",
            "default": false,
            "nullable": false,
            "example": false
          },
          "issuedBy": {
            "description": "Được cấp bởi hệ thống nào. Ví dụ:\n- `0`: Asia\n- `1`: Thái Sơn\n",
            "type": "integer",
            "nullable": false,
            "example": 0
          },
          "email": {
            "description": "Email nếu muốn nhận hóa đơn điện tử",
            "type": "string",
            "nullable": true,
            "format": "email",
            "example": "john.doe@example.com"
          },
          "phone": {
            "description": "Số điện thoại liên lạc nếu cần.",
            "type": "string",
            "format": "phone",
            "nullable": true
          }
        }
      },
      "OrderOperator": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "ID của người dùng",
            "type": "string",
            "format": "uuid",
            "nullable": false,
            "minLength": 40,
            "maxLength": 40,
            "example": "9a03ea07-6163-4c25-b327-65c45df13419"
          },
          "name": {
            "description": "Tên người dùng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "John Doe"
          },
          "email": {
            "description": "Email",
            "type": "string",
            "format": "email",
            "minLength": 1,
            "example": "john.doe@example.com"
          },
          "phone": {
            "description": "Điện thoại",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "0939xxxxxx"
          },
          "asiaUsername": {
            "description": "Asia Username, dùng để tích hợp hệ thống cũ của Phong Vũ",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "MINHGDD"
          }
        }
      },
      "OrderOperatorTeam": {
        "type": "object",
        "required": [
          "id",
          "name",
          "region"
        ],
        "properties": {
          "id": {
            "description": "ID của team",
            "type": "integer",
            "nullable": false,
            "example": 1
          },
          "name": {
            "description": "Tên của team",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Miền Trung"
          },
          "region": {
            "description": "Mã miền của team",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "central"
          }
        }
      },
      "OrderPayment": {
        "type": "object",
        "description": "Thông tin thanh toán cho đơn.",
        "required": [
          "paymentMethod",
          "amount"
        ],
        "properties": {
          "transactionId": {
            "type": "string",
            "format": "uuid",
            "description": "psTransactionCode nếu có.\nOM tự generate cho các hình thức COD, DEBT, POSTPAID.\n"
          },
          "paymentMethod": {
            "description": "Hình thức thanh toán. \nTham khảo ở https://confluence.teko.vn/pages/viewpage.action?pageId=144048230#IntergrationGuid(new)-II.Danhs%C3%A1chc%C3%A1ch%C3%ACnhth%E1%BB%A9cthanhto%C3%A1n\n",
            "type": "string"
          },
          "paymentDuration": {
            "description": "Thời hạn thanh toán (ngày)\nBắt buộc với paymentMethod = POSTPAID\n",
            "type": "integer",
            "default": 0
          },
          "amount": {
            "description": "Tiền thanh toán",
            "type": "string",
            "format": "decimal",
            "example": "100000.00"
          },
          "debtorId": {
            "description": "Đối tượng chuyển nợ.\nBắt buộc với paymentMethod = DEBT\n",
            "type": "integer"
          },
          "debtorAsiaId": {
            "description": "Asia ID đối tượng chuyển nợ",
            "type": "string"
          },
          "methodName": {
            "description": "Tên HTTT quy định bên Payment service",
            "nullable": true,
            "type": "string"
          },
          "billNumber": {
            "description": "Mã chuẩn chi in khi thanh toán dùng máy quẹt thẻ hoặc mã hợp đồng nếu thanh toán theo trả góp qua công ty tín dụng\nNó có thể coi là mã GD phía đối tác\n",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "vnpay-123"
          },
          "crmStaffId": {
            "description": "\tMã NV (trên hệ thống CRM )thực hiện Gd, có thể là mã NV thu ngân hoặc mã KTV\n  Bắt buộc đối với paymentMethod <> (COD, DEBT, POSTPAID)\ntype: string\nnullable: false\nminLength: 1\nexample: \"9999\"\n"
          }
        }
      },
      "OrderPromotion": {
        "type": "object",
        "required": [
          "id",
          "promotionId",
          "type",
          "applyType",
          "quantity"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "id của chương trình khuyến mãi"
          },
          "promotionId": {
            "type": "string",
            "format": "uuid",
            "description": "Mã uuid của gói khuyến mãi"
          },
          "type": {
            "type": "string",
            "description": "Loại khuyến mãi: promotion, extra, flash_sale"
          },
          "applyType": {
            "type": "string",
            "description": "Hình thức áp dụng: product/combo/order"
          },
          "applyOn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPromotionApplyOnItem"
            },
            "description": "Chi tiết áp dụng cho các dòng đơn hàng. Nếu applyType=order thì không cần truyền lên:"
          },
          "discount": {
            "type": "string",
            "format": "decimal",
            "description": "Số tiền được giảm giá"
          },
          "gifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPromotionGift"
            },
            "description": "Danh sách quà tặng"
          },
          "removedGifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPromotionRemovedGift"
            },
            "description": "Danh sách quà tặng KH không nhận."
          },
          "quantity": {
            "type": "integer",
            "description": "Số lần promotion được apply"
          },
          "vouchers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Danh sách mã chương trình vouchers"
          },
          "coupon": {
            "type": "string",
            "description": "Mã coupon áp dụng cho khuyến mãi"
          }
        }
      },
      "OrderPromotionApplyOnItem": {
        "type": "object",
        "required": [
          "lineItemId",
          "quantity"
        ],
        "properties": {
          "lineItemId": {
            "type": "string",
            "format": "uuid",
            "description": "ID của dòng hàng được áp dụng (trong items)"
          },
          "quantity": {
            "type": "integer",
            "description": "Số lượng được áp dụng"
          }
        }
      },
      "OrderPromotionGift": {
        "type": "object",
        "required": [
          "lineItemId",
          "sku",
          "name",
          "quantity"
        ],
        "properties": {
          "lineItemId": {
            "type": "string",
            "format": "uuid",
            "description": "ID của dòng hàng khuyến mãi"
          },
          "sku": {
            "type": "string",
            "description": "Mã sản phẩm tặng"
          },
          "name": {
            "type": "string",
            "description": "Tên sản phẩm tặng"
          },
          "quantity": {
            "type": "integer",
            "description": "Số lượng sản phẩm tặng cho một lần áp dụng"
          }
        }
      },
      "OrderPromotionRemovedGift": {
        "type": "object",
        "required": [
          "sku",
          "quantity"
        ],
        "properties": {
          "sku": {
            "type": "string",
            "description": "Mã sản phẩm"
          },
          "quantity": {
            "type": "integer",
            "description": "Số lượng sản phẩm tặng KH không nhận"
          }
        }
      },
      "OrderReturnRequest": {
        "description": "Thông tin của các yêu cầu trả hàng",
        "required": [
          "id",
          "reason",
          "state",
          "fullReturn",
          "isApproved",
          "approvedBy",
          "newCODAmount",
          "newGrandTotal",
          "inventoryCode",
          "createdBy",
          "createdAt"
        ],
        "properties": {
          "id": {
            "description": "Mã yêu cầu trả hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "d3a287f0-8018-4852-91ed-9f7bc8f614a5"
          },
          "reason": {
            "description": "Lý do hoàn hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Khách đổi ý"
          },
          "state": {
            "description": "Trạng thái yêu cầu hủy đơn",
            "type": "string",
            "nullable": false,
            "example": "CANCELLED",
            "minLength": 1
          },
          "fullReturn": {
            "description": "Hoàn hết toàn bộ đơn hay một phần",
            "type": "boolean",
            "nullable": false,
            "default": false
          },
          "isApproved": {
            "description": "Trạng thái đã được duyệt trả hàng hay chưa?",
            "type": "boolean",
            "default": false
          },
          "approvedBy": {
            "description": "Thông tin người duyệt",
            "$ref": "#/components/schemas/OrderOperator"
          },
          "note": {
            "description": "Ghi chú",
            "type": "string",
            "nullable": false,
            "minLength": 1
          },
          "items": {
            "description": "Thông tin hàng được hoàn",
            "type": "array",
            "items": {
              "required": [
                "lineItemId",
                "sku",
                "quantity"
              ],
              "properties": {
                "lineItemId": {
                  "description": "ID của chỉ chi tiết dòng hàng",
                  "type": "string",
                  "format": "uuid",
                  "nullable": false,
                  "minLength": 1,
                  "example": "9a03ea07-6163-4c25-b327-65c45df13419"
                },
                "sku": {
                  "description": "Mã sản phẩm",
                  "type": "string",
                  "nullable": false,
                  "minLength": 1,
                  "example": "19000002"
                },
                "quantity": {
                  "description": "Số lượng",
                  "type": "integer",
                  "nullable": false,
                  "example": 2
                }
              }
            }
          },
          "newCODAmount": {
            "description": "Giá trị COD sau khi hoàn hàng, tính từ phía client",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": 1000000
          },
          "newGrandTotal": {
            "description": "Giá trị của tổng đơn sau khi hoàn hàng, tính từ phía client",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": 1000000
          },
          "inventoryCode": {
            "description": "Kho nhập hàng thu hồi",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "CH0000"
          },
          "createdBy": {
            "description": "Thông tin người thực hiện yêu cầu hủy",
            "nullable": false,
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "description": "ID của người dùng/hệ thống yêu cầu",
                "nullable": false,
                "type": "string",
                "minLength": 1,
                "example": "ID-001"
              },
              "name": {
                "description": "Tên của người dùng/hệ thống yêu cầu",
                "nullable": false,
                "type": "string",
                "minLength": 1,
                "example": "System 001"
              }
            }
          },
          "createdAt": {
            "description": "Thời gian tạo yêu cầu",
            "nullable": false,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrderRevertRequest": {
        "description": "Thông tin của các yêu cầu hoàn hàng",
        "required": [
          "id",
          "reason",
          "state",
          "fullReturn",
          "newCODAmount",
          "newGrandTotal",
          "inventoryCode",
          "createdBy",
          "createdAt"
        ],
        "properties": {
          "id": {
            "description": "Mã yêu cầu hoàn hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "d3a287f0-8018-4852-91ed-9f7bc8f614a5"
          },
          "reason": {
            "description": "Lý do hoàn hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Khách đổi ý"
          },
          "state": {
            "description": "Trạng thái yêu cầu hủy đơn",
            "type": "string",
            "nullable": false,
            "example": "CANCELLED",
            "minLength": 1
          },
          "fullReturn": {
            "description": "Hoàn hết toàn bộ đơn hay một phần",
            "type": "boolean",
            "nullable": false,
            "default": false
          },
          "items": {
            "description": "Thông tin hàng được hoàn",
            "type": "array",
            "items": {
              "required": [
                "lineItemId",
                "sku",
                "quantity"
              ],
              "properties": {
                "lineItemId": {
                  "description": "ID của chỉ chi tiết dòng hàng",
                  "type": "string",
                  "format": "uuid",
                  "nullable": false,
                  "minLength": 1,
                  "example": "9a03ea07-6163-4c25-b327-65c45df13419"
                },
                "sku": {
                  "description": "Mã sản phẩm",
                  "type": "string",
                  "nullable": false,
                  "minLength": 1,
                  "example": "19000002"
                },
                "quantity": {
                  "description": "Số lượng",
                  "type": "integer",
                  "nullable": false,
                  "example": 2
                }
              }
            }
          },
          "newCODAmount": {
            "description": "Giá trị COD sau khi hoàn hàng, tính từ phía client",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": 1000000
          },
          "newGrandTotal": {
            "description": "Giá trị của tổng đơn sau khi hoàn hàng, tính từ phía client",
            "type": "string",
            "format": "decimal",
            "nullable": false,
            "minLength": 1,
            "example": 1000000
          },
          "inventoryCode": {
            "description": "Kho nhập hàng thu hồi",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "CH0000"
          },
          "createdBy": {
            "description": "Thông tin người thực hiện yêu cầu hủy",
            "nullable": false,
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "description": "ID của người dùng/hệ thống yêu cầu",
                "nullable": false,
                "type": "string",
                "minLength": 1,
                "example": "ID-001"
              },
              "name": {
                "description": "Tên của người dùng/hệ thống yêu cầu",
                "nullable": false,
                "type": "string",
                "minLength": 1,
                "example": "System 001"
              }
            }
          },
          "createdAt": {
            "description": "Thời gian tạo yêu cầu",
            "nullable": false,
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrderService": {
        "type": "object",
        "description": "Dịch vụ theo đơn",
        "properties": {
          "installation": {
            "description": "Có lắp đặt",
            "type": "boolean"
          },
          "technicalSupport": {
            "description": "Có hỗ trợ kỹ thuật",
            "type": "boolean"
          },
          "delivery": {
            "description": "Có giao hàng",
            "type": "boolean"
          }
        }
      },
      "OrderShippingInfo": {
        "type": "object",
        "description": "Thông tin giao hàng",
        "required": [
          "name",
          "phone",
          "expectedDate",
          "address",
          "wardId",
          "districtId",
          "provinceId"
        ],
        "properties": {
          "name": {
            "description": "Tên khách nhận hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Giã Dương Đức Minh"
          },
          "phone": {
            "description": "Số điện thoại nhận hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1
          },
          "expectedDate": {
            "description": "Thời gian mong muốn nhận hàng",
            "type": "string",
            "format": "date-time"
          },
          "address": {
            "description": "Địa chỉ nhận hàng chi tiết",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Số 17, đuờng Bà Huyện Thanh Quan"
          },
          "wardId": {
            "description": "Mã phuờng xã",
            "type": "string",
            "example": "790306"
          },
          "districtId": {
            "description": "Mã quận huyện",
            "type": "string",
            "example": "7903"
          },
          "provinceId": {
            "description": "Mã tỉnh thành",
            "type": "string",
            "example": "79"
          },
          "country": {
            "description": "Mã quốc gia",
            "type": "string",
            "default": "VN",
            "example": "VN"
          },
          "type": {
            "description": "Loại giao hàng",
            "type": "integer",
            "example": 0
          },
          "note": {
            "description": "Ghi chú khi giao hàng",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "example": "Giao hàng cho lễ tân."
          },
          "email": {
            "description": "Email của người nhận hàng hoặc email liên lạc.",
            "type": "string",
            "format": "email",
            "nullable": false,
            "example": "minh.gdd@teko.vn"
          },
          "lat": {
            "description": "Kinh độ",
            "type": "number",
            "format": "float"
          },
          "lon": {
            "description": "Vĩ độ",
            "type": "number",
            "format": "float"
          }
        }
      },
      "OrderTerminal": {
        "type": "object",
        "description": "Thông tin Địa điểm bán hàng",
        "required": [
          "code",
          "name"
        ],
        "properties": {
          "code": {
            "description": "Mã của Địa điểm bán hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "CP01"
          },
          "name": {
            "description": "Tên của địa điểm bán hàng",
            "type": "string",
            "nullable": false,
            "minLength": 1,
            "example": "Chi nhánh bán hàng Phong Vũ"
          },
          "region": {
            "description": "Mã phân vùng",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "enum": [
              "northern",
              "central",
              "southern"
            ]
          },
          "provinceCode": {
            "description": "Mã tỉnh thành",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "example": "79"
          },
          "districtCode": {
            "description": "Mã quận huyện",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "example": "7907"
          },
          "wardCode": {
            "description": "Mã phuờng xã",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "example": "790705"
          },
          "address": {
            "description": "Địa chỉ cụ thể",
            "type": "string",
            "nullable": true,
            "minLength": 1,
            "example": "Số 9-11 Nguyễn Thị Thập, Phường Tân Phú , Quận 7"
          }
        }
      },
      "BannerDetail": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id của banner",
            "example": 1
          },
          "campaign_name": {
            "type": "string",
            "description": "Tên của chiến dịch",
            "example": "Khai giảng"
          },
          "image": {
            "type": "string",
            "description": "Địa chỉ url của ảnh banner",
            "example": "https://pagebuilder-dev.phongvu.vn/static/page-builder/images/1/1571215596.7829936_02.Product_00_AllProducts_Premium_large.png"
          },
          "priority": {
            "type": "string",
            "description": "Vị trí ưu tiên của các banner trong loại banner, độ ưu tiên cao nhất là 1",
            "example": 1
          },
          "zone": {
            "type": "integer",
            "description": "Mã code mô tả nơi vị trí các banner được đặt",
            "example": "homepage-top-100100"
          },
          "sale_categories": {
            "type": "array",
            "nullable": true,
            "description": "Mã code của sale_categories, nếu trang hiện thị của banner type là \"Home\" hoặc \"Landing\" thì giá trị sẽ là null còn ngược lại sẽ là các mã code phân cách nhau bởi dấu phẩy",
            "items": {
              "type": "integer",
              "example": 1
            }
          },
          "start_date": {
            "type": "string",
            "description": "Thời điểm bắt đầu chiến dịch",
            "example": "2019-10-25T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Thời điểm kết thúc chiến dịch",
            "example": "2019-10-26T00:00:00.000Z"
          },
          "description": {
            "type": "string",
            "description": "Mô tả",
            "example": null,
            "nullable": true
          },
          "target_path": {
            "type": "string",
            "description": "Đối tượng hướng đến của URL của Web",
            "example": "attributeSets=342,60&brands=TH000334,TH000036"
          },
          "action": {
            "type": "object",
            "description": "Dành cho mobile",
            "properties": {
              "trigger": {
                "type": "string",
                "enum": [
                  "onClick"
                ],
                "example": "onClick"
              },
              "type": {
                "type": "string",
                "enum": [
                  "goto"
                ],
                "example": "goto"
              },
              "target": {
                "type": "string",
                "example": "product-listing"
              },
              "extra": {
                "type": "array",
                "description": "Dữ liệu chi tiết",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "config_name": {
                      "type": "string",
                      "enum": [
                        "brands",
                        "categories",
                        "SKU",
                        "attribute_sets",
                        "price",
                        "sale_categories",
                        "attribute"
                      ],
                      "example": "brands"
                    },
                    "attribute_id": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Có giá trị null khi config name không phải là attribute",
                      "example": null
                    },
                    "values_ids": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "example": 1
                      }
                    },
                    "value_codes": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "TH000334"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PageBuilderError": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "mã kết quả"
          },
          "message": {
            "type": "string",
            "description": "tin nhắn thông báo"
          }
        }
      },
      "CreatePaymentRes": {
        "required": [
          "status",
          "terminalCode",
          "serviceCode",
          "asiaStaffId",
          "crmStaffId",
          "orderId",
          "methods",
          "checksum"
        ],
        "properties": {
          "clientCode": {
            "type": "string",
            "description": "Code for client to connect to Payment service",
            "example": "ABC123XYZ"
          },
          "psTransactionCode": {
            "type": "string",
            "description": "Code of transaction",
            "example": "QHR7349"
          },
          "terminalCode": {
            "type": "string",
            "description": "Branch/terminal code of the order",
            "example": "PV009"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service code in Payment service. In this case, this is retail service",
            "example": "RETAIL"
          },
          "orderId": {
            "type": "string",
            "description": "Order id in OM system",
            "example": "17123456AXDF93483"
          },
          "orderCode": {
            "type": "string",
            "description": "Order code in OM system",
            "example": "17123456"
          },
          "grandTotal": {
            "type": "number",
            "description": "Total paid of the order",
            "example": 10500000
          },
          "status": {
            "type": "string",
            "description": "Response message. SUCCESS if all payment methods are valid else FAILURE",
            "enum": [
              "SUCCESS",
              "FAILURE"
            ],
            "example": "SUCCESS"
          },
          "message": {
            "type": "string",
            "description": "desciption of status",
            "example": "Thành công"
          },
          "methods": {
            "type": "array",
            "description": "Available payment methods",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodCheckResMethodArray"
            }
          }
        }
      },
      "OrderHistoryPaymentRes": {
        "properties": {
          "clientCode": {
            "type": "string",
            "description": "Client code"
          },
          "orderId": {
            "type": "string",
            "description": "Order id"
          },
          "transactions": {
            "type": "array",
            "items": {
              "properties": {
                "psTransactionCode": {
                  "type": "string",
                  "description": "transaction code in Payment service"
                },
                "agentCode": {
                  "type": "string",
                  "description": "Code of Agent that request payment such as Phong Vu, Vnshop"
                },
                "agentName": {
                  "type": "string",
                  "description": "Name of Agent that request payment such as Phong Vu, Vnshop"
                },
                "channelCode": {
                  "type": "string",
                  "description": "channel code that request payment such as phongvu_online, vnshop_online"
                },
                "channelName": {
                  "type": "string",
                  "description": "channel name that request payment such as phongvu_online, vnshop_online"
                },
                "serviceCode": {
                  "type": "string",
                  "description": "service code of the transaction to request payment such as Retail"
                },
                "serviceName": {
                  "type": "string",
                  "description": "service name of the transaction to request payment such as Dịch vụ bán lẻ"
                },
                "orderId": {
                  "type": "string",
                  "description": "ID of the order in payment transaction"
                },
                "orderCode": {
                  "type": "string",
                  "description": "Code of the order in payment transaction"
                },
                "terminalCode": {
                  "type": "string",
                  "description": "terminal code that make  payment request"
                },
                "terminalName": {
                  "type": "string",
                  "description": "terminal name that make  payment request"
                },
                "partnerCode": {
                  "type": "string",
                  "description": "partner code of the payment transaction such as VNPAY, Alepay"
                },
                "partnerName": {
                  "type": "string",
                  "description": "partner name of the payment transaction such as VNPAY, Alepay"
                },
                "methodCode": {
                  "type": "string",
                  "description": "method code of the payment transaction such as CTT, QRcode, Installment"
                },
                "methodName": {
                  "type": "string",
                  "description": "method code of the payment transaction such as Cổng thanh toán , Trả góp"
                },
                "amount": {
                  "type": "integer",
                  "description": "paid amount in payment transaction"
                },
                "status": {
                  "type": "string",
                  "description": "status of transaction such as PENDING, FAILURE, SUCCESS"
                },
                "statusName": {
                  "type": "string",
                  "description": "description of status"
                },
                "psResponseCode": {
                  "type": "string",
                  "description": "the response code from payment service"
                },
                "psResponseMessage": {
                  "type": "string",
                  "description": "the response message from payment service"
                },
                "currency": {
                  "type": "string",
                  "description": "currency of the payment transaction"
                },
                "cardNumber": {
                  "type": "string",
                  "description": "card number of customer to make payment"
                },
                "paymentTerm": {
                  "type": "integer",
                  "description": "installment term if customer use installment method"
                },
                "bankCode": {
                  "type": "string",
                  "description": "bank code of transaction that customer use to make payment"
                },
                "bankName": {
                  "type": "string",
                  "description": "bank name of transaction that customer use to make payment"
                },
                "orderDescription": {
                  "type": "string",
                  "description": "order description"
                },
                "cardType": {
                  "type": "string",
                  "description": "card type of transaction that customer use to make payment such as ATM, VISA..."
                },
                "bankHotline": {
                  "type": "string",
                  "description": "hot line of customer's bank"
                },
                "partnerTransactionCode": {
                  "type": "string",
                  "description": "the transaction code of payment partner (Vnpay, Alepay)"
                },
                "clientTransactionCode": {
                  "type": "string",
                  "description": "the transaction code from client"
                },
                "clientRequestTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "client request time to payment service"
                },
                "clientResponseTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "time payment service response  to client"
                },
                "psRequestTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "time ps make request to partner"
                },
                "psResponseTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "time partner reply to ps"
                }
              }
            }
          }
        }
      },
      "OrderItem": {
        "required": [
          "sku",
          "quantity",
          "unitPrice",
          "price"
        ],
        "properties": {
          "sku": {
            "type": "string",
            "description": "Sku of this item",
            "example": "183620"
          },
          "name": {
            "type": "string",
            "description": "Name of SKU",
            "example": "Laptop LG Gram"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of this item",
            "example": 2
          },
          "unitPrice": {
            "type": "number",
            "format": "double",
            "description": "Price per unit",
            "example": 25000000
          },
          "price": {
            "type": "number",
            "format": "double",
            "description": "Price of all items. Usually, price = quantity*unit_price-promotion_price. If this field is null or empty, payment service will not check this item for rules or other info",
            "example": 50000000
          }
        }
      },
      "PaymentBusinessError": {
        "required": [
          "type",
          "code",
          "message"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "DataConstrain"
          },
          "code": {
            "type": "integer",
            "example": 898
          },
          "message": {
            "type": "string",
            "example": "Order is not existed"
          }
        }
      },
      "PaymentError": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "IP is not allowed to connect"
          },
          "error": {
            "$ref": "#/components/schemas/PaymentBusinessError"
          }
        }
      },
      "PaymentForbiddenError": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "example": 403
          },
          "message": {
            "type": "string",
            "example": "Access denied"
          }
        }
      },
      "PaymentInstallmentRes": {
        "properties": {
          "bankCode": {
            "type": "string",
            "description": "Bank code",
            "example": "VCB"
          },
          "bankName": {
            "type": "string",
            "description": "Bank name",
            "example": "Vietcombank"
          },
          "paymentMethods": {
            "type": "array",
            "description": "List of payment methods are suitable",
            "items": {
              "properties": {
                "paymentMethod": {
                  "type": "string",
                  "description": "Payment method code",
                  "example": "VISA"
                },
                "periods": {
                  "type": "array",
                  "description": "List of periods are suitable",
                  "items": {
                    "properties": {
                      "paymentTerm": {
                        "type": "integer",
                        "description": "Installment months",
                        "example": 12
                      },
                      "amountFee": {
                        "type": "number",
                        "format": "double",
                        "description": "Total fee amount",
                        "example": 5000
                      },
                      "amountFinal": {
                        "type": "number",
                        "format": "double",
                        "description": "Total amount = amount + amountFee",
                        "example": 1005000
                      },
                      "amountByMonth": {
                        "type": "number",
                        "format": "double",
                        "description": "Amount must paid monthly",
                        "example": 100000
                      },
                      "payerFlatFee": {
                        "type": "number",
                        "format": "double",
                        "description": "Info from Alepay",
                        "example": 0
                      },
                      "payerPercentFee": {
                        "type": "number",
                        "format": "double",
                        "description": "Info from Alepay",
                        "example": 1.5
                      },
                      "payerInstallmentFlatFee": {
                        "type": "number",
                        "format": "double",
                        "description": "Info from Alepay",
                        "example": 2000
                      },
                      "payerInstallmentPercentFee": {
                        "type": "number",
                        "format": "double",
                        "description": "Info from Alepay",
                        "example": 1
                      },
                      "currency": {
                        "type": "string",
                        "description": "Currency code",
                        "example": "VND"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PaymentMethodCartReq": {
        "required": [
          "clientCode",
          "terminalCode",
          "serviceCode",
          "orderItems",
          "grandTotal",
          "checksum"
        ],
        "properties": {
          "clientCode": {
            "type": "string",
            "description": "Code for client to connect to Payment service. PS provide this code to client before deploying",
            "example": "PHONGVU01"
          },
          "terminalCode": {
            "type": "string",
            "description": "Branch/terminal code create the cart or process order, receipts in POS channel",
            "example": "CP09"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service code in Payment service, for examples: Retail, payment for electric, water service. With Phong Vu, this is the retail",
            "example": "RETAIL"
          },
          "cartId": {
            "type": "string",
            "description": "ID of cart in merchant system",
            "example": "19ZXR20"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "Items of this order"
          },
          "grandTotal": {
            "type": "number",
            "format": "double",
            "description": "Total money must pay for this order",
            "example": 2500000
          },
          "checksum": {
            "type": "string",
            "description": "Secret string encrypted by secret key and all parameters for checksum",
            "example": "4fb75072afc5bc29ad00f71a11c127d9"
          }
        },
        "type": "object"
      },
      "PaymentMethodCartRes": {
        "properties": {
          "clientCode": {
            "type": "string",
            "description": "Code for client to get list payment method for the cart",
            "example": "ABC123XYZ"
          },
          "terminalCode": {
            "type": "string",
            "description": "Branch/terminal code create the cart or process order, receive in POS channel",
            "example": "CP09"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service code in Payment service, for examples: Retail, payment for electric, water service. With Phong Vu, this is the retail",
            "example": "RETAIL"
          },
          "cartId": {
            "type": "string",
            "description": "ID of cart in merchant system",
            "example": "19ZXR20"
          },
          "grandTotal": {
            "type": "number",
            "format": "double",
            "description": "Total money must pay for this order",
            "example": 2500000
          },
          "methods": {
            "type": "array",
            "description": "List of payment methods are suitable for the cart",
            "items": {
              "properties": {
                "methodCode": {
                  "type": "string",
                  "description": "Payment method code",
                  "example": "QRcode"
                },
                "methodName": {
                  "type": "string",
                  "description": "Payment method's name",
                  "example": "QR code"
                },
                "partnerCode": {
                  "type": "string",
                  "description": "code of payment partner",
                  "example": "VNPAY"
                },
                "partnerName": {
                  "type": "string",
                  "description": "Name of payment partner",
                  "example": "Công ty thanh toán quốc gia Việt Nam"
                },
                "paymentTerms": {
                  "description": "available terms to pay for installment/installment credit method",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "type": {
                  "type": "string",
                  "description": "Its value is 0,1,2 . 2 mean Payment service must connect to partner system to make payment, 0 mean internal payment method, 1 mean postpaid method such as COD, postpaid, debt",
                  "example": 1
                }
              }
            }
          }
        }
      },
      "PaymentMethodCheckReq": {
        "required": [
          "clientCode",
          "terminalCode",
          "serviceCode",
          "grandTotal",
          "methods",
          "checksum"
        ],
        "properties": {
          "clientCode": {
            "type": "string",
            "description": "Code for client to connect to Payment service. PS provide this code to client before deploying",
            "example": "PHONGVU01"
          },
          "terminalCode": {
            "type": "string",
            "description": "Branch/terminal code of the order",
            "example": "CP09"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service code in Payment service, for examples: Retail, payment for electric, water service. With Phong Vu, this is the retail",
            "example": "RETAIL"
          },
          "orderId": {
            "type": "string",
            "description": "orderID to make payment. It is on OM system if service code is RETAIL",
            "example": "19ZXR20"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "Items of this order"
          },
          "grandTotal": {
            "type": "number",
            "format": "double",
            "description": "Total money must pay for this order",
            "example": 2500000
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodReq"
            },
            "description": "Methods need to check"
          },
          "checksum": {
            "type": "string",
            "description": "Secret string encrypted by secret key and all parameters for checksum",
            "example": "4fb75072afc5bc29ad00f71a11c127d9"
          }
        },
        "type": "object"
      },
      "PaymentMethodCheckRes": {
        "properties": {
          "clientCode": {
            "type": "string",
            "description": "Code for client to connect to Payment service",
            "example": "ABC123XYZ"
          },
          "terminalCode": {
            "type": "string",
            "description": "Branch/terminal code of the order",
            "example": "PV009"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service code in Payment service. In this case, this is retail service",
            "example": "RETAIL"
          },
          "orderId": {
            "type": "string",
            "description": "Order code in OM system",
            "example": "17123456"
          },
          "grandTotal": {
            "type": "number",
            "description": "Total paid of the order",
            "example": 10500000
          },
          "methods": {
            "type": "array",
            "description": "Available payment methods",
            "items": null,
            "$ref": "#/components/schemas/PaymentMethodCheckResMethodArray"
          }
        }
      },
      "PaymentMethodCheckResMethodArray": {
        "properties": {
          "billNumber": {
            "type": "string",
            "description": "It is partner's transaction Code if paid by POS, INSTALLMENT_CREDIT or contractNo if paid by INSTALLMENT. It is required if paid by POS, INSTALLMENT_CREDIT, INSTALLMENT",
            "example": "ABC123"
          },
          "methodCode": {
            "type": "string",
            "description": "Code of method defined in Payment service",
            "example": "QRCODE"
          },
          "methodName": {
            "type": "string",
            "description": "name of payment method defined in Payment service",
            "example": "Thanh toán QRcode động"
          },
          "partnerCode": {
            "type": "string",
            "description": "Code of payment method defined in Payment service",
            "example": "VNPAY"
          },
          "partnerName": {
            "type": "string",
            "description": "name of payment partner defined in Payment service",
            "example": "Công ty thanh toán quốc gia Việt Nam"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount of money pays for this partner and method",
            "example": 100000
          },
          "paymentTerm": {
            "type": "integer",
            "description": "Months for installment term (Required if payment method is installment)",
            "example": 6
          },
          "bankCode": {
            "type": "string",
            "description": "Code of bank (Required if method code is INSTALLMENT_CREDIT)",
            "example": "VCB"
          },
          "custNameCard": {
            "type": "string",
            "description": "Customer name on card using to pay, it is required if paid by INSTALLMENT_CREDIT",
            "example": "Nguyen Van A"
          },
          "cardNo": {
            "type": "string",
            "description": "It is only 6 first number and 4 last numbers of card No, format 548566...1234, required if paid by INSTALLMENT_CREDIT",
            "example": "548566...1234"
          },
          "responseCode": {
            "type": "string",
            "description": "Response code of this payment method. 000 is successfull, else failed",
            "example": "000"
          },
          "responseMessage": {
            "type": "string",
            "description": "The detail response message of this payment method",
            "example": "Success"
          }
        }
      },
      "PaymentMethodReq": {
        "required": [
          "methodCode",
          "partnerCode",
          "amount"
        ],
        "properties": {
          "methodCode": {
            "type": "string",
            "description": "Code of method defined in Payment service",
            "example": "QRCODE"
          },
          "partnerCode": {
            "type": "string",
            "description": "Code of payment method defined in Payment service",
            "example": "VNPAY"
          },
          "billNumber": {
            "type": "string",
            "description": "It is partner's transaction Code if paid by POS, INSTALLMENT_CREDIT or contractNo if paid by INSTALLMENT. It is required if paid by POS, INSTALLMENT_CREDIT, INSTALLMENT",
            "example": "12346799"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount of money pays for this partner and method",
            "example": 100000
          },
          "paymentTerm": {
            "type": "integer",
            "description": "Months for installment term (Required if payment method is installment)",
            "example": 6
          },
          "bankCode": {
            "type": "string",
            "description": "Code of bank (Required if method code is INSTALLMENT_CREDIT)",
            "example": "VCB"
          },
          "custNameCard": {
            "type": "string",
            "description": "Customer name on card using to pay, it is required if paid by INSTALLMENT_CREDIT",
            "example": "Nguyen Van A"
          },
          "cardNo": {
            "type": "string",
            "description": "It is only 6 first number and 4 last numbers of card No, format 548566...1234, required if paid by INSTALLMENT_CREDIT",
            "example": "548566...1234"
          }
        }
      },
      "PaymentMethodWithTransReq": {
        "required": [
          "methodCode",
          "partnerCode",
          "amount"
        ],
        "properties": {
          "billNumber": {
            "type": "string",
            "description": "It is partner's transaction Code if paid by POS, INSTALLMENT_CREDIT or contractNo if paid by INSTALLMENT. It is required if paid by POS, INSTALLMENT_CREDIT, INSTALLMENT",
            "example": "ABC123"
          },
          "methodCode": {
            "type": "string",
            "description": "Code of method defined in Payment service",
            "example": "QRCODE"
          },
          "partnerCode": {
            "type": "string",
            "description": "Code of payment method defined in Payment service",
            "example": "VNPAY"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount of money pays for this partner and method",
            "example": 100000
          },
          "paymentTerm": {
            "type": "integer",
            "description": "Months for installment term (Required if payment method is installment)",
            "example": 6
          },
          "bankCode": {
            "type": "string",
            "description": "Code of bank (Required if method code is INSTALLMENT_CREDIT)",
            "example": "VCB"
          },
          "custNameCard": {
            "type": "string",
            "description": "Customer name on card using to pay, it is required if paid by INSTALLMENT_CREDIT",
            "example": "Nguyen Van A"
          },
          "cardNo": {
            "type": "string",
            "description": "It is only 6 first number and 4 last numbers of card No, format 548566...1234, required if paid by INSTALLMENT_CREDIT",
            "example": "548566...1234"
          }
        }
      },
      "PaymentMethodWithTransRes": {
        "properties": {
          "clientCode": {
            "type": "string",
            "description": "Code for client to connect to Payment service",
            "example": "ABC123XYZ"
          },
          "branchCode": {
            "type": "string",
            "description": "Branch/terminal code of the order",
            "example": "PV009"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service code in Payment service. In this case, this is retail service",
            "example": "RETAIL"
          },
          "orderId": {
            "type": "string",
            "description": "Order code in OM system",
            "example": "17123456"
          },
          "grandTotal": {
            "type": "number",
            "description": "Total paid of the order",
            "example": 10500000
          },
          "methods": {
            "type": "array",
            "description": "Available payment methods",
            "items": {
              "properties": {
                "billNumber": {
                  "type": "string",
                  "description": "It is partner's transaction Code if paid by POS, INSTALLMENT_CREDIT or contractNo if paid by INSTALLMENT",
                  "example": "ABC123"
                },
                "methodCode": {
                  "type": "string",
                  "description": "Code of method defined in Payment service",
                  "example": "VNPAY_QR"
                },
                "methodName": {
                  "type": "string",
                  "description": "Name of method defined in Payment service",
                  "example": "VNPAY QR code method"
                },
                "partnerCode": {
                  "type": "string",
                  "description": "Code of payment method defined in Payment service",
                  "example": "VNPAY"
                },
                "partnerName": {
                  "type": "string",
                  "description": "Name of method defined in Payment service",
                  "example": "VNPAY company"
                },
                "installmentTerm": {
                  "type": "integer",
                  "description": "Months for installment term",
                  "example": 6
                },
                "bankCode": {
                  "type": "string",
                  "description": "Code of bank",
                  "example": "VCB"
                },
                "bankName": {
                  "type": "string",
                  "description": "Name of bank",
                  "example": "VietComBank"
                },
                "custNameCard": {
                  "type": "string",
                  "description": "Customer name on card using to pay, it is required if paid by INSTALLMENT_CREDIT",
                  "example": "Nguyen Van A"
                },
                "cardNo": {
                  "type": "string",
                  "description": "It is only 6 first number and 4 last numbers of card No, format 548566...1234, required if paid by INSTALLMENT_CREDIT",
                  "example": "548566...1234"
                },
                "responseCode": {
                  "type": "string",
                  "description": "Response code of this payment method. 000 is successfull, else failed",
                  "example": "002"
                },
                "responseMessage": {
                  "type": "string",
                  "description": "The detail response message of this payment method",
                  "example": "Amount is not enough"
                }
              }
            }
          }
        }
      },
      "QrCodeGenerationReq": {
        "required": [
          "clientCode",
          "qrType",
          "terminalCode",
          "expDate",
          "checksum"
        ],
        "properties": {
          "clientCode": {
            "description": "Code for client to connect to Payment service. PS provide this code to client before deploying",
            "type": "string",
            "example": "PHONGVU01"
          },
          "terminalCode": {
            "description": "Branch code/terminal ID that process the order or receipts.",
            "type": "string",
            "example": "CP09"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service code of QR. It is null if QRType=1 and =RETAIL if qrType=2",
            "example": "QR"
          },
          "qrType": {
            "type": "string",
            "enum": [
              "01",
              "02"
            ],
            "description": "QR Type\n- `01-QR sản phẩm`\n- `02-QR đơn hàng`",
            "example": "01"
          },
          "sku": {
            "type": "string",
            "description": "SKU of product want to generate QR code when qrType =01",
            "example": "183620"
          },
          "txnId": {
            "type": "string",
            "description": "Order ID or billing number. With PhongVu merchant and serviceCode=RETAIL, it is not null and it is order ID in OM system",
            "example": "19YTFS20"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount to pay by QR method, it is not null if qrType=2,3",
            "example": 2500000
          },
          "note": {
            "type": "string",
            "description": "additional information",
            "example": "Generate QR code for order payment"
          },
          "expDate": {
            "type": "string",
            "description": "Expire time for QRcode with the format yyMMddHHmm",
            "example": "1908201600"
          },
          "width": {
            "type": "integer",
            "description": "width of QRcode Image, default value=300 if it is null",
            "example": "300"
          },
          "height": {
            "type": "integer",
            "description": "height of QRcode Image, default value=300 if it is null",
            "example": "300"
          },
          "imageType": {
            "type": "string",
            "enum": [
              "binary",
              "image"
            ],
            "description": "type of QR data format, default value=image if it is null",
            "example": "image"
          },
          "imageFormat": {
            "type": "string",
            "enum": [
              "png"
            ],
            "description": "format of Qrcode image, default value=png if it is null",
            "example": "png"
          },
          "checksum": {
            "type": "string",
            "description": "Secret string encrypted by secret key and all parameters for checksum",
            "example": "4fb75072afc5bc29ad00f71a11c127d9"
          }
        },
        "type": "object"
      },
      "QRData": {
        "required": [
          "type",
          "image"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of QR data format if generate sucessfully, client using this data to generate QR",
            "example": "image",
            "enum": [
              "image",
              "binary"
            ]
          },
          "image": {
            "type": "string",
            "description": "Code of transaction",
            "example": "/v1/gen-api/image/type11/4656/41323/2019/7/10/1658678/300x300.png"
          }
        }
      },
      "QRGenerationRes": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/QRData"
          },
          "transactionCode": {
            "type": "string",
            "description": "After generating QR code for order, PS will generate the transaction code and return to client for using to query result if waiting long time",
            "example": "QHR7349"
          }
        }
      },
      "TransactionCreateReq": {
        "required": [
          "clientCode",
          "terminalCode",
          "serviceCode",
          "asiaStaffId",
          "crmStaffId",
          "orderId",
          "methods",
          "checksum"
        ],
        "properties": {
          "clientCode": {
            "description": "Code for client to connect to Payment service. PS provide this code to client before deploying",
            "type": "string",
            "example": "PHONGVU01"
          },
          "terminalCode": {
            "description": "Branch/terminal code of the order",
            "type": "string",
            "example": "CP09"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service of the payment bill such as Retail(sample - Phong vu's Order), telecom bill, Electric...",
            "example": "RETAIL"
          },
          "asiaStaffId": {
            "type": "string",
            "description": "Staff id (in asia system) perform the transaction. PS only forward this infor to OM, LO, not validate the true/false of this ID",
            "example": "50380"
          },
          "crmStaffId": {
            "type": "string",
            "description": "Staff (in CRM system) perform the transaction. PS only forward this infor to OM, LO, not validate the true/false of this ID",
            "example": "50380"
          },
          "clientTransactionCode": {
            "type": "string",
            "description": "Transaction's code of client. This is private code for each client. Payment service support get a transaction by this code. This is unique code in month",
            "example": "19606S11"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID in merchant system. With Phong Vu, It is order Id in OM",
            "example": "19YTFS20"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodWithTransReq"
            },
            "description": "Payment methods of order are paid"
          },
          "addData": {
            "type": "string",
            "description": "Additional information from client",
            "example": "custName: Dau Thi Ngoc anh"
          },
          "checksum": {
            "type": "string",
            "description": "Secret string encrypted by secret key and all parameters for checksum",
            "example": "4fb75072afc5bc29ad00f71a11c127d9"
          }
        },
        "type": "object"
      },
      "TransactionPayReq": {
        "required": [
          "clientCode",
          "terminalCode",
          "serviceCode",
          "clientTransactionCode",
          "amount",
          "returnUrl",
          "clientRequestTime",
          "methodCode",
          "partnerCode",
          "orderId",
          "orderDescription",
          "grandTotal",
          "orderItems",
          "checksum"
        ],
        "properties": {
          "clientCode": {
            "type": "string",
            "description": "Code for client to connect to Payment service",
            "example": "ABC123XYZ"
          },
          "terminalCode": {
            "type": "string",
            "description": "Branch/terminal code of the order",
            "example": "PV009"
          },
          "bankCode": {
            "type": "string",
            "description": "Code of bank",
            "example": "VCB"
          },
          "locale": {
            "type": "string",
            "description": "Payment Service support 2 languages are vn and en, default is vn",
            "example": "vn"
          },
          "currCode": {
            "type": "string",
            "description": "Money unit default is VND",
            "example": "VND"
          },
          "serviceCode": {
            "type": "string",
            "description": "Service code in Payment service. In this case, this is retail service",
            "example": "RETAIL"
          },
          "clientTransactionCode": {
            "type": "string",
            "description": "Code of transaction generated by client",
            "example": "123CPX"
          },
          "installmentMethod": {
            "type": "string",
            "description": "Payment method that Aplepay support, for examples VISA, MASTERCARD",
            "example": "VISA"
          },
          "orderId": {
            "type": "string",
            "description": "Order id in OM system",
            "example": "17123456AXDF93483"
          },
          "orderCode": {
            "type": "string",
            "description": "Order code in OM system",
            "example": "17123456x"
          },
          "orderDescription": {
            "type": "string",
            "description": "Order description",
            "example": "Buy in showroom"
          },
          "grandTotal": {
            "type": "number",
            "description": "Total paid of the order",
            "example": 10500000
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "Items of this order"
          },
          "amount": {
            "type": "number",
            "format": "double",
            "description": "Amount of money need to pay",
            "example": 100000
          },
          "returnUrl": {
            "type": "string",
            "description": "Client'URL that Payment service will return the result of transaction, required if payment_method is CTT(cổng thanh toán)",
            "example": "https://payment.teko.vn/success"
          },
          "cancelUrl": {
            "type": "string",
            "description": "Client's URL to return the result if customer cancel transaction, require with Alepay",
            "example": "https://payment.teko.vn/failure"
          },
          "clientRequestTime": {
            "type": "string",
            "description": "Time of transaction on website merchant GMT+7, with Format yyyyMMddHHmmss",
            "example": 20190518061008
          },
          "paymentTerm": {
            "type": "number",
            "description": "Payment term of installment, required if payment_method is installment",
            "example": 6
          },
          "methodCode": {
            "type": "string",
            "description": "Payment method of transaction such as CTT, installment. This code is define by Payment service",
            "example": "CTT"
          },
          "partnerCode": {
            "type": "string",
            "description": "Payment partner such as Vnpay, alepay...",
            "example": "VNPAY"
          },
          "buyerName": {
            "type": "string",
            "description": "Buyer name",
            "example": "Nguyen Van A"
          },
          "buyerEmail": {
            "type": "string",
            "description": "Buyer email",
            "example": "anv@gmail.com"
          },
          "buyerPhone": {
            "type": "string",
            "description": "Buyer phone",
            "example": "0987654321"
          },
          "buyerAddress": {
            "type": "string",
            "description": "Buyer address",
            "example": "So 1, Thai Ha, Ha Noi"
          },
          "buyerProvince": {
            "type": "string",
            "description": "Buyer province code in category",
            "example": "89"
          },
          "buyerDistrict": {
            "type": "string",
            "description": "Buyer district code in category",
            "example": "8903"
          },
          "paymentHours": {
            "type": "number",
            "description": "payment time available (hour)",
            "example": 2
          },
          "cardType": {
            "type": "number",
            "description": "The payment card type - `0-ATM dosmetic` - `1-international card such as visa, master` - `2-Mobile banking or E-wallet`",
            "example": 2
          }
        }
      },
      "TransactionPayRes": {
        "properties": {
          "url": {
            "type": "string",
            "description": "The Vnpay url for redirection"
          }
        }
      },
      "TransactionRefundReq": {
        "required": [
          "clientCode",
          "amount",
          "reason",
          "asiaStaffId",
          "crmStaffId",
          "staffName",
          "checksum"
        ],
        "properties": {
          "clientCode": {
            "description": "Code for client to connect to Payment service. PS provide this code to client before deploying",
            "type": "string",
            "example": "PHONGVU01"
          },
          "clientTransactionCode": {
            "description": "Code of transaction generated by client",
            "type": "string",
            "example": "123CPX"
          },
          "psTransactionCode": {
            "type": "string",
            "description": "Payment service transaction code",
            "example": "AHFG192D"
          },
          "amount": {
            "type": "integer",
            "description": "Amount of refunding money",
            "example": 100000
          },
          "reason": {
            "type": "string",
            "description": "The reason for refunding",
            "example": "refund"
          },
          "asiaStaffId": {
            "type": "string",
            "description": "ID of operating person in Asia system",
            "example": "123"
          },
          "crmStaffId": {
            "type": "string",
            "description": "ID of operating person in Crm system",
            "example": "123"
          },
          "staffName": {
            "type": "string",
            "description": "Name of operating person",
            "example": "Nguyen Van A"
          },
          "checksum": {
            "type": "string",
            "description": "Secret string encrypted by secret key and all parameters for checksum",
            "example": "4fb75072afc5bc29ad00f71a11c127d9"
          }
        },
        "type": "object"
      },
      "TransactionRefundRes": {
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of response, this is the bussiness code"
          },
          "message": {
            "type": "string",
            "description": "The detail description of response"
          },
          "bankCode": {
            "type": "string",
            "description": "Bank code"
          },
          "channelCode": {
            "type": "string",
            "description": "channel code"
          },
          "clientTransactionCode": {
            "description": "Code of transaction generated by client",
            "type": "string"
          },
          "psTransactionCode": {
            "type": "string",
            "description": "Payment service transaction code"
          },
          "partnerTransactionCode": {
            "type": "string",
            "description": "Payment partner transaction code"
          },
          "checksum": {
            "type": "string",
            "description": "Secret string encrypted by secret key and all parameters for checksum"
          }
        }
      },
      "TransactionRes": {
        "properties": {
          "psTransactionCode": {
            "type": "string",
            "description": "transaction code"
          },
          "agentCode": {
            "type": "string",
            "description": "agent code"
          },
          "agentName": {
            "type": "string",
            "description": "agent name"
          },
          "channelCode": {
            "type": "string",
            "description": "channel code"
          },
          "channelName": {
            "type": "string",
            "description": "channel name"
          },
          "serviceCode": {
            "type": "string",
            "description": "service code"
          },
          "serviceName": {
            "type": "string",
            "description": "service name"
          },
          "orderId": {
            "type": "string",
            "description": "order id"
          },
          "orderCode": {
            "type": "string",
            "description": "order code"
          },
          "terminalCode": {
            "type": "string",
            "description": "branch code"
          },
          "terminalName": {
            "type": "string",
            "description": "branch name"
          },
          "partnerCode": {
            "type": "string",
            "description": "partner code"
          },
          "partnerName": {
            "type": "string",
            "description": "partner name"
          },
          "methodCode": {
            "type": "string",
            "description": "method code"
          },
          "methodName": {
            "type": "string",
            "description": "method name"
          },
          "amount": {
            "type": "integer",
            "description": "amount of money"
          },
          "status": {
            "type": "string",
            "description": "status of transaction"
          },
          "statusName": {
            "type": "string",
            "description": "status description"
          },
          "psResponseCode": {
            "type": "string",
            "description": "the response code from payment service"
          },
          "psResponseMessage": {
            "type": "string",
            "description": "the response message from payment service"
          },
          "currency": {
            "type": "string",
            "description": "currency"
          },
          "cardNumber": {
            "type": "string",
            "description": "card number"
          },
          "paymentTerm": {
            "type": "integer",
            "description": "installment term"
          },
          "bankCode": {
            "type": "string",
            "description": "bank code"
          },
          "bankName": {
            "type": "string",
            "description": "bank name"
          },
          "orderDescription": {
            "type": "string",
            "description": "order description"
          },
          "cardType": {
            "type": "string",
            "description": "card type"
          },
          "bankHotline": {
            "type": "string",
            "description": "bank hot line"
          },
          "partnerTransactionCode": {
            "type": "string",
            "description": "the transaction code from payment partner (Vnpay, Alepay)"
          },
          "clientTransactionCode": {
            "type": "string",
            "description": "the transaction code from client"
          },
          "clientRequestTime": {
            "type": "string",
            "format": "date-time",
            "description": "client request time"
          },
          "clientResponseTime": {
            "type": "string",
            "format": "date-time",
            "description": "time payment service reply to client"
          },
          "psRequestTime": {
            "type": "string",
            "format": "date-time",
            "description": "time ps make request to partner"
          },
          "psResponseTime": {
            "type": "string",
            "format": "date-time",
            "description": "time partner reply to ps"
          }
        }
      },
      "Competitor": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id shop"
          },
          "name": {
            "type": "string",
            "description": "Tên shop"
          },
          "website": {
            "type": "string",
            "description": "Website của shop"
          }
        }
      },
      "CompetitorResp": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "result": {
            "properties": {
              "competitors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Competitor"
                }
              }
            }
          }
        }
      },
      "Benefit": {
        "properties": {
          "money": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenefitMoney"
            }
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenefitItems"
            }
          },
          "voucher": {
            "$ref": "#/components/schemas/BenefitVoucher"
          }
        }
      },
      "BenefitItems": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "applyOn": {
            "type": "string",
            "enum": [
              "product",
              "order"
            ]
          },
          "sku": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "budgetStatus": {
            "$ref": "#/components/schemas/BudgetStatus"
          },
          "budgetId": {
            "type": "integer",
            "description": "Id của ngân sách"
          },
          "outOfBudget": {
            "type": "boolean",
            "description": "Ngân sách còn hay hết"
          },
          "maxQuantityPerOrder": {
            "type": "integer",
            "description": "Số lượng tặng tối đa trên 1 đơn hàng"
          }
        },
        "required": [
          "maxQuantityPerOrder",
          "outOfBudget",
          "budgetId",
          "budgetStatus",
          "name",
          "quantity",
          "sku",
          "applyOn",
          "id"
        ]
      },
      "BenefitMoney": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "applyOn": {
            "type": "string",
            "enum": [
              "product",
              "order"
            ]
          },
          "discountType": {
            "type": "string",
            "enum": [
              "money",
              "percent"
            ]
          },
          "percent": {
            "type": "number",
            "format": "double",
            "description": "Số % được giảm (trong TH giảm giá theo %)"
          },
          "money": {
            "type": "number",
            "format": "double",
            "description": "Số tiền được giảm (trong TH giảm giá theo tiền)"
          },
          "maxDiscount": {
            "type": "number",
            "format": "double",
            "description": "Số tiền được giảm giá tối đa (trong TH giảm giá theo %)"
          },
          "budgetStatus": {
            "$ref": "#/components/schemas/BudgetStatus"
          },
          "budgetId": {
            "type": "integer",
            "description": "Id của ngân sách"
          },
          "outOfBudget": {
            "type": "boolean",
            "description": "Ngân sách còn hay hết"
          },
          "maxDiscountPerOrder": {
            "type": "number",
            "format": "double",
            "description": "Số tiền giảm tối đa trên 1 đơn hàng"
          }
        },
        "required": [
          "maxDiscountPerOrder",
          "outOfBudget",
          "budgetId",
          "budgetStatus",
          "maxDiscount",
          "money",
          "percent",
          "discountType",
          "applyOn",
          "id"
        ]
      },
      "BenefitVoucher": {
        "properties": {
          "appliedPromotion": {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Id của CTKM được áp dụng coupon"
              },
              "name": {
                "type": "string",
                "description": "Tên của CTKM được áp dụng"
              },
              "description": {
                "type": "string",
                "description": "Mô tả của CTKM được áp dụng"
              },
              "benefit": {
                "properties": {
                  "money": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BenefitMoney"
                    }
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BenefitItems"
                    }
                  }
                }
              }
            }
          },
          "maxQuantity": {
            "type": "integer",
            "description": "Số coupon được tặng tối đa trên 1 đơn hàng"
          },
          "budgetStatus": {
            "$ref": "#/components/schemas/BudgetStatus"
          },
          "quantity": {
            "type": "integer",
            "description": "Số lượng tặng"
          },
          "outOfBudget": {
            "type": "boolean",
            "description": "Ngân sách còn hay hết"
          }
        },
        "required": [
          "appliedPromotion",
          "quantity",
          "maxQuantity",
          "outOfBudget",
          "budgetStatus"
        ]
      },
      "BudgetStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive"
        ],
        "description": "Trạng thái ngân sách"
      },
      "Channel": {
        "type": "string",
        "enum": [
          "phong_vu_online",
          "phong_vu_showroom",
          "phong_vu_agent",
          "vnshop_online"
        ]
      },
      "Condition": {
        "properties": {
          "orderValueMin": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "description": "Điều kiện giá trị đơn hàng min"
          },
          "orderValueMax": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "description": "Điều kiện giá trị đơn hàng max"
          },
          "coupon": {
            "type": "string",
            "nullable": true,
            "description": "Mã coupon được áp dụng cho CTKM"
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "skus": {
            "type": "array",
            "description": "Mảng các sku mà chương trình khuyến mãi áp dụng, chỉ trả về nếu request truyền lên list skus",
            "items": {
              "properties": {
                "minQuantity": {
                  "type": "integer",
                  "description": "Số lượng tối thiểu cần mua"
                },
                "blockSize": {
                  "type": "integer",
                  "description": "block tính"
                },
                "sku": {
                  "type": "string",
                  "description": "sku"
                }
              }
            }
          }
        },
        "required": [
          "orderValueMin",
          "orderValueMax",
          "coupon",
          "paymentMethods"
        ]
      },
      "GetCouponExtra": {
        "properties": {
          "usedOrders": {
            "description": "Chỉ trả về tối đa 10 order codes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "terminals": {
            "description": "Các điểm bán mà coupon áp dụng",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "brands": {
            "description": "Các thương hiệu mà coupon áp dụng",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productLines": {
            "description": "Các ngành hàng mà coupon áp dụng",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "description": "Các danh mục mà coupon áp dụng",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "skus": {
            "type": "array",
            "description": "Chỉ trả về tối đa 10 skus",
            "items": {
              "type": "string"
            }
          },
          "orderValueMin": {
            "description": "Giá trị đơn hàng tối thiểu",
            "type": "number",
            "format": "double"
          },
          "orderValueMax": {
            "description": "Giá trị đơn hàng tối đa",
            "type": "number",
            "format": "double"
          }
        }
      },
      "GetPromotionError": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "messsage": {
            "type": "string"
          },
          "extra": {
            "description": "Trả về thông tin của coupon",
            "properties": {
              "coupon": {
                "$ref": "#/components/schemas/GetCouponExtra"
              }
            }
          }
        }
      },
      "Gift": {
        "properties": {
          "sku": {
            "type": "string"
          },
          "lineItemId": {
            "type": "string",
            "description": "Id của order line converted từ gift này"
          },
          "quantity": {
            "type": "integer",
            "description": "Nếu chương trình mua 3 tặng 2 thì quantity ở đây sẽ là 2"
          }
        },
        "required": [
          "sku",
          "quantity",
          "lineItemId"
        ]
      },
      "LineItem": {
        "properties": {
          "lineItemId": {
            "type": "string",
            "description": "Order line id. Trong trường hợp cùng 1 sku mà khác giá, khuyến mãi, trạng thái... thì sẽ tách thành các order line khác nhau."
          },
          "sku": {
            "type": "string"
          },
          "parentSku": {
            "type": "string",
            "description": "Sku của bundle cha, truyền lên nếu sku này thuộc bundle"
          },
          "price": {
            "type": "number",
            "format": "double",
            "description": "giá trước khi apply khuyến mãi"
          },
          "quantity": {
            "type": "integer",
            "description": "Số lượng sản phẩm"
          }
        },
        "required": [
          "lineItemId",
          "sku",
          "price",
          "quantity"
        ]
      },
      "PaymentItem": {
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "Mã uuid payment"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Phương thức thanh toán"
          },
          "amount": {
            "type": "number",
            "description": "Số tiền thanh toán tương ứng"
          },
          "ref": {
            "type": "string",
            "description": "Mã PHM - khi paymentMethod = 'PMH'"
          }
        },
        "required": [
          "paymentId",
          "paymentMethod",
          "amount"
        ]
      },
      "PaymentMethod": {
        "type": "string",
        "enum": [
          "COD",
          "VNPAY",
          "INSTALLMENT",
          "BANK"
        ]
      },
      "Promotion": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "order",
              "product",
              "combo"
            ]
          },
          "isDefault": {
            "type": "boolean"
          },
          "applyOn": {
            "type": "string",
            "enum": [
              "product",
              "order"
            ]
          },
          "startedAt": {
            "type": "string",
            "example": "2019-01-02T10:00:00Z"
          },
          "endedAt": {
            "type": "string",
            "example": "2019-01-02T10:00:00Z"
          },
          "timeRanges": {
            "type": "array",
            "items": {
              "properties": {
                "start": {
                  "type": "string",
                  "example": "10:00:00"
                },
                "end": {
                  "type": "string",
                  "example": "14:00:00"
                }
              }
            }
          },
          "condition": {
            "$ref": "#/components/schemas/Condition"
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "benefit": {
            "$ref": "#/components/schemas/Benefit"
          },
          "govRegister": {
            "type": "boolean",
            "description": "Đăng ký với bộ công thương"
          }
        }
      },
      "PromotionApplyOnItem": {
        "properties": {
          "lineItemId": {
            "type": "string",
            "description": "order line id"
          },
          "quantity": {
            "type": "integer",
            "description": "Ví dụ nếu mua 3 tặng 1 thì quantity trong này sẽ là 3, hiện tại default = 1"
          }
        },
        "required": [
          "lineItemId",
          "quantity"
        ]
      },
      "PromotionByCouponFailedResp": {
        "required": [
          "coupon",
          "code",
          "message"
        ],
        "properties": {
          "coupon": {
            "type": "string",
            "description": "Mã coupon"
          },
          "code": {
            "type": "string",
            "description": "Mã lỗi"
          },
          "message": {
            "type": "string",
            "description": "Thông tin lỗi"
          },
          "extra": {
            "description": "Thông tin thêm",
            "allOf": [
              {
                "$ref": "#/components/schemas/GetCouponExtra"
              }
            ]
          }
        }
      },
      "PromotionByCouponResp": {
        "required": [
          "code",
          "result"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "result": {
            "required": [
              "success",
              "failed"
            ],
            "properties": {
              "success": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PromotionCoupon"
                }
              },
              "failed": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PromotionByCouponFailedResp"
                }
              }
            }
          }
        }
      },
      "PromotionCancelError": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "messsage": {
            "type": "string"
          }
        }
      },
      "PromotionCancelOrderReq": {
        "required": [
          "orderId",
          "orderCode"
        ],
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order uuid"
          },
          "orderCode": {
            "type": "string",
            "description": "Order Code"
          }
        }
      },
      "PromotionConfirmError": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "messsage": {
            "type": "string"
          },
          "extra": {
            "description": "Trả về danh sách đơn hàng confirm lỗi và thành công",
            "type": "object",
            "properties": {
              "failed": {
                "description": "Danh sách đơn hàng không thành công",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PromotionOrderError"
                }
              },
              "success": {
                "description": "Danh sách đơn hàng thành công",
                "type": "array",
                "items": {
                  "properties": {
                    "orderId": {
                      "type": "string",
                      "description": "Mã đơn hàng"
                    },
                    "transactionId": {
                      "type": "string",
                      "description": "transactionId tương ứng trên hệ thống PPM"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PromotionConfirmSuccess": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Mã trả về, thành công nếu code==success."
          },
          "messsage": {
            "type": "string"
          },
          "result": {
            "required": [
              "success"
            ],
            "properties": {
              "success": {
                "description": "Danh sách đơn hàng thành công",
                "type": "array",
                "items": {
                  "properties": {
                    "orderId": {
                      "type": "string",
                      "description": "Mã đơn hàng"
                    },
                    "transactionId": {
                      "type": "string",
                      "description": "transactionId tương ứng trên hệ thống PPM"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PromotionCoupon": {
        "required": [
          "id",
          "name",
          "description",
          "type",
          "isDefault",
          "applyOn",
          "startedAt",
          "endedAt",
          "timeRanges",
          "condition",
          "benefit",
          "govRegister"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "coupon",
              "gift-code"
            ]
          },
          "isDefault": {
            "type": "boolean"
          },
          "applyOn": {
            "type": "string",
            "enum": [
              "product",
              "order",
              "combo"
            ]
          },
          "startedAt": {
            "type": "string",
            "example": "2019-01-02T10:00:00Z"
          },
          "endedAt": {
            "type": "string",
            "example": "2019-01-02T10:00:00Z"
          },
          "timeRanges": {
            "type": "array",
            "items": {
              "properties": {
                "start": {
                  "type": "string",
                  "example": "10:00:00"
                },
                "end": {
                  "type": "string",
                  "example": "14:00:00"
                }
              }
            }
          },
          "condition": {
            "$ref": "#/components/schemas/Condition"
          },
          "benefit": {
            "$ref": "#/components/schemas/Benefit"
          },
          "govRegister": {
            "type": "boolean",
            "description": "Đăng ký với bộ công thương"
          }
        }
      },
      "PromotionError": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "messsage": {
            "type": "string"
          },
          "extra": {
            "description": "Trả về thông tin lỗi của promotions hoặc của đơn hàng",
            "properties": {
              "promotions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PromotionErrorItem"
                }
              },
              "order": {
                "type": "array",
                "items": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Mã lỗi đơn hàng"
                    },
                    "message": {
                      "type": "string",
                      "description": "Mô tả lỗi"
                    }
                  },
                  "required": [
                    "code"
                  ]
                }
              }
            }
          }
        }
      },
      "PromotionErrorItem": {
        "properties": {
          "uuid": {
            "type": "string",
            "description": "uuid của gói khuyến mãi bị lỗi"
          },
          "lineItemId": {
            "type": "string",
            "description": "id của order line bị lỗi"
          },
          "code": {
            "type": "string",
            "description": "mã lỗi"
          },
          "message": {
            "type": "string",
            "description": "Mô tả lỗi"
          }
        },
        "required": [
          "code"
        ]
      },
      "PromotionItem": {
        "properties": {
          "promotionId": {
            "type": "integer",
            "description": "Id của promotions"
          },
          "uuid": {
            "type": "string",
            "description": "Mã uuid của gói khuyến mãi, để định danh gói khuyến mãi và benefit của nó áp dụng cho 1 hoặc 1 tập order lines (combo)"
          },
          "type": {
            "type": "string",
            "enum": [
              "promotion",
              "extra",
              "flash_sale"
            ],
            "description": "Loại khuyến mãi"
          },
          "applyType": {
            "type": "string",
            "enum": [
              "product",
              "combo",
              "order"
            ]
          },
          "applyOn": {
            "type": "array",
            "description": "Mảng các order line mà ctkm áp dụng, với ctkm cho đơn hàng thì không cần truyền lên. Nếu ctkm là\nmua 2A tặng 1B, tối thiểu phải có 5A. Đơn hàng có 5A thì applyOn là mảng chứa 5A, khối gifts có 2B.\n",
            "items": {
              "$ref": "#/components/schemas/PromotionApplyOnItem"
            }
          },
          "discount": {
            "type": "number",
            "format": "double",
            "description": "Tổng khuyến mãi được nhận cho chương trình khuyến mãi. Nếu mua 1A được giảm 10k, đơn hàng cho 3A\nthì discount = 30k\n"
          },
          "originalDiscount": {
            "type": "number",
            "format": "double",
            "description": "Giá trị discount gốc, truyền lên trong trường hợp đơn miễn thuế"
          },
          "gifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Gift"
            },
            "description": "Mảng các quà được tặng từ ctkm. Ví dụ mua 1A được tặng 2B. Đơn hàng có 3A thì gifts = 6B"
          },
          "removedGifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RemovedGift"
            },
            "description": "Mảng các quà được trả lại"
          },
          "quantity": {
            "type": "integer",
            "description": "Số lần promotion được apply. Ví dụ nếu chương trình mua 3A tặng 2B mà đơn hàng có 7A thì quanity = 2. Nếu ctkm\n là mua 1A tặng 1B, đơn hàng có 4A thì quantity = 4\n"
          },
          "voucher": {
            "type": "object",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "Số lượng voucher thực tế được tặng cho 1 ctkm. Ví dụ với CTKM mua 1 sp được tặng 1 voucher, nhưng max_quantity là 3,\nthì khi KH mua 5 sản phẩm, số lượng voucher sản phẩm là quantity=min(5*1, 3) = 3\n"
              }
            }
          },
          "coupon": {
            "type": "string",
            "description": "Truyền lên coupon code nếu ctkm này ăn theo coupon"
          }
        },
        "required": [
          "type",
          "uuid",
          "applyType",
          "quantity",
          "promotionId"
        ]
      },
      "PromotionItemReq": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "coupon": {
            "type": "string",
            "description": "Coupon được áp dụng cho chương trình khuyến mãi"
          },
          "promotionAmount": {
            "type": "integer"
          },
          "gifts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenefitItems"
            }
          },
          "vouchers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PromotionMultiOrderReq": {
        "required": [
          "orders"
        ],
        "properties": {
          "orders": {
            "description": "Danh sách order cần confirm",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionOrderReq"
            }
          }
        }
      },
      "PromotionOrderError": {
        "required": [
          "code",
          "orderId"
        ],
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Mã đơn hàng"
          },
          "code": {
            "type": "string"
          },
          "messsage": {
            "type": "string"
          },
          "extra": {
            "description": "Trả về thông tin lỗi của promotions hoặc của đơn hàng",
            "properties": {
              "promotions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PromotionErrorItem"
                }
              },
              "order": {
                "type": "array",
                "items": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Mã lỗi đơn hàng"
                    },
                    "message": {
                      "type": "string",
                      "description": "Mô tả lỗi"
                    }
                  },
                  "required": [
                    "code"
                  ]
                }
              }
            }
          }
        }
      },
      "PromotionOrderReq": {
        "required": [
          "orderId",
          "orderCode",
          "products",
          "terminal",
          "orderPromotionIds",
          "grandTotal",
          "paymentMethod",
          "items",
          "promotions"
        ],
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order uuid"
          },
          "orderCode": {
            "type": "string",
            "description": "Order Code"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItem"
            }
          },
          "promotions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionItem"
            }
          },
          "terminal": {
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "grandTotal": {
            "type": "number",
            "format": "double",
            "description": "Tổng giá trị đơn hàng"
          },
          "billingType": {
            "type": "string",
            "description": "Loại hóa đơn, truyền lên 02 nếu là đơn miễn thuế, default là 01"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentItem"
            }
          }
        }
      },
      "PromotionOrderRes": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Mã trả về, thành công nếu code==success."
          },
          "messsage": {
            "type": "string"
          },
          "result": {
            "required": [
              "transaction"
            ],
            "properties": {
              "transaction": {
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Mã giao dịch ngân sách"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        }
      },
      "PromotionResp": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "result": {
            "properties": {
              "promotions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Promotion"
                }
              }
            }
          }
        }
      },
      "RemovedGift": {
        "properties": {
          "sku": {
            "type": "string"
          },
          "quantity": {
            "type": "integer",
            "description": "Số lượng quà removed cho 1 ctkm"
          }
        },
        "required": [
          "sku",
          "quantity"
        ]
      },
      "seller_create": {
        "required": [
          "code",
          "name",
          "taxIDNumber",
          "brcCode",
          "brcDate",
          "phoneNumber",
          "email",
          "provinceCode",
          "districtCode",
          "wardCode",
          "streetAddress",
          "isAutoGeneratedSKU",
          "displayName",
          "saleCategoryIDS",
          "servicePackage",
          "usingGoodsManagementModules"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 3
          },
          "isActive": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "internationalName": {
            "type": "string",
            "maxLength": 255
          },
          "foundingDate": {
            "type": "string",
            "format": "date"
          },
          "taxIDNumber": {
            "type": "string",
            "maxLength": 255
          },
          "brcCode": {
            "type": "string",
            "maxLength": 255
          },
          "brcDate": {
            "type": "string",
            "format": "date"
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 11
          },
          "email": {
            "type": "string",
            "maxLength": 255
          },
          "provinceCode": {
            "type": "string",
            "maxLength": 10
          },
          "districtCode": {
            "type": "string",
            "maxLength": 10
          },
          "wardCode": {
            "type": "string",
            "maxLength": 10
          },
          "streetAddress": {
            "type": "string",
            "maxLength": 255
          },
          "fullAddress": {
            "type": "string",
            "maxLength": 511
          },
          "displayName": {
            "type": "string",
            "maxLength": 255
          },
          "servicePackage": {
            "type": "string",
            "enum": [
              "erp",
              "fullfillment",
              "full_service"
            ]
          },
          "slogan": {
            "type": "string",
            "maxLength": 255
          },
          "saleCategoryIDS": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "isAutoGeneratedSKU": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "usingGoodsManagementModules": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          }
        }
      },
      "seller_update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "internationalName": {
            "type": "string",
            "maxLength": 255
          },
          "foundingDate": {
            "type": "string",
            "format": "date"
          },
          "taxIDNumber": {
            "type": "string",
            "maxLength": 255
          },
          "brcCode": {
            "type": "string",
            "maxLength": 255
          },
          "brcDate": {
            "type": "string",
            "format": "date"
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 11
          },
          "email": {
            "type": "string",
            "maxLength": 255
          },
          "provinceCode": {
            "type": "string",
            "maxLength": 10
          },
          "districtCode": {
            "type": "string",
            "maxLength": 10
          },
          "wardCode": {
            "type": "string",
            "maxLength": 10
          },
          "streetAddress": {
            "type": "string",
            "maxLength": 255
          },
          "fullAddress": {
            "type": "string",
            "maxLength": 511
          },
          "displayName": {
            "type": "string",
            "maxLength": 255
          },
          "servicePackage": {
            "type": "string",
            "enum": [
              "erp",
              "fullfillment",
              "full_service"
            ]
          },
          "slogan": {
            "type": "string",
            "maxLength": 255
          },
          "saleCategoryIDS": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "isAutoGeneratedSKU": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "usingGoodsManagementModules": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          }
        }
      },
      "seller": {
        "title": "seller",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string",
            "maxLength": 3
          },
          "isActive": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "internationalName": {
            "type": "string",
            "maxLength": 255
          },
          "foundingDate": {
            "type": "string",
            "format": "date"
          },
          "taxIDNumber": {
            "type": "string",
            "maxLength": 255
          },
          "brcCode": {
            "type": "string",
            "maxLength": 255
          },
          "brcDate": {
            "type": "string",
            "format": "date"
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 11
          },
          "email": {
            "type": "string",
            "maxLength": 255
          },
          "provinceCode": {
            "type": "string",
            "maxLength": 10
          },
          "districtCode": {
            "type": "string",
            "maxLength": 10
          },
          "wardCode": {
            "type": "string",
            "maxLength": 10
          },
          "streetAddress": {
            "type": "string",
            "maxLength": 255
          },
          "fullAddress": {
            "type": "string",
            "maxLength": 511
          },
          "displayName": {
            "type": "string",
            "maxLength": 255
          },
          "servicePackage": {
            "type": "string",
            "enum": [
              "erp",
              "fullfillment",
              "full_service"
            ]
          },
          "slogan": {
            "type": "string",
            "maxLength": 255
          },
          "saleCategoryIDS": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "isAutoGeneratedSKU": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "usingGoodsManagementModules": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          }
        }
      },
      "sellers": {
        "title": "sellers",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/seller"
        }
      },
      "terminal_update": {
        "title": "terminal",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "provinceCode": {
            "type": "string",
            "maxLength": 10
          },
          "districtCode": {
            "type": "string",
            "maxLength": 10
          },
          "wardCode": {
            "type": "string",
            "maxLength": 10
          },
          "streetAddress": {
            "type": "string",
            "maxLength": 255
          },
          "isRequestedApproval": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "note": {
            "type": "string",
            "maxLength": 255
          }
        }
      },
      "terminal_warehouse": {
        "title": "Terminals Warehouses MappingTerminal Warehouse",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "terminal": {
            "$ref": "#/components/schemas/terminal"
          },
          "warehouseName": {
            "type": "string"
          },
          "warehouseCode": {
            "type": "string"
          },
          "warehouseFullAddress": {
            "type": "string"
          },
          "isActive": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          }
        }
      },
      "terminal": {
        "title": "terminal",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string",
            "maxLength": 255
          },
          "isActive": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "provinceCode": {
            "type": "string",
            "maxLength": 10
          },
          "districtCode": {
            "type": "string",
            "maxLength": 10
          },
          "wardCode": {
            "type": "string",
            "maxLength": 10
          },
          "streetAddress": {
            "type": "string",
            "maxLength": 255
          },
          "fullAddress": {
            "type": "string",
            "maxLength": 511
          },
          "isRequestedApproval": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "platform": {
            "type": "string",
            "enum": [
              "WEB",
              "APP",
              "IBK"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "AGE",
              "OLN",
              "SHR",
              "SCA",
              "TLS"
            ]
          },
          "note": {
            "type": "string",
            "maxLength": 255
          },
          "isOwner": {
            "type": "integer",
            "minimum": 0,
            "maximum": 1
          },
          "sellerID": {
            "type": "integer"
          },
          "deliveryMethods": {
            "type": "object",
            "properties": {
              "handOver": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1
              },
              "pickupCounter": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1
              },
              "homeDelivery": {
                "type": "integer",
                "minimum": 0,
                "maximum": 1
              }
            }
          }
        }
      },
      "terminals_warehouses": {
        "title": "terminals warehouses",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/terminal_warehouse"
        }
      },
      "terminals": {
        "title": "terminals",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/terminal"
        }
      },
      "srm_product_error": {
        "properties": {
          "message": {
            "type": "string",
            "description": "error message"
          },
          "extra": {
            "type": "object"
          },
          "code": {
            "type": "string",
            "description": "error code"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "srm_product_item_req": {
        "required": [
          "barcode",
          "categCode",
          "costPriceCalc",
          "defaultCode",
          "isService",
          "isUncounted",
          "name",
          "productBrandCode",
          "saleOnlineOnly",
          "supportDelivery",
          "tracking",
          "type",
          "uomName",
          "uomPoName"
        ],
        "properties": {
          "partNumber": {
            "description": "Part Number",
            "type": "string"
          },
          "warrantyStampQty": {
            "description": "Number of warranty stamps",
            "type": "integer"
          },
          "tracking": {
            "description": "tracking",
            "type": "string"
          },
          "attributeValueCode": {
            "description": "Property (color)",
            "type": "string"
          },
          "uomPoName": {
            "description": "Purchase unit of measurement",
            "type": "string"
          },
          "note": {
            "description": "Note",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "isService": {
            "description": "Product service",
            "default": false,
            "type": "boolean"
          },
          "salePoint": {
            "description": "Product points",
            "type": "number"
          },
          "warrantyNote": {
            "description": "Warranty notes",
            "type": "string"
          },
          "type": {
            "description": "Product type:- consu: Product does not manage inventory (Allow to sell negative)- product: Product with inventory management and storage",
            "enum": [
              "consu",
              "product"
            ],
            "example": "consu",
            "type": "string"
          },
          "productStatus": {
            "description": "Status",
            "type": "integer"
          },
          "categCode": {
            "description": "Category",
            "type": "string"
          },
          "shortName": {
            "description": "Feature name",
            "type": "string"
          },
          "barcode": {
            "description": "Barcode",
            "type": "string"
          },
          "costPriceCalc": {
            "description": "Calculate cost price",
            "default": false,
            "type": "boolean"
          },
          "isUncounted": {
            "description": "No tally",
            "default": false,
            "type": "boolean"
          },
          "uomName": {
            "description": "Unit",
            "type": "string"
          },
          "saleOnlineOnly": {
            "description": "Sale online only",
            "default": false,
            "type": "boolean"
          },
          "productBrandCode": {
            "description": "Brand code",
            "type": "string"
          },
          "defaultCode": {
            "description": "Default code",
            "type": "string"
          },
          "exchangePeriod": {
            "description": "1-1 Exchange period (day)",
            "type": "integer"
          },
          "supportDelivery": {
            "description": "Support delivery",
            "default": false,
            "type": "boolean"
          },
          "warrantyPeriod": {
            "description": "Warranty period",
            "type": "number"
          }
        },
        "type": "object"
      },
      "srm_product_result": {
        "properties": {
          "feId": {
            "description": "ID of record, empty if not exist",
            "type": "string"
          }
        },
        "type": "object"
      },
      "srm_product_success": {
        "properties": {
          "message": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/srm_product_result"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "stock_out_confirm_req": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "description": "Confirmation time",
            "type": "string"
          },
          "orderID": {
            "description": "Order ID",
            "type": "string"
          },
          "staffId": {
            "description": "Receive goods staff ID",
            "type": "string"
          },
          "requestCode": {
            "description": "CKNB receipt code, stock out receipt code",
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "orderID",
          "requestCode"
        ],
        "type": "object"
      },
      "stock_out_error": {
        "properties": {
          "message": {
            "type": "string",
            "description": "error message"
          },
          "extra": {
            "type": "object"
          },
          "code": {
            "type": "string",
            "description": "error code"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "type": "object"
      },
      "stock_out_request_req": {
        "properties": {
          "requestType": {
            "description": "Export type",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "description": "Request time",
            "type": "string"
          },
          "orderID": {
            "description": "Order code (if in other export type, orderID = 0)",
            "type": "string"
          },
          "requestCode": {
            "description": "CKNB receipt code, stock out receipt code",
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "orderID",
          "requestCode",
          "requestType"
        ],
        "type": "object"
      },
      "stock_out_result": {
        "properties": {
          "requestCode": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "stock_out_success": {
        "properties": {
          "message": {
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/stock_out_result"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "stock_quant_min_response": {
        "required": [
          "sku"
        ],
        "properties": {
          "sku": {
            "description": "Product sku",
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/stock_quant_min"
            }
          }
        },
        "type": "object"
      },
      "stock_quant_min_success": {
        "properties": {
          "message": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/stock_quant_min_response"
            }
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "stock_quant_min": {
        "properties": {
          "available": {
            "description": "Available quantity = Actual inventory number - stock held = onHand- reserved",
            "type": "number"
          },
          "branchName": {
            "description": "Branch name",
            "type": "string"
          },
          "locationName": {
            "description": "Location name",
            "type": "string"
          },
          "productBizType": {
            "description": "Type of product business",
            "type": "string"
          },
          "storeCode": {
            "description": "Asia region type",
            "type": "string"
          },
          "onHand": {
            "description": "Actual quantity in stock",
            "type": "number"
          },
          "reserved": {
            "description": "Stock held quantity",
            "type": "number"
          },
          "warehouse": {
            "description": "Warehouse name",
            "type": "string"
          },
          "location": {
            "description": "Location code",
            "type": "string"
          },
          "branch": {
            "description": "Branch code",
            "type": "string"
          },
          "warehouseName": {
            "description": "Warehouse code",
            "type": "string"
          },
          "timestamp": {
            "description": "Time Stamp",
            "type": "number"
          }
        },
        "type": "object"
      },
      "stock_quant_response": {
        "required": [
          "sku"
        ],
        "properties": {
          "sku": {
            "description": "Product sku",
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/stock_quant"
            }
          }
        },
        "type": "object"
      },
      "stock_quant_success": {
        "properties": {
          "message": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/stock_quant_response"
            }
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "stock_quant": {
        "properties": {
          "outgoing": {
            "description": "Stock outgoing quantity",
            "type": "integer"
          },
          "reserved": {
            "description": "Stock held quantity",
            "type": "number"
          },
          "onHand": {
            "description": "Actual quantity in stock",
            "type": "number"
          },
          "location": {
            "description": "Location code",
            "type": "string"
          },
          "productBizType": {
            "description": "Type of product business",
            "type": "string"
          },
          "incoming": {
            "description": "Quantity about to enter stock",
            "type": "integer"
          },
          "forecast": {
            "description": "No description",
            "type": "number"
          },
          "branch": {
            "description": "Branch code",
            "type": "string"
          },
          "available": {
            "description": "Available quantity = Actual inventory number - stock held = onHand- reserved",
            "type": "number"
          },
          "storeCode": {
            "description": "Asia region type",
            "type": "string"
          },
          "warehouse": {
            "description": "Warehouse code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "address": {
        "title": "Address",
        "type": "object",
        "description": "Address of an user",
        "x-examples": {},
        "properties": {
          "addressId": {
            "type": "string",
            "maxLength": 255
          },
          "userId": {
            "type": "string",
            "maxLength": 255
          },
          "address": {
            "type": "string"
          },
          "addressNote": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-z][a-z0-9_\\.]{2,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,}){1,2}$"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "telephone": {
            "type": "string",
            "pattern": "^0[0-9]{8,10}$"
          },
          "longitude": {
            "type": "string",
            "maxLength": 255
          },
          "latitude": {
            "type": "string",
            "maxLength": 255
          },
          "clientCode": {
            "type": "string",
            "maxLength": 255
          },
          "provinceCode": {
            "type": "string"
          },
          "districtCode": {
            "type": "string"
          },
          "wardCode": {
            "type": "string"
          },
          "provinceName": {
            "type": "string"
          },
          "districtName": {
            "type": "string"
          },
          "wardName": {
            "type": "string"
          }
        },
        "required": [
          "addressId",
          "userId",
          "address",
          "isDefault",
          "name",
          "telephone",
          "clientCode"
        ]
      },
      "addressPatchRequest": {
        "title": "addressRequest",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "addressNote": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-z][a-z0-9_\\.]{2,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,}){1,2}$",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "telephone": {
            "type": "string",
            "pattern": "^0[0-9]{8,10}$"
          },
          "longitude": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "latitude": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "provinceCode": {
            "type": "string",
            "nullable": true
          },
          "districtCode": {
            "type": "string",
            "nullable": true
          },
          "wardCode": {
            "type": "string",
            "nullable": true
          },
          "provinceName": {
            "type": "string"
          },
          "districtName": {
            "type": "string",
            "nullable": true
          },
          "wardName": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "addressRequest": {
        "title": "addressRequest",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "addressNote": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "maxLength": 255,
            "pattern": "^[a-z][a-z0-9_\\.]{2,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,}){1,2}$",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "telephone": {
            "type": "string",
            "pattern": "^0[0-9]{8,10}$"
          },
          "longitude": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "latitude": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "clientCode": {
            "type": "string",
            "maxLength": 255
          },
          "provinceCode": {
            "type": "string",
            "nullable": true
          },
          "districtCode": {
            "type": "string",
            "nullable": true
          },
          "wardCode": {
            "type": "string",
            "nullable": true
          },
          "provinceName": {
            "type": "string",
            "nullable": true
          },
          "districtName": {
            "type": "string",
            "nullable": true
          },
          "wardName": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "address",
          "isDefault",
          "name",
          "telephone",
          "clientCode"
        ]
      },
      "appSetting": {
        "title": "appSetting",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 255
          },
          "key": {
            "type": "string",
            "maxLength": 255
          },
          "value": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "key",
          "value"
        ]
      },
      "appSettings": {
        "title": "appSettings",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/appSetting"
        }
      },
      "calculatePointRequest": {
        "title": "calculatePoint",
        "required": [
          "orderAmount"
        ],
        "type": "object",
        "properties": {
          "orderDetail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderDetail"
            }
          },
          "orderAmount": {
            "type": "integer"
          }
        }
      },
      "calculatePointResponse": {
        "title": "calculatePointResponse",
        "type": "object",
        "properties": {
          "usablePointAmount": {
            "type": "integer"
          },
          "equivalentUsableAmount": {
            "type": "integer"
          },
          "remainingAmount": {
            "type": "integer"
          },
          "tempPointAmount": {
            "type": "integer"
          }
        },
        "required": [
          "usablePointAmount",
          "equivalentUsableAmount",
          "remainingAmount",
          "tempPointAmount"
        ]
      },
      "orderDetail": {
        "title": "orderDetal",
        "required": [
          "calcAmount",
          "productCode",
          "quantity",
          "seqNo",
          "unitPrice"
        ],
        "type": "object",
        "properties": {
          "fullClassCode": {
            "type": "string"
          },
          "fullDeptCode": {
            "type": "string"
          },
          "seqNo": {
            "type": "integer"
          },
          "productCode": {
            "type": "string"
          },
          "unitPrice": {
            "type": "integer"
          },
          "quantity": {
            "type": "integer"
          },
          "calcAmount": {
            "type": "integer"
          }
        }
      },
      "partnerPointBalanceResponse": {
        "title": "partnerPointBalanceResponse",
        "type": "object",
        "properties": {
          "merchantId": {
            "type": "integer"
          },
          "merchantName": {
            "type": "string"
          },
          "pointBalance": {
            "type": "integer"
          },
          "equivalentTokenAmount": {
            "type": "integer"
          },
          "equivalentAmount": {
            "type": "integer"
          },
          "nearExpirePointBalance": {
            "type": "integer"
          },
          "nearExpireEquivalentTokenAmount": {
            "type": "integer"
          },
          "nearExpireEquivalentAmount": {
            "type": "integer"
          }
        }
      },
      "profile": {
        "title": "profile",
        "type": "object",
        "properties": {
          "profileId": {
            "type": "string",
            "maxLength": 255
          },
          "userId": {
            "type": "string",
            "maxLength": 255
          },
          "clientCode": {
            "type": "string",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "pattern": "^[a-z][a-z0-9_\\.]{2,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,}){1,2}$"
          },
          "telephone": {
            "type": "string",
            "pattern": "^0[0-9]{8,10}$"
          },
          "sex": {
            "type": "string",
            "enum": [
              "M",
              "F",
              "O"
            ]
          },
          "dob": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "profileId",
          "userId",
          "clientCode"
        ]
      },
      "profilePatchRequest": {
        "title": "profilePatchRequest",
        "type": "object",
        "properties": {
          "dob": {
            "type": "string",
            "format": "date"
          },
          "sex": {
            "type": "string",
            "enum": [
              "M",
              "F",
              "O"
            ]
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "pattern": "^[a-z][a-z0-9_\\.]{2,32}@[a-z0-9]{2,}(\\.[a-z0-9]{2,}){1,2}$"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "email",
          "name"
        ]
      },
      "rating": {
        "title": "rating",
        "required": [
          "productSku",
          "rating",
          "sellerId"
        ],
        "type": "object",
        "properties": {
          "sellerId": {
            "type": "integer"
          },
          "rating": {
            "type": "integer"
          },
          "comment": {
            "type": "string"
          },
          "productSku": {
            "type": "string"
          }
        }
      },
      "ratingResponse": {
        "title": "ratingResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 255
          },
          "productSku": {
            "type": "string",
            "maxLength": 255
          },
          "userId": {
            "type": "string",
            "maxLength": 255
          },
          "sellerId": {
            "type": "integer"
          },
          "clientCode": {
            "type": "string",
            "maxLength": 255
          },
          "rating": {
            "type": "integer"
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "productSku",
          "userId",
          "clientCode",
          "rating",
          "sellerId"
        ]
      },
      "savedCart": {
        "title": "saveCart",
        "type": "object",
        "properties": {
          "savedCart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/savedCartProduct"
            }
          }
        }
      },
      "savedCartProduct": {
        "title": "savedCartProduct",
        "type": "object",
        "properties": {
          "productSku": {
            "type": "string",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer"
          },
          "sellerId": {
            "type": "integer"
          },
          "isSelected": {
            "type": "boolean"
          }
        },
        "required": [
          "productSku",
          "quantity",
          "isSelected",
          "sellerId"
        ]
      },
      "savedCartProductRes": {
        "title": "savedCartProductRes",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 255
          },
          "productSku": {
            "type": "string",
            "maxLength": 255
          },
          "quantity": {
            "type": "integer"
          },
          "isSelected": {
            "type": "boolean"
          },
          "sellerId": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "productSku",
          "quantity",
          "isSelected"
        ]
      },
      "savedCartUpdate": {
        "title": "savedCartUpdate",
        "type": "object",
        "required": [
          "isSelected",
          "quantity"
        ],
        "properties": {
          "quantity": {
            "type": "integer"
          },
          "isSelected": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "tempPointTransResponse": {
        "title": "tempPointTransResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "validDate": {
            "type": "string"
          },
          "expiryDate": {
            "type": "string"
          },
          "orderCode": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "actionCode": {
            "type": "string"
          },
          "nationalId": {
            "type": "string"
          },
          "actionName": {
            "type": "string"
          },
          "merchantId": {
            "type": "integer"
          },
          "merchantName": {
            "type": "string"
          },
          "memberId": {
            "type": "integer"
          },
          "actionType": {
            "type": "string"
          },
          "tempPointAmount": {
            "type": "integer"
          },
          "grantType": {
            "type": "string"
          }
        }
      },
      "tokenTransResponse": {
        "title": "tokenTransResponse",
        "type": "object",
        "properties": {
          "tokenTransId": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "businessTime": {
            "type": "string"
          },
          "validDate": {
            "type": "string"
          },
          "expiryDate": {
            "type": "string"
          },
          "orderCode": {
            "type": "string"
          },
          "actionCode": {
            "type": "string"
          },
          "grantType": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "usagePriority": {
            "type": "string"
          },
          "actionName": {
            "type": "string"
          },
          "fromWalletAddress": {
            "type": "string"
          },
          "fromMerchantNameOrMember": {
            "type": "string"
          },
          "toWalletAddress": {
            "type": "string"
          },
          "toMerchantNameOrMember": {
            "type": "string"
          },
          "storeId": {
            "type": "integer"
          },
          "storeName": {
            "type": "string"
          },
          "userAddress": {
            "type": "string"
          },
          "currencyExchangeRate": {
            "type": "string"
          },
          "actionType": {
            "type": "string"
          },
          "tokenAmount": {
            "type": "string"
          },
          "partnerPointAmount": {
            "type": "string"
          },
          "nationalId": {
            "type": "string"
          },
          "memberId": {
            "type": "integer"
          },
          "pointExchangeRate": {
            "type": "string"
          }
        }
      },
      "viewPointResponse": {
        "title": "viewPointResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "partnerPointBalance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/partnerPointBalanceResponse"
            }
          },
          "tempPointBalance": {
            "type": "integer"
          },
          "tokenBalance": {
            "type": "integer"
          },
          "totalCount": {
            "type": "integer"
          },
          "totalEquivalentAmount": {
            "type": "integer"
          }
        }
      },
      "wishList": {
        "title": "wishList",
        "type": "object",
        "properties": {
          "wishList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/wishListProduct"
            }
          }
        }
      },
      "wishListProduct": {
        "title": "wishListProduct",
        "type": "object",
        "properties": {
          "sellerId": {
            "type": "integer"
          },
          "productSku": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "productSku"
        ]
      },
      "Voucher": {
        "required": [
          "status",
          "code"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "description": "1 - used | 2 - useable | 3 - cancelled"
          },
          "code": {
            "type": "string",
            "description": "voucher code"
          },
          "createdFrom": {
            "type": "string",
            "description": "from which order this voucher was created"
          },
          "usedFor": {
            "type": "string",
            "description": "for which order this voucher was used"
          },
          "startAt": {
            "type": "integer",
            "format": "int64",
            "description": "from when this voucher can be used\nif this key has a value, it will override the value \ninside voucher data\n"
          },
          "endAt": {
            "type": "integer",
            "format": "int64",
            "description": "until when this voucher can be used\nif this key has a value, it will override the value \ninside voucher data\n"
          },
          "data": {
            "$ref": "#/components/schemas/VoucherData"
          }
        }
      },
      "VoucherData": {
        "properties": {
          "applyFrom": {
            "type": "integer",
            "format": "int64",
            "description": "only apply if the order grand total is higher than",
            "example": 1000000
          },
          "name": {
            "type": "string",
            "description": "the name of the program",
            "example": "Voucher doanh nghiệp cho đơn hàng lớn hơn 10 triệu"
          },
          "startAt": {
            "type": "integer",
            "format": "int64",
            "description": "from when this voucher can be used"
          },
          "endAt": {
            "type": "integer",
            "format": "int64"
          },
          "discount": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DiscountByValue"
              },
              {
                "$ref": "#/components/schemas/DiscountByPercentage"
              }
            ]
          }
        }
      },
      "VoucherResp": {
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "result": {
            "required": [
              "voucher"
            ],
            "properties": {
              "voucher": {
                "$ref": "#/components/schemas/Voucher"
              }
            }
          }
        }
      },
      "warehouse_success": {
        "properties": {
          "message": {
            "type": "string"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/warehouse"
            }
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "warehouse": {
        "required": [
          "code"
        ],
        "properties": {
          "name": {
            "description": "warehouse name",
            "type": "string"
          },
          "branchCode": {
            "description": "warehouse branch code",
            "type": "string"
          },
          "code": {
            "description": "warehouse code",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "Exception": {
        "description": "Catch all global exception"
      },
      "MaskError": {
        "description": "When any error occurs on mask"
      },
      "ParseError": {
        "description": "When a mask can't be parsed"
      }
    },
    "requestBodies": {
      "srm_product_item_req": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/srm_product_item_req"
            }
          }
        },
        "required": true
      }
    }
  }
}
